#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL float
#define IKFAST_NAMESPACE kinematics_ikfast_backRightFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-26 16:20:01.069037
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return float(-IKPI_2);
    }
    else if (false)//else if( f >= 1 )
    {
//        return float(IKPI_2);
    }
//    return asinf(f);
}
inline double IKasin(double f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if (false)//else if( f >= 1 )
    {
//        return IKPI_2;
    }
//    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return float(IKPI);
    }
    else if( f >= 1 )
    {
//        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if (false)//if( f <= 0.0f )
    {
//        return 0.0f;
    }
//    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if (false)//if( f <= 0.0 )
    {
//        return 0.0;
    }
//    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKsin(j[0]);
    x3=IKsin(j[1]);
    x4=IKsin(j[2]);
    x5=IKcos(j[2]);
    x6=((0.24)*x4);
    x7=((0.36)*x0);
    x8=((0.36)*x2);
    x9=((0.24)*x1*x5);
    IkReal x10=((1.0)*x7);
    IkReal x11=((1.0)*x0);
    eetrans[0]=((-0.36)+(((-1.0)*x10))+(((-1.0)*x1*x10))+(((-1.0)*x11*x9))+(((-1.0)*x11*x3*x6)));
    IkReal x12=((1.0)*x8);
    IkReal x13=((1.0)*x2);
    eetrans[1]=((((-1.0)*x12))+(((-1.0)*x13*x9))+(((-1.0)*x1*x12))+(((-1.0)*x13*x3*x6)));
    eetrans[2]=((0.15)+(((-1.0)*x1*x6))+(((0.24)*x3*x5))+(((0.36)*x3)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j3=numeric_limits<IkReal>::quiet_NaN();
        _ij3[0] = -1;
        _ij3[1] = -1;
        _nj3 = -1;
        j4=numeric_limits<IkReal>::quiet_NaN();
        _ij4[0] = -1;
        _ij4[1] = -1;
        _nj4 = -1;
        j5=numeric_limits<IkReal>::quiet_NaN();
        _ij5[0] = -1;
        _ij5[1] = -1;
        _nj5 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((0.36)+px);
            new_py=py;
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j3eval[1];
                j3eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j3eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
//                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
//                                bgotonextstatement=false;
                                {
                                    IkReal j5array[2], cj5array[2], sj5array[2];
                                    bool j5valid[2]= {false};
//                                    _nj5 = 2;
//                                    cj5array[0]=((-0.333333333333333)+(((5.78703703703704)*(pz*pz))));
                                    if (false)//if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
//                                        j5valid[0] = j5valid[1] = true;
//                                        j5array[0] = IKacos(cj5array[0]);
//                                        sj5array[0] = IKsin(j5array[0]);
//                                        cj5array[1] = cj5array[0];
//                                        j5array[1] = -j5array[0];
//                                        sj5array[1] = -sj5array[0];
                                    }
                                    else if (false)//else if( isnan(cj5array[0]) )
                                    {
                                        // probably any value will work
//                                        j5valid[0] = true;
//                                        cj5array[0] = 1;
//                                        sj5array[0] = 0;
//                                        j5array[0] = 0;
                                    }
//                                    for(int ij5 = 0; ij5 < 2; ++ij5)
                                    {
                                        if (false)//if( !j5valid[ij5] )
                                        {
//                                            continue;
                                        }
//                                        _ij5[0] = ij5;
//                                        _ij5[1] = -1;
//                                        for(int iij5 = ij5+1; iij5 < 2; ++iij5)
                                        {
                                            if (false)//if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
                                            {
//                                                j5valid[iij5]=false;
//                                                _ij5[1] = iij5;
//                                                break;
                                            }
                                        }
//                                        j5 = j5array[ij5];
//                                        cj5 = cj5array[ij5];
//                                        sj5 = sj5array[ij5];

                                        {
                                            IkReal j4eval[3];
//                                            px=0;
//                                            py=0;
//                                            pp=pz*pz;
//                                            IkReal x14=pz*pz;
//                                            IkReal x15=((150.0)*pz);
//                                            j4eval[0]=((-1.0)+(((-7.71604938271605)*x14)));
//                                            j4eval[1]=IKsign(((-81.0)+(((-625.0)*x14))));
//                                            j4eval[2]=((IKabs(((((-1.0)*cj5*x15))+(((54.0)*sj5))+(((-225.0)*pz)))))+(IKabs(((81.0)+((sj5*x15))+(((54.0)*cj5))))));
                                            if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j4eval[3];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    IkReal x16=((225.0)*pz);
//                                                    IkReal x17=((54.0)*sj5);
//                                                    IkReal x18=(cj5*pz);
//                                                    IkReal x19=(x17+x16);
//                                                    j4eval[0]=((((-1.0)*sj5))+(((-4.16666666666667)*pz))+(((-2.77777777777778)*x18)));
//                                                    j4eval[1]=((IKabs(((36.0)+(((-36.0)*(cj5*cj5)))+(((-625.0)*(pz*pz))))))+(IKabs((x19+(((36.0)*cj5*sj5))))));
//                                                    j4eval[2]=IKsign(((((-1.0)*x19))+(((-150.0)*x18))));
                                                    if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j4eval[1];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j4eval[0]=((1.5)+cj5+(((-2.77777777777778)*pz*sj5)));
                                                            if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
//                                                                        IkReal x20=((1.0)+(((7.71604938271605)*(pz*pz))));
//                                                                        IkReal x27 = x20;
                                                                        if (false)//if(IKabs(x27)==0)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x21=pow(x27,-0.5);
                                                                        if (false)//if((x20) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x22=IKabs(IKsqrt(x20));
//                                                                        IkReal x23=(pz*x21);
//                                                                        CheckValue<IkReal> x28=IKPowWithIntegerCheck<IKFAST_REAL>(x22,-1);
                                                                        if (false)//if(!x28.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x24=x28.value;
//                                                                        IkReal x25=((1.5)*x24);
                                                                        if (false)//if((((1.0)+(((-2.25)*(x24*x24))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x26=IKsqrt(((1.0)+(((-2.25)*(x24*x24)))));
//                                                                        CheckValue<IkReal> x29 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x29.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (x25) < -1-IKFAST_SINCOS_THRESH || (x25) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal gconst0=((((-1.0)*(x29.value)))+(((-1.0)*(IKasin(x25)))));
//                                                                        IkReal gconst1=((((-1.0)*x21*x26))+(((4.16666666666667)*x23*x24)));
//                                                                        IkReal gconst2=((((-1.0)*x21*x25))+(((-2.77777777777778)*x23*x26)));
//                                                                        CheckValue<IkReal> x30 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x30.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x31=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if (false)//if(!x31.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((1.5)*(x31.value))) < -1-IKFAST_SINCOS_THRESH || (((1.5)*(x31.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x30.value)+(IKasin(((1.5)*(x31.value))))+j5)))), 6.28318530717959)));
                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
//                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j4eval[2];
//                                                                                IkReal x32=pz*pz;
//                                                                                IkReal x33=x20;
//                                                                                IkReal x41 = x33;
                                                                                if (false)//if(IKabs(x41)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x34=pow(x41,-0.5);
                                                                                if (false)//if((x33) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x35=IKabs(IKsqrt(x33));
//                                                                                IkReal x36=(pz*x34);
//                                                                                CheckValue<IkReal> x42=IKPowWithIntegerCheck<IKFAST_REAL>(x35,-1);
                                                                                if (false)//if(!x42.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x37=x42.value;
//                                                                                IkReal x38=((1.5)*x37);
                                                                                if (false)//if((((1.0)+(((-2.25)*(x37*x37))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x39=IKsqrt(((1.0)+(((-2.25)*(x37*x37)))));
//                                                                                CheckValue<IkReal> x43 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x43.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (x38) < -1-IKFAST_SINCOS_THRESH || (x38) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x40=((((-1.0)*(x43.value)))+(((-1.0)*(IKasin(x38)))));
//                                                                                px=0;
//                                                                                py=0;
//                                                                                pp=x32;
//                                                                                sj5=gconst1;
//                                                                                cj5=gconst2;
//                                                                                j5=x40;
//                                                                                IkReal gconst0=x40;
//                                                                                IkReal gconst1=((((4.16666666666667)*x36*x37))+(((-1.0)*x34*x39)));
//                                                                                IkReal gconst2=((((-2.77777777777778)*x36*x39))+(((-1.0)*x34*x38)));
//                                                                                IkReal x44=pz*pz;
//                                                                                j4eval[0]=((-1.0)+(((-7.71604938271605)*x44)));
//                                                                                j4eval[1]=IKsign(((-81.0)+(((-625.0)*x44))));
                                                                                if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                        bool j4valid[1]= {false};
//                                                                                        _nj4 = 1;
//                                                                                        IkReal x45=((225.0)*pz);
//                                                                                        IkReal x46=((54.0)*gconst1);
//                                                                                        IkReal x47=(x46+x45);
//                                                                                        CheckValue<IkReal> x48 = IKatan2WithCheck(IkReal(((((-108.0)*gconst2))+(((-36.0)*(gconst2*gconst2))))),IkReal((x47+(((36.0)*gconst1*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x48.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x49=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-1.0)*x47))+(((-150.0)*gconst2*pz)))),-1);
                                                                                        if (false)//if(!x49.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j4array[0]=((-1.5707963267949)+(x48.value)+(((1.5707963267949)*(x49.value))));
//                                                                                        sj4array[0]=IKsin(j4array[0]);
//                                                                                        cj4array[0]=IKcos(j4array[0]);
                                                                                        if (false)//if( j4array[0] > IKPI )
                                                                                        {
//                                                                                            j4array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j4array[0] < -IKPI )
                                                                                        {
//                                                                                            j4array[0]+=IK2PI;
                                                                                        }
//                                                                                        j4valid[0] = true;
//                                                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                        {
                                                                                            if (false)//if( !j4valid[ij4] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij4[0] = ij4;
//                                                                                            _ij4[1] = -1;
//                                                                                            for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                            {
                                                                                                if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j4valid[iij4]=false;
//                                                                                                    _ij4[1] = iij4;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j4 = j4array[ij4];
//                                                                                            cj4 = cj4array[ij4];
//                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x50=IKcos(j4);
//                                                                                                IkReal x51=IKsin(j4);
//                                                                                                IkReal x52=((0.24)*gconst1);
//                                                                                                IkReal x53=((0.24)*gconst2);
//                                                                                                IkReal x54=((0.36)*x51);
//                                                                                                IkReal x55=((0.36)*x50);
//                                                                                                IkReal x56=((0.24)*x51);
//                                                                                                IkReal x57=(pz*x51);
//                                                                                                evalcond[0]=((-0.36)+x57+(((-1.0)*x55))+(((-1.0)*x53)));
//                                                                                                evalcond[1]=((((-1.0)*x54))+(((-1.0)*x52))+(((-1.0)*pz*x50)));
//                                                                                                evalcond[2]=((-0.2016)+(((0.72)*x57))+(((-0.2592)*x50))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=((((-1.0)*x51*x53))+((x50*x52))+pz+(((-1.0)*x54)));
//                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x51*x52))+(((-1.0)*x55))+(((-1.0)*x50*x53)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                bool j3valid[1]= {false};
//                                                                                                _nj3 = 1;
//                                                                                                j3array[0]=0;
//                                                                                                sj3array[0]=IKsin(j3array[0]);
//                                                                                                cj3array[0]=IKcos(j3array[0]);
                                                                                                if (false)//if( j3array[0] > IKPI )
                                                                                                {
//                                                                                                    j3array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j3array[0] < -IKPI )
                                                                                                {
//                                                                                                    j3array[0]+=IK2PI;
                                                                                                }
//                                                                                                j3valid[0] = true;
//                                                                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                {
                                                                                                    if (false)//if( !j3valid[ij3] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij3[0] = ij3;
//                                                                                                    _ij3[1] = -1;
//                                                                                                    for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                    {
                                                                                                        if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j3valid[iij3]=false;
//                                                                                                            _ij3[1] = iij3;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j3 = j3array[ij3];
//                                                                                                    cj3 = cj3array[ij3];
//                                                                                                    sj3 = sj3array[ij3];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j3;
//                                                                                                        vinfos[0].indices[0] = _ij3[0];
//                                                                                                        vinfos[0].indices[1] = _ij3[1];
//                                                                                                        vinfos[0].maxsolutions = _nj3;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j4;
//                                                                                                        vinfos[1].indices[0] = _ij4[0];
//                                                                                                        vinfos[1].indices[1] = _ij4[1];
//                                                                                                        vinfos[1].maxsolutions = _nj4;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j5;
//                                                                                                        vinfos[2].indices[0] = _ij5[0];
//                                                                                                        vinfos[2].indices[1] = _ij5[1];
//                                                                                                        vinfos[2].maxsolutions = _nj5;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                        bool j4valid[1]= {false};
//                                                                                        _nj4 = 1;
//                                                                                        IkReal x58=((150.0)*pz);
//                                                                                        CheckValue<IkReal> x59=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                                                        if (false)//if(!x59.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x60 = IKatan2WithCheck(IkReal(((((54.0)*gconst1))+(((-1.0)*gconst2*x58))+(((-225.0)*pz)))),IkReal(((81.0)+(((54.0)*gconst2))+((gconst1*x58)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x60.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x59.value)))+(x60.value));
//                                                                                        sj4array[0]=IKsin(j4array[0]);
//                                                                                        cj4array[0]=IKcos(j4array[0]);
                                                                                        if (false)//if( j4array[0] > IKPI )
                                                                                        {
//                                                                                            j4array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j4array[0] < -IKPI )
                                                                                        {
//                                                                                            j4array[0]+=IK2PI;
                                                                                        }
//                                                                                        j4valid[0] = true;
//                                                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                        {
                                                                                            if (false)//if( !j4valid[ij4] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij4[0] = ij4;
//                                                                                            _ij4[1] = -1;
//                                                                                            for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                            {
                                                                                                if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j4valid[iij4]=false;
//                                                                                                    _ij4[1] = iij4;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j4 = j4array[ij4];
//                                                                                            cj4 = cj4array[ij4];
//                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x61=IKcos(j4);
//                                                                                                IkReal x62=IKsin(j4);
//                                                                                                IkReal x63=((0.24)*gconst1);
//                                                                                                IkReal x64=((0.24)*gconst2);
//                                                                                                IkReal x65=((0.36)*x62);
//                                                                                                IkReal x66=((0.36)*x61);
//                                                                                                IkReal x67=((0.24)*x62);
//                                                                                                IkReal x68=(pz*x62);
//                                                                                                evalcond[0]=((-0.36)+x68+(((-1.0)*x66))+(((-1.0)*x64)));
//                                                                                                evalcond[1]=((((-1.0)*pz*x61))+(((-1.0)*x63))+(((-1.0)*x65)));
//                                                                                                evalcond[2]=((-0.2016)+(((0.72)*x68))+(((-0.2592)*x61))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=(((x61*x63))+pz+(((-1.0)*x65))+(((-1.0)*x62*x64)));
//                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x61*x64))+(((-1.0)*x66))+(((-1.0)*x62*x63)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                bool j3valid[1]= {false};
//                                                                                                _nj3 = 1;
//                                                                                                j3array[0]=0;
//                                                                                                sj3array[0]=IKsin(j3array[0]);
//                                                                                                cj3array[0]=IKcos(j3array[0]);
                                                                                                if (false)//if( j3array[0] > IKPI )
                                                                                                {
//                                                                                                    j3array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j3array[0] < -IKPI )
                                                                                                {
//                                                                                                    j3array[0]+=IK2PI;
                                                                                                }
//                                                                                                j3valid[0] = true;
//                                                                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                {
                                                                                                    if (false)//if( !j3valid[ij3] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij3[0] = ij3;
//                                                                                                    _ij3[1] = -1;
//                                                                                                    for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                    {
                                                                                                        if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j3valid[iij3]=false;
//                                                                                                            _ij3[1] = iij3;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j3 = j3array[ij3];
//                                                                                                    cj3 = cj3array[ij3];
//                                                                                                    sj3 = sj3array[ij3];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j3;
//                                                                                                        vinfos[0].indices[0] = _ij3[0];
//                                                                                                        vinfos[0].indices[1] = _ij3[1];
//                                                                                                        vinfos[0].maxsolutions = _nj3;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j4;
//                                                                                                        vinfos[1].indices[0] = _ij4[0];
//                                                                                                        vinfos[1].indices[1] = _ij4[1];
//                                                                                                        vinfos[1].maxsolutions = _nj4;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j5;
//                                                                                                        vinfos[2].indices[0] = _ij5[0];
//                                                                                                        vinfos[2].indices[1] = _ij5[1];
//                                                                                                        vinfos[2].maxsolutions = _nj5;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if (false)//if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            IkReal x69=((1.0)+(((7.71604938271605)*(pz*pz))));
//                                                                            IkReal x76 = x69;
                                                                            if (false)//if(IKabs(x76)==0)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x70=pow(x76,-0.5);
                                                                            if (false)//if((x69) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x71=IKabs(IKsqrt(x69));
//                                                                            CheckValue<IkReal> x77=IKPowWithIntegerCheck<IKFAST_REAL>(x71,-1);
                                                                            if (false)//if(!x77.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x72=x77.value;
//                                                                            IkReal x73=((1.5)*x72);
                                                                            if (false)//if((((1.0)+(((-2.25)*(x72*x72))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x74=IKsqrt(((1.0)+(((-2.25)*(x72*x72)))));
//                                                                            IkReal x75=(x70*x74);
//                                                                            CheckValue<IkReal> x78 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x78.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (x73) < -1-IKFAST_SINCOS_THRESH || (x73) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(x78.value)))+(IKasin(x73)));
//                                                                            IkReal gconst4=((((1.0)*x75))+(((4.16666666666667)*pz*x70*x72)));
//                                                                            IkReal gconst5=((((-1.0)*x70*x73))+(((2.77777777777778)*pz*x75)));
                                                                            if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x79=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if (false)//if(!x79.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (((1.5)*(x79.value))) < -1-IKFAST_SINCOS_THRESH || (((1.5)*(x79.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x80 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x80.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((1.5)*(x79.value))))))+(x80.value)+j5)))), 6.28318530717959)));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j4eval[2];
//                                                                                    IkReal x81=pz*pz;
//                                                                                    CheckValue<IkReal> x91 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x91.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x82=((1.0)*(x91.value));
//                                                                                    IkReal x83=x69;
//                                                                                    IkReal x92 = x83;
                                                                                    if (false)//if(IKabs(x92)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x84=pow(x92,-0.5);
                                                                                    if (false)//if((x83) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x85=IKabs(IKsqrt(x83));
//                                                                                    CheckValue<IkReal> x93=IKPowWithIntegerCheck<IKFAST_REAL>(x85,-1);
                                                                                    if (false)//if(!x93.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x86=x93.value;
//                                                                                    IkReal x87=((1.5)*x86);
                                                                                    if (false)//if( (x87) < -1-IKFAST_SINCOS_THRESH || (x87) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x88=IKasin(x87);
                                                                                    if (false)//if((((1.0)+(((-2.25)*(x86*x86))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x89=IKsqrt(((1.0)+(((-2.25)*(x86*x86)))));
//                                                                                    IkReal x90=(x84*x89);
//                                                                                    px=0;
//                                                                                    py=0;
//                                                                                    pp=x81;
//                                                                                    sj5=gconst4;
//                                                                                    cj5=gconst5;
//                                                                                    j5=((3.14159265)+x88+(((-1.0)*x82)));
//                                                                                    IkReal gconst3=((3.14159265358979)+x88+(((-1.0)*x82)));
//                                                                                    IkReal gconst4=((((4.16666666666667)*pz*x84*x86))+(((1.0)*x90)));
//                                                                                    IkReal gconst5=((((-1.0)*x84*x87))+(((2.77777777777778)*pz*x90)));
//                                                                                    IkReal x94=pz*pz;
//                                                                                    j4eval[0]=((-1.0)+(((-7.71604938271605)*x94)));
//                                                                                    j4eval[1]=IKsign(((-81.0)+(((-625.0)*x94))));
                                                                                    if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                            bool j4valid[1]= {false};
//                                                                                            _nj4 = 1;
//                                                                                            IkReal x95=((225.0)*pz);
//                                                                                            IkReal x96=((54.0)*gconst4);
//                                                                                            IkReal x97=(x95+x96);
//                                                                                            CheckValue<IkReal> x98 = IKatan2WithCheck(IkReal(((((36.0)*(gconst4*gconst4)))+(((-625.0)*(pz*pz))))),IkReal((x97+(((36.0)*gconst4*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x98.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x99=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*gconst5*pz))+(((-1.0)*x97)))),-1);
                                                                                            if (false)//if(!x99.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j4array[0]=((-1.5707963267949)+(x98.value)+(((1.5707963267949)*(x99.value))));
//                                                                                            sj4array[0]=IKsin(j4array[0]);
//                                                                                            cj4array[0]=IKcos(j4array[0]);
                                                                                            if (false)//if( j4array[0] > IKPI )
                                                                                            {
//                                                                                                j4array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j4array[0] < -IKPI )
                                                                                            {
//                                                                                                j4array[0]+=IK2PI;
                                                                                            }
//                                                                                            j4valid[0] = true;
//                                                                                            for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                            {
                                                                                                if (false)//if( !j4valid[ij4] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij4[0] = ij4;
//                                                                                                _ij4[1] = -1;
//                                                                                                for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                {
                                                                                                    if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j4valid[iij4]=false;
//                                                                                                        _ij4[1] = iij4;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j4 = j4array[ij4];
//                                                                                                cj4 = cj4array[ij4];
//                                                                                                sj4 = sj4array[ij4];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x100=IKcos(j4);
//                                                                                                    IkReal x101=IKsin(j4);
//                                                                                                    IkReal x102=((0.24)*gconst5);
//                                                                                                    IkReal x103=((0.24)*gconst4);
//                                                                                                    IkReal x104=((0.36)*x101);
//                                                                                                    IkReal x105=((0.36)*x100);
//                                                                                                    IkReal x106=(pz*x101);
//                                                                                                    evalcond[0]=((-0.36)+(((-1.0)*x105))+(((-1.0)*x102))+x106);
//                                                                                                    evalcond[1]=((((-1.0)*x104))+(((-1.0)*x103))+(((-1.0)*pz*x100)));
//                                                                                                    evalcond[2]=((-0.2016)+(((0.72)*x106))+(((-0.2592)*x100))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=((((-1.0)*x101*x102))+(((-1.0)*x104))+pz+((x100*x103)));
//                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x101*x103))+(((-1.0)*x100*x102))+(((-1.0)*x105)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                    bool j3valid[1]= {false};
//                                                                                                    _nj3 = 1;
//                                                                                                    j3array[0]=0;
//                                                                                                    sj3array[0]=IKsin(j3array[0]);
//                                                                                                    cj3array[0]=IKcos(j3array[0]);
                                                                                                    if (false)//if( j3array[0] > IKPI )
                                                                                                    {
//                                                                                                        j3array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j3array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j3array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j3valid[0] = true;
//                                                                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                    {
                                                                                                        if (false)//if( !j3valid[ij3] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij3[0] = ij3;
//                                                                                                        _ij3[1] = -1;
//                                                                                                        for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                        {
                                                                                                            if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j3valid[iij3]=false;
//                                                                                                                _ij3[1] = iij3;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j3 = j3array[ij3];
//                                                                                                        cj3 = cj3array[ij3];
//                                                                                                        sj3 = sj3array[ij3];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j3;
//                                                                                                            vinfos[0].indices[0] = _ij3[0];
//                                                                                                            vinfos[0].indices[1] = _ij3[1];
//                                                                                                            vinfos[0].maxsolutions = _nj3;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j4;
//                                                                                                            vinfos[1].indices[0] = _ij4[0];
//                                                                                                            vinfos[1].indices[1] = _ij4[1];
//                                                                                                            vinfos[1].maxsolutions = _nj4;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j5;
//                                                                                                            vinfos[2].indices[0] = _ij5[0];
//                                                                                                            vinfos[2].indices[1] = _ij5[1];
//                                                                                                            vinfos[2].maxsolutions = _nj5;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                            bool j4valid[1]= {false};
//                                                                                            _nj4 = 1;
//                                                                                            IkReal x107=((150.0)*pz);
//                                                                                            CheckValue<IkReal> x108=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                                                            if (false)//if(!x108.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x109 = IKatan2WithCheck(IkReal(((((54.0)*gconst4))+(((-1.0)*gconst5*x107))+(((-225.0)*pz)))),IkReal(((81.0)+(((54.0)*gconst5))+((gconst4*x107)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x109.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x108.value)))+(x109.value));
//                                                                                            sj4array[0]=IKsin(j4array[0]);
//                                                                                            cj4array[0]=IKcos(j4array[0]);
                                                                                            if (false)//if( j4array[0] > IKPI )
                                                                                            {
//                                                                                                j4array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j4array[0] < -IKPI )
                                                                                            {
//                                                                                                j4array[0]+=IK2PI;
                                                                                            }
//                                                                                            j4valid[0] = true;
//                                                                                            for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                            {
                                                                                                if (false)//if( !j4valid[ij4] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij4[0] = ij4;
//                                                                                                _ij4[1] = -1;
//                                                                                                for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                {
                                                                                                    if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j4valid[iij4]=false;
//                                                                                                        _ij4[1] = iij4;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j4 = j4array[ij4];
//                                                                                                cj4 = cj4array[ij4];
//                                                                                                sj4 = sj4array[ij4];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x110=IKcos(j4);
//                                                                                                    IkReal x111=IKsin(j4);
//                                                                                                    IkReal x112=((0.24)*gconst5);
//                                                                                                    IkReal x113=((0.24)*gconst4);
//                                                                                                    IkReal x114=((0.36)*x111);
//                                                                                                    IkReal x115=((0.36)*x110);
//                                                                                                    IkReal x116=(pz*x111);
//                                                                                                    evalcond[0]=((-0.36)+(((-1.0)*x112))+(((-1.0)*x115))+x116);
//                                                                                                    evalcond[1]=((((-1.0)*x113))+(((-1.0)*x114))+(((-1.0)*pz*x110)));
//                                                                                                    evalcond[2]=((-0.2016)+(((0.72)*x116))+(((-0.2592)*x110))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=((((-1.0)*x111*x112))+((x110*x113))+(((-1.0)*x114))+pz);
//                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x111*x113))+(((-1.0)*x115))+(((-1.0)*x110*x112)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                    bool j3valid[1]= {false};
//                                                                                                    _nj3 = 1;
//                                                                                                    j3array[0]=0;
//                                                                                                    sj3array[0]=IKsin(j3array[0]);
//                                                                                                    cj3array[0]=IKcos(j3array[0]);
                                                                                                    if (false)//if( j3array[0] > IKPI )
                                                                                                    {
//                                                                                                        j3array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j3array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j3array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j3valid[0] = true;
//                                                                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                    {
                                                                                                        if (false)//if( !j3valid[ij3] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij3[0] = ij3;
//                                                                                                        _ij3[1] = -1;
//                                                                                                        for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                        {
                                                                                                            if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j3valid[iij3]=false;
//                                                                                                                _ij3[1] = iij3;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j3 = j3array[ij3];
//                                                                                                        cj3 = cj3array[ij3];
//                                                                                                        sj3 = sj3array[ij3];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j3;
//                                                                                                            vinfos[0].indices[0] = _ij3[0];
//                                                                                                            vinfos[0].indices[1] = _ij3[1];
//                                                                                                            vinfos[0].maxsolutions = _nj3;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j4;
//                                                                                                            vinfos[1].indices[0] = _ij4[0];
//                                                                                                            vinfos[1].indices[1] = _ij4[1];
//                                                                                                            vinfos[1].maxsolutions = _nj4;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j5;
//                                                                                                            vinfos[2].indices[0] = _ij5[0];
//                                                                                                            vinfos[2].indices[1] = _ij5[1];
//                                                                                                            vinfos[2].maxsolutions = _nj5;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
//                                                                                IkReal x117=pz*pz;
//                                                                                IkReal x118=((4.16666666666667)*pz);
//                                                                                IkReal x119=((1.0)+(((7.71604938271605)*x117)));
                                                                                if (false)//if((x119) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x120=IKabs(IKsqrt(x119));
//                                                                                IkReal x126 = x119;
                                                                                if (false)//if(IKabs(x126)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x121=pow(x126,-0.5);
//                                                                                CheckValue<IkReal> x127=IKPowWithIntegerCheck<IKFAST_REAL>(x120,-1);
                                                                                if (false)//if(!x127.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x122=x127.value;
                                                                                if (false)//if((((1.0)+(((-17.3611111111111)*x117*(x122*x122))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x123=IKsqrt(((1.0)+(((-17.3611111111111)*x117*(x122*x122)))));
//                                                                                IkReal x124=(x121*x122);
//                                                                                IkReal x125=(x121*x123);
                                                                                if (false)//if( ((x118*x122)) < -1-IKFAST_SINCOS_THRESH || ((x118*x122)) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x128 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x128.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal gconst6=((IKasin((x118*x122)))+(((-1.0)*(x128.value))));
//                                                                                IkReal gconst7=((((-1.0)*x118*x124))+(((2.77777777777778)*pz*x125)));
//                                                                                IkReal gconst8=((((-1.0)*x125))+(((-11.5740740740741)*x117*x124)));
//                                                                                CheckValue<IkReal> x129 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x129.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x130=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                if (false)//if(!x130.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (((4.16666666666667)*pz*(x130.value))) < -1-IKFAST_SINCOS_THRESH || (((4.16666666666667)*pz*(x130.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x129.value)+j5+(((-1.0)*(IKasin(((4.16666666666667)*pz*(x130.value)))))))))), 6.28318530717959)));
                                                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
//                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j4eval[2];
//                                                                                        IkReal x131=pz*pz;
//                                                                                        IkReal x132=((4.16666666666667)*pz);
//                                                                                        IkReal x133=x119;
                                                                                        if (false)//if((x133) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x134=IKabs(IKsqrt(x133));
//                                                                                        IkReal x141 = x133;
                                                                                        if (false)//if(IKabs(x141)==0)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x135=pow(x141,-0.5);
//                                                                                        CheckValue<IkReal> x142=IKPowWithIntegerCheck<IKFAST_REAL>(x134,-1);
                                                                                        if (false)//if(!x142.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x136=x142.value;
//                                                                                        CheckValue<IkReal> x143 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x143.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
                                                                                        if (false)//if( ((x132*x136)) < -1-IKFAST_SINCOS_THRESH || ((x132*x136)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x137=((((-1.0)*(x143.value)))+(IKasin((x132*x136))));
                                                                                        if (false)//if((((1.0)+(((-17.3611111111111)*x131*(x136*x136))))) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x138=IKsqrt(((1.0)+(((-17.3611111111111)*x131*(x136*x136)))));
//                                                                                        IkReal x139=(x135*x136);
//                                                                                        IkReal x140=(x135*x138);
//                                                                                        px=0;
//                                                                                        py=0;
//                                                                                        pp=x131;
//                                                                                        sj5=gconst7;
//                                                                                        cj5=gconst8;
//                                                                                        j5=x137;
//                                                                                        IkReal gconst6=x137;
//                                                                                        IkReal gconst7=((((2.77777777777778)*pz*x140))+(((-1.0)*x132*x139)));
//                                                                                        IkReal gconst8=((((-11.5740740740741)*x131*x139))+(((-1.0)*x140)));
//                                                                                        IkReal x144=pz*pz;
//                                                                                        j4eval[0]=((-1.0)+(((-7.71604938271605)*x144)));
//                                                                                        j4eval[1]=IKsign(((-81.0)+(((-625.0)*x144))));
                                                                                        if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                                bool j4valid[1]= {false};
//                                                                                                _nj4 = 1;
//                                                                                                IkReal x145=(gconst7*pz);
//                                                                                                CheckValue<IkReal> x146=IKPowWithIntegerCheck<IKFAST_REAL>(((1.08)+(((0.72)*gconst8))+(((-2.0)*x145))),-1);
                                                                                                if (false)//if(!x146.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x147=IKPowWithIntegerCheck<IKFAST_REAL>(((-27.0)+(((-18.0)*gconst8))+(((50.0)*x145))),-1);
                                                                                                if (false)//if(!x147.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                                if (false)//if( IKabs(((x146.value)*(((((-0.72)*gconst7))+(((3.0)*pz))+(((-0.48)*gconst7*gconst8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x147.value)*(((27.0)+(((-12.0)*(gconst7*gconst7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x146.value)*(((((-0.72)*gconst7))+(((3.0)*pz))+(((-0.48)*gconst7*gconst8))))))+IKsqr(((x147.value)*(((27.0)+(((-12.0)*(gconst7*gconst7)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j4array[0]=IKatan2(((x146.value)*(((((-0.72)*gconst7))+(((3.0)*pz))+(((-0.48)*gconst7*gconst8))))), ((x147.value)*(((27.0)+(((-12.0)*(gconst7*gconst7)))))));
//                                                                                                sj4array[0]=IKsin(j4array[0]);
//                                                                                                cj4array[0]=IKcos(j4array[0]);
                                                                                                if (false)//if( j4array[0] > IKPI )
                                                                                                {
//                                                                                                    j4array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j4array[0] < -IKPI )
                                                                                                {
//                                                                                                    j4array[0]+=IK2PI;
                                                                                                }
//                                                                                                j4valid[0] = true;
//                                                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                                {
                                                                                                    if (false)//if( !j4valid[ij4] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij4[0] = ij4;
//                                                                                                    _ij4[1] = -1;
//                                                                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                    {
                                                                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j4valid[iij4]=false;
//                                                                                                            _ij4[1] = iij4;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j4 = j4array[ij4];
//                                                                                                    cj4 = cj4array[ij4];
//                                                                                                    sj4 = sj4array[ij4];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x148=IKcos(j4);
//                                                                                                        IkReal x149=IKsin(j4);
//                                                                                                        IkReal x150=((0.24)*gconst8);
//                                                                                                        IkReal x151=((0.24)*gconst7);
//                                                                                                        IkReal x152=((0.36)*x149);
//                                                                                                        IkReal x153=((0.36)*x148);
//                                                                                                        IkReal x154=(pz*x149);
//                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x150))+(((-1.0)*x153))+x154);
//                                                                                                        evalcond[1]=((((-1.0)*x151))+(((-1.0)*x152))+(((-1.0)*pz*x148)));
//                                                                                                        evalcond[2]=((-0.2016)+(((-0.2592)*x148))+(((0.72)*x154))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((((-1.0)*x152))+pz+((x148*x151))+(((-1.0)*x149*x150)));
//                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x153))+(((-1.0)*x148*x150))+(((-1.0)*x149*x151)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                        bool j3valid[1]= {false};
//                                                                                                        _nj3 = 1;
//                                                                                                        j3array[0]=0;
//                                                                                                        sj3array[0]=IKsin(j3array[0]);
//                                                                                                        cj3array[0]=IKcos(j3array[0]);
                                                                                                        if (false)//if( j3array[0] > IKPI )
                                                                                                        {
//                                                                                                            j3array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j3array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j3array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j3valid[0] = true;
//                                                                                                        for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                        {
                                                                                                            if (false)//if( !j3valid[ij3] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij3[0] = ij3;
//                                                                                                            _ij3[1] = -1;
//                                                                                                            for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                            {
                                                                                                                if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j3valid[iij3]=false;
//                                                                                                                    _ij3[1] = iij3;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j3 = j3array[ij3];
//                                                                                                            cj3 = cj3array[ij3];
//                                                                                                            sj3 = sj3array[ij3];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j3;
//                                                                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                                                                vinfos[0].maxsolutions = _nj3;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j4;
//                                                                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                                                                vinfos[1].maxsolutions = _nj4;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j5;
//                                                                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                                                                vinfos[2].maxsolutions = _nj5;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                                bool j4valid[1]= {false};
//                                                                                                _nj4 = 1;
//                                                                                                IkReal x155=((150.0)*pz);
//                                                                                                CheckValue<IkReal> x156=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                                                                if (false)//if(!x156.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x157 = IKatan2WithCheck(IkReal(((((54.0)*gconst7))+(((-1.0)*gconst8*x155))+(((-225.0)*pz)))),IkReal(((81.0)+(((54.0)*gconst8))+((gconst7*x155)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x157.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x156.value)))+(x157.value));
//                                                                                                sj4array[0]=IKsin(j4array[0]);
//                                                                                                cj4array[0]=IKcos(j4array[0]);
                                                                                                if (false)//if( j4array[0] > IKPI )
                                                                                                {
//                                                                                                    j4array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j4array[0] < -IKPI )
                                                                                                {
//                                                                                                    j4array[0]+=IK2PI;
                                                                                                }
//                                                                                                j4valid[0] = true;
//                                                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                                {
                                                                                                    if (false)//if( !j4valid[ij4] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij4[0] = ij4;
//                                                                                                    _ij4[1] = -1;
//                                                                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                    {
                                                                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j4valid[iij4]=false;
//                                                                                                            _ij4[1] = iij4;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j4 = j4array[ij4];
//                                                                                                    cj4 = cj4array[ij4];
//                                                                                                    sj4 = sj4array[ij4];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x158=IKcos(j4);
//                                                                                                        IkReal x159=IKsin(j4);
//                                                                                                        IkReal x160=((0.24)*gconst8);
//                                                                                                        IkReal x161=((0.24)*gconst7);
//                                                                                                        IkReal x162=((0.36)*x159);
//                                                                                                        IkReal x163=((0.36)*x158);
//                                                                                                        IkReal x164=(pz*x159);
//                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x160))+(((-1.0)*x163))+x164);
//                                                                                                        evalcond[1]=((((-1.0)*x162))+(((-1.0)*x161))+(((-1.0)*pz*x158)));
//                                                                                                        evalcond[2]=((-0.2016)+(((-0.2592)*x158))+(((0.72)*x164))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((((-1.0)*x162))+(((-1.0)*x159*x160))+pz+((x158*x161)));
//                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x158*x160))+(((-1.0)*x163))+(((-1.0)*x159*x161)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                        bool j3valid[1]= {false};
//                                                                                                        _nj3 = 1;
//                                                                                                        j3array[0]=0;
//                                                                                                        sj3array[0]=IKsin(j3array[0]);
//                                                                                                        cj3array[0]=IKcos(j3array[0]);
                                                                                                        if (false)//if( j3array[0] > IKPI )
                                                                                                        {
//                                                                                                            j3array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j3array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j3array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j3valid[0] = true;
//                                                                                                        for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                        {
                                                                                                            if (false)//if( !j3valid[ij3] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij3[0] = ij3;
//                                                                                                            _ij3[1] = -1;
//                                                                                                            for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                            {
                                                                                                                if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j3valid[iij3]=false;
//                                                                                                                    _ij3[1] = iij3;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j3 = j3array[ij3];
//                                                                                                            cj3 = cj3array[ij3];
//                                                                                                            sj3 = sj3array[ij3];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j3;
//                                                                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                                                                vinfos[0].maxsolutions = _nj3;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j4;
//                                                                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                                                                vinfos[1].maxsolutions = _nj4;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j5;
//                                                                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                                                                vinfos[2].maxsolutions = _nj5;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if (false)//if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
//                                                                                    IkReal x165=pz*pz;
//                                                                                    IkReal x166=((4.16666666666667)*pz);
//                                                                                    IkReal x167=((1.0)+(((7.71604938271605)*x165)));
//                                                                                    IkReal x174 = x167;
                                                                                    if (false)//if(IKabs(x174)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x168=pow(x174,-0.5);
                                                                                    if (false)//if((x167) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x169=IKabs(IKsqrt(x167));
//                                                                                    CheckValue<IkReal> x175=IKPowWithIntegerCheck<IKFAST_REAL>(x169,-1);
                                                                                    if (false)//if(!x175.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x170=x175.value;
                                                                                    if (false)//if((((1.0)+(((-17.3611111111111)*x165*(x170*x170))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x171=IKsqrt(((1.0)+(((-17.3611111111111)*x165*(x170*x170)))));
//                                                                                    IkReal x172=(x168*x170);
//                                                                                    IkReal x173=(x168*x171);
                                                                                    if (false)//if( ((x166*x170)) < -1-IKFAST_SINCOS_THRESH || ((x166*x170)) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x176 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x176.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin((x166*x170)))))+(((-1.0)*(x176.value))));
//                                                                                    IkReal gconst10=((((-2.77777777777778)*pz*x173))+(((-1.0)*x166*x172)));
//                                                                                    IkReal gconst11=((((1.0)*x173))+(((-11.5740740740741)*x165*x172)));
                                                                                    if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x177=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                    if (false)//if(!x177.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (((4.16666666666667)*pz*(x177.value))) < -1-IKFAST_SINCOS_THRESH || (((4.16666666666667)*pz*(x177.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x178.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((4.16666666666667)*pz*(x177.value))))+(x178.value)+j5)))), 6.28318530717959)));
                                                                                    if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
//                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j4eval[2];
//                                                                                            IkReal x179=pz*pz;
//                                                                                            IkReal x180=((4.16666666666667)*pz);
//                                                                                            IkReal x181=x167;
//                                                                                            IkReal x189 = x181;
                                                                                            if (false)//if(IKabs(x189)==0)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x182=pow(x189,-0.5);
                                                                                            if (false)//if((x181) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x183=IKabs(IKsqrt(x181));
//                                                                                            CheckValue<IkReal> x190=IKPowWithIntegerCheck<IKFAST_REAL>(x183,-1);
                                                                                            if (false)//if(!x190.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x184=x190.value;
                                                                                            if (false)//if((((1.0)+(((-17.3611111111111)*x179*(x184*x184))))) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x185=IKsqrt(((1.0)+(((-17.3611111111111)*x179*(x184*x184)))));
//                                                                                            IkReal x186=(x182*x184);
                                                                                            if (false)//if( ((x180*x184)) < -1-IKFAST_SINCOS_THRESH || ((x180*x184)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x191 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x191.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x187=((((1.0)*(IKasin((x180*x184)))))+(((1.0)*(x191.value))));
//                                                                                            IkReal x188=(x182*x185);
//                                                                                            px=0;
//                                                                                            py=0;
//                                                                                            pp=x179;
//                                                                                            sj5=gconst10;
//                                                                                            cj5=gconst11;
//                                                                                            j5=((3.14159265)+(((-1.0)*x187)));
//                                                                                            IkReal gconst9=((3.14159265358979)+(((-1.0)*x187)));
//                                                                                            IkReal gconst10=((((-2.77777777777778)*pz*x188))+(((-1.0)*x180*x186)));
//                                                                                            IkReal gconst11=((((-11.5740740740741)*x179*x186))+(((1.0)*x188)));
//                                                                                            IkReal x192=pz*pz;
//                                                                                            j4eval[0]=((-1.0)+(((-7.71604938271605)*x192)));
//                                                                                            j4eval[1]=IKsign(((-81.0)+(((-625.0)*x192))));
                                                                                            if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                                    bool j4valid[1]= {false};
//                                                                                                    _nj4 = 1;
//                                                                                                    IkReal x193=((225.0)*pz);
//                                                                                                    IkReal x194=((54.0)*gconst10);
//                                                                                                    IkReal x195=(x193+x194);
//                                                                                                    CheckValue<IkReal> x196 = IKatan2WithCheck(IkReal(((((36.0)*(gconst10*gconst10)))+(((-625.0)*(pz*pz))))),IkReal(((((36.0)*gconst10*gconst11))+x195)),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x196.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x197=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*gconst11*pz))+(((-1.0)*x195)))),-1);
                                                                                                    if (false)//if(!x197.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j4array[0]=((-1.5707963267949)+(x196.value)+(((1.5707963267949)*(x197.value))));
//                                                                                                    sj4array[0]=IKsin(j4array[0]);
//                                                                                                    cj4array[0]=IKcos(j4array[0]);
                                                                                                    if (false)//if( j4array[0] > IKPI )
                                                                                                    {
//                                                                                                        j4array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j4array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j4array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j4valid[0] = true;
//                                                                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                                    {
                                                                                                        if (false)//if( !j4valid[ij4] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij4[0] = ij4;
//                                                                                                        _ij4[1] = -1;
//                                                                                                        for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                        {
                                                                                                            if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j4valid[iij4]=false;
//                                                                                                                _ij4[1] = iij4;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j4 = j4array[ij4];
//                                                                                                        cj4 = cj4array[ij4];
//                                                                                                        sj4 = sj4array[ij4];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x198=IKcos(j4);
//                                                                                                            IkReal x199=IKsin(j4);
//                                                                                                            IkReal x200=((0.24)*gconst10);
//                                                                                                            IkReal x201=((0.24)*gconst11);
//                                                                                                            IkReal x202=((0.36)*x199);
//                                                                                                            IkReal x203=((0.36)*x198);
//                                                                                                            IkReal x204=(pz*x199);
//                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x201))+(((-1.0)*x203))+x204);
//                                                                                                            evalcond[1]=((((-1.0)*x200))+(((-1.0)*x202))+(((-1.0)*pz*x198)));
//                                                                                                            evalcond[2]=((-0.2016)+(((0.72)*x204))+(((-1.0)*(pz*pz)))+(((-0.2592)*x198)));
//                                                                                                            evalcond[3]=(((x198*x200))+(((-1.0)*x202))+pz+(((-1.0)*x199*x201)));
//                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x203))+(((-1.0)*x198*x201))+(((-1.0)*x199*x200)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                            bool j3valid[1]= {false};
//                                                                                                            _nj3 = 1;
//                                                                                                            j3array[0]=0;
//                                                                                                            sj3array[0]=IKsin(j3array[0]);
//                                                                                                            cj3array[0]=IKcos(j3array[0]);
                                                                                                            if (false)//if( j3array[0] > IKPI )
                                                                                                            {
//                                                                                                                j3array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j3array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j3array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j3valid[0] = true;
//                                                                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                            {
                                                                                                                if (false)//if( !j3valid[ij3] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij3[0] = ij3;
//                                                                                                                _ij3[1] = -1;
//                                                                                                                for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                                {
                                                                                                                    if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j3valid[iij3]=false;
//                                                                                                                        _ij3[1] = iij3;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j3 = j3array[ij3];
//                                                                                                                cj3 = cj3array[ij3];
//                                                                                                                sj3 = sj3array[ij3];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j3;
//                                                                                                                    vinfos[0].indices[0] = _ij3[0];
//                                                                                                                    vinfos[0].indices[1] = _ij3[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj3;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j4;
//                                                                                                                    vinfos[1].indices[0] = _ij4[0];
//                                                                                                                    vinfos[1].indices[1] = _ij4[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj4;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j5;
//                                                                                                                    vinfos[2].indices[0] = _ij5[0];
//                                                                                                                    vinfos[2].indices[1] = _ij5[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj5;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                                    bool j4valid[1]= {false};
//                                                                                                    _nj4 = 1;
//                                                                                                    IkReal x205=((150.0)*pz);
//                                                                                                    CheckValue<IkReal> x206=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                                                                    if (false)//if(!x206.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x207 = IKatan2WithCheck(IkReal(((((54.0)*gconst10))+(((-225.0)*pz))+(((-1.0)*gconst11*x205)))),IkReal(((81.0)+(((54.0)*gconst11))+((gconst10*x205)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x207.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x206.value)))+(x207.value));
//                                                                                                    sj4array[0]=IKsin(j4array[0]);
//                                                                                                    cj4array[0]=IKcos(j4array[0]);
                                                                                                    if (false)//if( j4array[0] > IKPI )
                                                                                                    {
//                                                                                                        j4array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j4array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j4array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j4valid[0] = true;
//                                                                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                                    {
                                                                                                        if (false)//if( !j4valid[ij4] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij4[0] = ij4;
//                                                                                                        _ij4[1] = -1;
//                                                                                                        for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                        {
                                                                                                            if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j4valid[iij4]=false;
//                                                                                                                _ij4[1] = iij4;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j4 = j4array[ij4];
//                                                                                                        cj4 = cj4array[ij4];
//                                                                                                        sj4 = sj4array[ij4];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x208=IKcos(j4);
//                                                                                                            IkReal x209=IKsin(j4);
//                                                                                                            IkReal x210=((0.24)*gconst10);
//                                                                                                            IkReal x211=((0.24)*gconst11);
//                                                                                                            IkReal x212=((0.36)*x209);
//                                                                                                            IkReal x213=((0.36)*x208);
//                                                                                                            IkReal x214=(pz*x209);
//                                                                                                            evalcond[0]=((-0.36)+x214+(((-1.0)*x211))+(((-1.0)*x213)));
//                                                                                                            evalcond[1]=((((-1.0)*x212))+(((-1.0)*x210))+(((-1.0)*pz*x208)));
//                                                                                                            evalcond[2]=((-0.2016)+(((-0.2592)*x208))+(((0.72)*x214))+(((-1.0)*(pz*pz))));
//                                                                                                            evalcond[3]=(((x208*x210))+pz+(((-1.0)*x212))+(((-1.0)*x209*x211)));
//                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x213))+(((-1.0)*x208*x211))+(((-1.0)*x209*x210)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                            bool j3valid[1]= {false};
//                                                                                                            _nj3 = 1;
//                                                                                                            j3array[0]=0;
//                                                                                                            sj3array[0]=IKsin(j3array[0]);
//                                                                                                            cj3array[0]=IKcos(j3array[0]);
                                                                                                            if (false)//if( j3array[0] > IKPI )
                                                                                                            {
//                                                                                                                j3array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j3array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j3array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j3valid[0] = true;
//                                                                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                            {
                                                                                                                if (false)//if( !j3valid[ij3] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij3[0] = ij3;
//                                                                                                                _ij3[1] = -1;
//                                                                                                                for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                                {
                                                                                                                    if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j3valid[iij3]=false;
//                                                                                                                        _ij3[1] = iij3;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j3 = j3array[ij3];
//                                                                                                                cj3 = cj3array[ij3];
//                                                                                                                sj3 = sj3array[ij3];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j3;
//                                                                                                                    vinfos[0].indices[0] = _ij3[0];
//                                                                                                                    vinfos[0].indices[1] = _ij3[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj3;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j4;
//                                                                                                                    vinfos[1].indices[0] = _ij4[0];
//                                                                                                                    vinfos[1].indices[1] = _ij4[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj4;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j5;
//                                                                                                                    vinfos[2].indices[0] = _ij5[0];
//                                                                                                                    vinfos[2].indices[1] = _ij5[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj5;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if (false)//if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
//                                                                                            bgotonextstatement=false;
//                                                                                            continue; // branch miss [j3, j4]

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if( bgotonextstatement )
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                                    bool j4valid[1]= {false};
//                                                                    _nj4 = 1;
//                                                                    IkReal x215=(pz*sj5);
//                                                                    CheckValue<IkReal> x216=IKPowWithIntegerCheck<IKFAST_REAL>(((1.08)+(((-2.0)*x215))+(((0.72)*cj5))),-1);
                                                                    if (false)//if(!x216.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x217=IKPowWithIntegerCheck<IKFAST_REAL>(((-27.0)+(((-18.0)*cj5))+(((50.0)*x215))),-1);
                                                                    if (false)//if(!x217.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((x216.value)*(((((-0.48)*cj5*sj5))+(((-0.72)*sj5))+(((3.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x217.value)*(((15.0)+(((12.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x216.value)*(((((-0.48)*cj5*sj5))+(((-0.72)*sj5))+(((3.0)*pz))))))+IKsqr(((x217.value)*(((15.0)+(((12.0)*(cj5*cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j4array[0]=IKatan2(((x216.value)*(((((-0.48)*cj5*sj5))+(((-0.72)*sj5))+(((3.0)*pz))))), ((x217.value)*(((15.0)+(((12.0)*(cj5*cj5)))))));
//                                                                    sj4array[0]=IKsin(j4array[0]);
//                                                                    cj4array[0]=IKcos(j4array[0]);
                                                                    if (false)//if( j4array[0] > IKPI )
                                                                    {
//                                                                        j4array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j4array[0] < -IKPI )
                                                                    {
//                                                                        j4array[0]+=IK2PI;
                                                                    }
//                                                                    j4valid[0] = true;
//                                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                    {
                                                                        if (false)//if( !j4valid[ij4] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij4[0] = ij4;
//                                                                        _ij4[1] = -1;
//                                                                        for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                        {
                                                                            if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j4valid[iij4]=false;
//                                                                                _ij4[1] = iij4;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j4 = j4array[ij4];
//                                                                        cj4 = cj4array[ij4];
//                                                                        sj4 = sj4array[ij4];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x218=IKcos(j4);
//                                                                            IkReal x219=IKsin(j4);
//                                                                            IkReal x220=((0.24)*sj5);
//                                                                            IkReal x221=((0.24)*cj5);
//                                                                            IkReal x222=((0.36)*x219);
//                                                                            IkReal x223=((0.36)*x218);
//                                                                            IkReal x224=(pz*x219);
//                                                                            evalcond[0]=((-0.36)+x224+(((-1.0)*x223))+(((-1.0)*x221)));
//                                                                            evalcond[1]=((((-1.0)*pz*x218))+(((-1.0)*x220))+(((-1.0)*x222)));
//                                                                            evalcond[2]=((-0.2016)+(((-0.2592)*x218))+(((0.72)*x224))+(((-1.0)*(pz*pz))));
//                                                                            evalcond[3]=((((-1.0)*x219*x221))+pz+((x218*x220))+(((-1.0)*x222)));
//                                                                            evalcond[4]=((-0.36)+(((-1.0)*x219*x220))+(((-1.0)*x218*x221))+(((-1.0)*x223)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                            bool j3valid[1]= {false};
//                                                                            _nj3 = 1;
//                                                                            j3array[0]=0;
//                                                                            sj3array[0]=IKsin(j3array[0]);
//                                                                            cj3array[0]=IKcos(j3array[0]);
                                                                            if (false)//if( j3array[0] > IKPI )
                                                                            {
//                                                                                j3array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j3array[0] < -IKPI )
                                                                            {
//                                                                                j3array[0]+=IK2PI;
                                                                            }
//                                                                            j3valid[0] = true;
//                                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                            {
                                                                                if (false)//if( !j3valid[ij3] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij3[0] = ij3;
//                                                                                _ij3[1] = -1;
//                                                                                for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                {
                                                                                    if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j3valid[iij3]=false;
//                                                                                        _ij3[1] = iij3;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j3 = j3array[ij3];
//                                                                                cj3 = cj3array[ij3];
//                                                                                sj3 = sj3array[ij3];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j3;
//                                                                                    vinfos[0].indices[0] = _ij3[0];
//                                                                                    vinfos[0].indices[1] = _ij3[1];
//                                                                                    vinfos[0].maxsolutions = _nj3;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j4;
//                                                                                    vinfos[1].indices[0] = _ij4[0];
//                                                                                    vinfos[1].indices[1] = _ij4[1];
//                                                                                    vinfos[1].maxsolutions = _nj4;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j5;
//                                                                                    vinfos[2].indices[0] = _ij5[0];
//                                                                                    vinfos[2].indices[1] = _ij5[1];
//                                                                                    vinfos[2].maxsolutions = _nj5;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                            bool j4valid[1]= {false};
//                                                            _nj4 = 1;
//                                                            IkReal x225=((225.0)*pz);
//                                                            IkReal x226=((54.0)*sj5);
//                                                            IkReal x227=(x225+x226);
//                                                            CheckValue<IkReal> x228=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*cj5*pz))+(((-1.0)*x227)))),-1);
                                                            if (false)//if(!x228.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            CheckValue<IkReal> x229 = IKatan2WithCheck(IkReal(((36.0)+(((-36.0)*(cj5*cj5)))+(((-625.0)*(pz*pz))))),IkReal((x227+(((36.0)*cj5*sj5)))),IKFAST_ATAN2_MAGTHRESH);
                                                            if (false)//if(!x229.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x228.value)))+(x229.value));
//                                                            sj4array[0]=IKsin(j4array[0]);
//                                                            cj4array[0]=IKcos(j4array[0]);
                                                            if (false)//if( j4array[0] > IKPI )
                                                            {
//                                                                j4array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j4array[0] < -IKPI )
                                                            {
//                                                                j4array[0]+=IK2PI;
                                                            }
//                                                            j4valid[0] = true;
//                                                            for(int ij4 = 0; ij4 < 1; ++ij4)
                                                            {
                                                                if (false)//if( !j4valid[ij4] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij4[0] = ij4;
//                                                                _ij4[1] = -1;
//                                                                for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                {
                                                                    if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j4valid[iij4]=false;
//                                                                        _ij4[1] = iij4;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j4 = j4array[ij4];
//                                                                cj4 = cj4array[ij4];
//                                                                sj4 = sj4array[ij4];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x230=IKcos(j4);
//                                                                    IkReal x231=IKsin(j4);
//                                                                    IkReal x232=((0.24)*sj5);
//                                                                    IkReal x233=((0.24)*cj5);
//                                                                    IkReal x234=((0.36)*x231);
//                                                                    IkReal x235=((0.36)*x230);
//                                                                    IkReal x236=(pz*x231);
//                                                                    evalcond[0]=((-0.36)+(((-1.0)*x233))+(((-1.0)*x235))+x236);
//                                                                    evalcond[1]=((((-1.0)*x232))+(((-1.0)*x234))+(((-1.0)*pz*x230)));
//                                                                    evalcond[2]=((-0.2016)+(((0.72)*x236))+(((-0.2592)*x230))+(((-1.0)*(pz*pz))));
//                                                                    evalcond[3]=(((x230*x232))+(((-1.0)*x234))+pz+(((-1.0)*x231*x233)));
//                                                                    evalcond[4]=((-0.36)+(((-1.0)*x230*x233))+(((-1.0)*x235))+(((-1.0)*x231*x232)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                    bool j3valid[1]= {false};
//                                                                    _nj3 = 1;
//                                                                    j3array[0]=0;
//                                                                    sj3array[0]=IKsin(j3array[0]);
//                                                                    cj3array[0]=IKcos(j3array[0]);
                                                                    if (false)//if( j3array[0] > IKPI )
                                                                    {
//                                                                        j3array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j3array[0] < -IKPI )
                                                                    {
//                                                                        j3array[0]+=IK2PI;
                                                                    }
//                                                                    j3valid[0] = true;
//                                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                    {
                                                                        if (false)//if( !j3valid[ij3] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij3[0] = ij3;
//                                                                        _ij3[1] = -1;
//                                                                        for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                        {
                                                                            if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j3valid[iij3]=false;
//                                                                                _ij3[1] = iij3;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j3 = j3array[ij3];
//                                                                        cj3 = cj3array[ij3];
//                                                                        sj3 = sj3array[ij3];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j3;
//                                                                            vinfos[0].indices[0] = _ij3[0];
//                                                                            vinfos[0].indices[1] = _ij3[1];
//                                                                            vinfos[0].maxsolutions = _nj3;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j4;
//                                                                            vinfos[1].indices[0] = _ij4[0];
//                                                                            vinfos[1].indices[1] = _ij4[1];
//                                                                            vinfos[1].maxsolutions = _nj4;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j5;
//                                                                            vinfos[2].indices[0] = _ij5[0];
//                                                                            vinfos[2].indices[1] = _ij5[1];
//                                                                            vinfos[2].maxsolutions = _nj5;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                    bool j4valid[1]= {false};
//                                                    _nj4 = 1;
//                                                    IkReal x237=((150.0)*pz);
//                                                    CheckValue<IkReal> x238=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                    if (false)//if(!x238.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    CheckValue<IkReal> x239 = IKatan2WithCheck(IkReal(((((54.0)*sj5))+(((-1.0)*cj5*x237))+(((-225.0)*pz)))),IkReal(((81.0)+(((54.0)*cj5))+((sj5*x237)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if (false)//if(!x239.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x238.value)))+(x239.value));
//                                                    sj4array[0]=IKsin(j4array[0]);
//                                                    cj4array[0]=IKcos(j4array[0]);
                                                    if (false)//if( j4array[0] > IKPI )
                                                    {
//                                                        j4array[0]-=IK2PI;
                                                    }
                                                    else if (false)//else if( j4array[0] < -IKPI )
                                                    {
//                                                        j4array[0]+=IK2PI;
                                                    }
//                                                    j4valid[0] = true;
//                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                    {
                                                        if (false)//if( !j4valid[ij4] )
                                                        {
//                                                            continue;
                                                        }
//                                                        _ij4[0] = ij4;
//                                                        _ij4[1] = -1;
//                                                        for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                        {
                                                            if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                            {
//                                                                j4valid[iij4]=false;
//                                                                _ij4[1] = iij4;
//                                                                break;
                                                            }
                                                        }
//                                                        j4 = j4array[ij4];
//                                                        cj4 = cj4array[ij4];
//                                                        sj4 = sj4array[ij4];
                                                        {
                                                            IkReal evalcond[5];
//                                                            IkReal x240=IKcos(j4);
//                                                            IkReal x241=IKsin(j4);
//                                                            IkReal x242=((0.24)*sj5);
//                                                            IkReal x243=((0.24)*cj5);
//                                                            IkReal x244=((0.36)*x241);
//                                                            IkReal x245=((0.36)*x240);
//                                                            IkReal x246=(pz*x241);
//                                                            evalcond[0]=((-0.36)+x246+(((-1.0)*x243))+(((-1.0)*x245)));
//                                                            evalcond[1]=((((-1.0)*pz*x240))+(((-1.0)*x242))+(((-1.0)*x244)));
//                                                            evalcond[2]=((-0.2016)+(((-1.0)*(pz*pz)))+(((-0.2592)*x240))+(((0.72)*x246)));
//                                                            evalcond[3]=(((x240*x242))+(((-1.0)*x241*x243))+pz+(((-1.0)*x244)));
//                                                            evalcond[4]=((-0.36)+(((-1.0)*x241*x242))+(((-1.0)*x240*x243))+(((-1.0)*x245)));
                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
//                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                            bool j3valid[1]= {false};
//                                                            _nj3 = 1;
//                                                            j3array[0]=0;
//                                                            sj3array[0]=IKsin(j3array[0]);
//                                                            cj3array[0]=IKcos(j3array[0]);
                                                            if (false)//if( j3array[0] > IKPI )
                                                            {
//                                                                j3array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j3array[0] < -IKPI )
                                                            {
//                                                                j3array[0]+=IK2PI;
                                                            }
//                                                            j3valid[0] = true;
//                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                            {
                                                                if (false)//if( !j3valid[ij3] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij3[0] = ij3;
//                                                                _ij3[1] = -1;
//                                                                for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                {
                                                                    if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j3valid[iij3]=false;
//                                                                        _ij3[1] = iij3;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j3 = j3array[ij3];
//                                                                cj3 = cj3array[ij3];
//                                                                sj3 = sj3array[ij3];

                                                                {
//                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                    vinfos[0].jointtype = 1;
//                                                                    vinfos[0].foffset = j3;
//                                                                    vinfos[0].indices[0] = _ij3[0];
//                                                                    vinfos[0].indices[1] = _ij3[1];
//                                                                    vinfos[0].maxsolutions = _nj3;
//                                                                    vinfos[1].jointtype = 1;
//                                                                    vinfos[1].foffset = j4;
//                                                                    vinfos[1].indices[0] = _ij4[0];
//                                                                    vinfos[1].indices[1] = _ij4[1];
//                                                                    vinfos[1].maxsolutions = _nj4;
//                                                                    vinfos[2].jointtype = 1;
//                                                                    vinfos[2].foffset = j5;
//                                                                    vinfos[2].indices[0] = _ij5[0];
//                                                                    vinfos[2].indices[1] = _ij5[1];
//                                                                    vinfos[2].maxsolutions = _nj5;
//                                                                    int vfree[0];
//                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if (false)//if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
//                                    bgotonextstatement=false;
//                                    continue; // branch miss [j3, j4, j5]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j3array[2], cj3array[2], sj3array[2];
                        bool j3valid[2]= {false};
                        _nj3 = 2;
                        CheckValue<IkReal> x248 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x248.valid)
                        {
//                            continue;
                        }
                        IkReal x247=x248.value;
                        j3array[0]=((-1.0)*x247);
                        sj3array[0]=IKsin(j3array[0]);
                        cj3array[0]=IKcos(j3array[0]);
                        j3array[1]=((3.14159265358979)+(((-1.0)*x247)));
                        sj3array[1]=IKsin(j3array[1]);
                        cj3array[1]=IKcos(j3array[1]);
                        if( j3array[0] > IKPI )
                        {
//                            j3array[0]-=IK2PI;
                        }
                        else if( j3array[0] < -IKPI )
                        {
//                            j3array[0]+=IK2PI;
                        }
                        j3valid[0] = true;
                        if( j3array[1] > IKPI )
                        {
                            j3array[1]-=IK2PI;
                        }
                        else if( j3array[1] < -IKPI )
                        {
//                            j3array[1]+=IK2PI;
                        }
                        j3valid[1] = true;
                        for(int ij3 = 0; ij3 < 2; ++ij3)
                        {
                            if( !j3valid[ij3] )
                            {
//                                continue;
                            }
                            _ij3[0] = ij3;
                            _ij3[1] = -1;
                            for(int iij3 = ij3+1; iij3 < 2; ++iij3)
                            {
                                if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                {
//                                    j3valid[iij3]=false;
//                                    _ij3[1] = iij3;
//                                    break;
                                }
                            }
                            j3 = j3array[ij3];
                            cj3 = cj3array[ij3];
                            sj3 = sj3array[ij3];

                            {
                                IkReal j5array[2], cj5array[2], sj5array[2];
                                bool j5valid[2]= {false};
                                _nj5 = 2;
                                cj5array[0]=((-0.333333333333333)+(((4.16666666666667)*py*sj3))+(((5.78703703703704)*(py*py)))+(((4.16666666666667)*cj3*px))+(((5.78703703703704)*(pz*pz)))+(((5.78703703703704)*(px*px))));
                                if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j5valid[0] = j5valid[1] = true;
                                    j5array[0] = IKacos(cj5array[0]);
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[1] = cj5array[0];
                                    j5array[1] = -j5array[0];
                                    sj5array[1] = -sj5array[0];
                                }
                                else if( isnan(cj5array[0]) )
                                {
                                    // probably any value will work
//                                    j5valid[0] = true;
//                                    cj5array[0] = 1;
//                                    sj5array[0] = 0;
//                                    j5array[0] = 0;
                                }
                                for(int ij5 = 0; ij5 < 2; ++ij5)
                                {
                                    if( !j5valid[ij5] )
                                    {
                                        continue;
                                    }
                                    _ij5[0] = ij5;
                                    _ij5[1] = -1;
                                    for(int iij5 = ij5+1; iij5 < 2; ++iij5)
                                    {
                                        if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j5valid[iij5]=false;
//                                            _ij5[1] = iij5;
//                                            break;
                                        }
                                    }
                                    j5 = j5array[ij5];
                                    cj5 = cj5array[ij5];
                                    sj5 = sj5array[ij5];

                                    {
                                        IkReal j4eval[3];
                                        IkReal x249=((150.0)*cj5);
                                        IkReal x250=(py*sj3);
                                        IkReal x251=(cj3*px);
                                        IkReal x252=((150.0)*sj5);
                                        j4eval[0]=((1.08333333333333)+cj5);
                                        j4eval[1]=IKsign(((117.0)+(((108.0)*cj5))));
                                        j4eval[2]=((IKabs(((-81.0)+(((-54.0)*cj5))+(((-225.0)*x250))+(((-225.0)*x251))+(((-1.0)*pz*x252))+(((-1.0)*x249*x250))+(((-1.0)*x249*x251)))))+(IKabs(((((225.0)*pz))+(((-1.0)*x250*x252))+(((-1.0)*x251*x252))+(((-54.0)*sj5))+((pz*x249))))));
                                        if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j4eval[3];
//                                                IkReal x253=(py*sj3);
//                                                IkReal x254=(cj3*px);
//                                                IkReal x255=(pz*sj5);
//                                                IkReal x256=((25.0)*pz);
//                                                IkReal x257=(cj5*x254);
//                                                j4eval[0]=((1.5)+cj5+(((2.77777777777778)*cj5*x253))+(((2.77777777777778)*x257))+(((4.16666666666667)*x253))+(((4.16666666666667)*x254))+(((-2.77777777777778)*x255)));
//                                                j4eval[1]=IKsign(((3.24)+(((2.16)*cj5))+(((6.0)*x257))+(((9.0)*x254))+(((9.0)*x253))+(((-6.0)*x255))+(((6.0)*cj5*x253))));
//                                                j4eval[2]=((IKabs(((-3.24)+((pz*x256))+(((-1.44)*(cj5*cj5)))+(((-4.32)*cj5)))))+(IKabs(((((-2.16)*sj5))+(((-1.44)*cj5*sj5))+(((9.0)*pz))+((x253*x256))+((x254*x256))))));
                                                if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j4eval[3];
//                                                        IkReal x258=cj3*cj3;
//                                                        IkReal x259=py*py;
//                                                        IkReal x260=pz*pz;
//                                                        IkReal x261=px*px;
//                                                        IkReal x262=(py*sj3);
//                                                        IkReal x263=(cj3*px);
//                                                        IkReal x264=((6.0)*sj5);
//                                                        IkReal x265=((6.0)*cj5);
//                                                        IkReal x266=((25.0)*x259);
//                                                        IkReal x267=((7.71604938271605)*x259);
//                                                        IkReal x268=(x258*x261);
//                                                        j4eval[0]=((1.0)+(((7.71604938271605)*x268))+(((7.71604938271605)*x260))+(((-1.0)*x258*x267))+(((15.4320987654321)*x262*x263))+(((5.55555555555556)*x263))+(((5.55555555555556)*x262))+x267);
//                                                        j4eval[1]=IKsign(((3.24)+(((18.0)*x263))+(((18.0)*x262))+(((-1.0)*x258*x266))+(((50.0)*x262*x263))+x266+(((25.0)*x268))+(((25.0)*x260))));
//                                                        j4eval[2]=((IKabs(((((-1.0)*x262*x264))+(((-1.0)*x263*x264))+(((-2.16)*sj5))+(((9.0)*pz))+((pz*x265)))))+(IKabs(((-3.24)+(((-1.0)*x262*x265))+(((-1.0)*x263*x265))+(((-9.0)*x262))+(((-9.0)*x263))+(((-2.16)*cj5))+(((-1.0)*pz*x264))))));
                                                        if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j4]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                bool j4valid[1]= {false};
//                                                                _nj4 = 1;
//                                                                IkReal x269=cj3*cj3;
//                                                                IkReal x270=py*py;
//                                                                IkReal x271=(py*sj3);
//                                                                IkReal x272=(cj3*px);
//                                                                IkReal x273=((6.0)*cj5);
//                                                                IkReal x274=((6.0)*sj5);
//                                                                IkReal x275=((25.0)*x270);
//                                                                IkReal x276=((6.0)*x272);
//                                                                CheckValue<IkReal> x277=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((3.24)+(((25.0)*x269*(px*px)))+(((25.0)*(pz*pz)))+(((18.0)*x272))+(((18.0)*x271))+(((50.0)*x271*x272))+(((-1.0)*x269*x275))+x275)),-1);
                                                                if (false)//if(!x277.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x278 = IKatan2WithCheck(IkReal(((((-1.0)*x272*x274))+(((-1.0)*x271*x274))+(((-2.16)*sj5))+(((9.0)*pz))+((pz*x273)))),IkReal(((-3.24)+(((-1.0)*x272*x273))+(((-1.0)*pz*x274))+(((-1.0)*x271*x273))+(((-9.0)*x271))+(((-9.0)*x272))+(((-2.16)*cj5)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x278.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x277.value)))+(x278.value));
//                                                                sj4array[0]=IKsin(j4array[0]);
//                                                                cj4array[0]=IKcos(j4array[0]);
                                                                if (false)//if( j4array[0] > IKPI )
                                                                {
//                                                                    j4array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j4array[0] < -IKPI )
                                                                {
//                                                                    j4array[0]+=IK2PI;
                                                                }
//                                                                j4valid[0] = true;
//                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                {
                                                                    if (false)//if( !j4valid[ij4] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij4[0] = ij4;
//                                                                    _ij4[1] = -1;
//                                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                    {
                                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j4valid[iij4]=false;
//                                                                            _ij4[1] = iij4;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j4 = j4array[ij4];
//                                                                    cj4 = cj4array[ij4];
//                                                                    sj4 = sj4array[ij4];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x279=IKsin(j4);
//                                                                        IkReal x280=IKcos(j4);
//                                                                        IkReal x281=(cj3*px);
//                                                                        IkReal x282=((0.24)*cj5);
//                                                                        IkReal x283=(py*sj3);
//                                                                        IkReal x284=((0.24)*sj5);
//                                                                        IkReal x285=((0.36)*x280);
//                                                                        IkReal x286=((0.36)*x279);
//                                                                        IkReal x287=((1.0)*x279);
//                                                                        IkReal x288=((0.72)*x280);
//                                                                        IkReal x289=(pz*x279);
//                                                                        IkReal x290=((1.0)*x280);
//                                                                        evalcond[0]=(pz+(((-1.0)*x286))+((x280*x284))+(((-1.0)*x279*x282)));
//                                                                        evalcond[1]=((-0.36)+(((-1.0)*x280*x282))+(((-1.0)*x281))+(((-1.0)*x283))+(((-1.0)*x285))+(((-1.0)*x279*x284)));
//                                                                        evalcond[2]=((-0.36)+x289+(((-1.0)*x283*x290))+(((-1.0)*x282))+(((-1.0)*x285))+(((-1.0)*x281*x290)));
//                                                                        evalcond[3]=((((-1.0)*pz*x290))+(((-1.0)*x281*x287))+(((-1.0)*x284))+(((-1.0)*x286))+(((-1.0)*x283*x287)));
//                                                                        evalcond[4]=((-0.2016)+(((-0.2592)*x280))+(((-1.0)*(px*px)))+(((-0.72)*x281))+(((-0.72)*x283))+(((-1.0)*x281*x288))+(((0.72)*x289))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*x283*x288)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j3;
//                                                                        vinfos[0].indices[0] = _ij3[0];
//                                                                        vinfos[0].indices[1] = _ij3[1];
//                                                                        vinfos[0].maxsolutions = _nj3;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j4;
//                                                                        vinfos[1].indices[0] = _ij4[0];
//                                                                        vinfos[1].indices[1] = _ij4[1];
//                                                                        vinfos[1].maxsolutions = _nj4;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j5;
//                                                                        vinfos[2].indices[0] = _ij5[0];
//                                                                        vinfos[2].indices[1] = _ij5[1];
//                                                                        vinfos[2].maxsolutions = _nj5;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                        bool j4valid[1]= {false};
//                                                        _nj4 = 1;
//                                                        IkReal x291=((6.0)*cj5);
//                                                        IkReal x292=(cj3*px);
//                                                        IkReal x293=(py*sj3);
//                                                        IkReal x294=((25.0)*pz);
//                                                        CheckValue<IkReal> x295 = IKatan2WithCheck(IkReal(((((-2.16)*sj5))+(((-1.44)*cj5*sj5))+(((9.0)*pz))+((x293*x294))+((x292*x294)))),IkReal(((-3.24)+((pz*x294))+(((-1.44)*(cj5*cj5)))+(((-4.32)*cj5)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x295.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x296=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((3.24)+((x291*x292))+((x291*x293))+(((9.0)*x292))+(((9.0)*x293))+(((2.16)*cj5))+(((-6.0)*pz*sj5)))),-1);
                                                        if (false)//if(!x296.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j4array[0]=((-1.5707963267949)+(x295.value)+(((1.5707963267949)*(x296.value))));
//                                                        sj4array[0]=IKsin(j4array[0]);
//                                                        cj4array[0]=IKcos(j4array[0]);
                                                        if (false)//if( j4array[0] > IKPI )
                                                        {
//                                                            j4array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j4array[0] < -IKPI )
                                                        {
//                                                            j4array[0]+=IK2PI;
                                                        }
//                                                        j4valid[0] = true;
//                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                        {
                                                            if (false)//if( !j4valid[ij4] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij4[0] = ij4;
//                                                            _ij4[1] = -1;
//                                                            for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                            {
                                                                if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j4valid[iij4]=false;
//                                                                    _ij4[1] = iij4;
//                                                                    break;
                                                                }
                                                            }
//                                                            j4 = j4array[ij4];
//                                                            cj4 = cj4array[ij4];
//                                                            sj4 = sj4array[ij4];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x297=IKsin(j4);
//                                                                IkReal x298=IKcos(j4);
//                                                                IkReal x299=(cj3*px);
//                                                                IkReal x300=((0.24)*cj5);
//                                                                IkReal x301=(py*sj3);
//                                                                IkReal x302=((0.24)*sj5);
//                                                                IkReal x303=((0.36)*x298);
//                                                                IkReal x304=((0.36)*x297);
//                                                                IkReal x305=((1.0)*x297);
//                                                                IkReal x306=((0.72)*x298);
//                                                                IkReal x307=(pz*x297);
//                                                                IkReal x308=((1.0)*x298);
//                                                                evalcond[0]=((((-1.0)*x297*x300))+((x298*x302))+pz+(((-1.0)*x304)));
//                                                                evalcond[1]=((-0.36)+(((-1.0)*x299))+(((-1.0)*x298*x300))+(((-1.0)*x297*x302))+(((-1.0)*x301))+(((-1.0)*x303)));
//                                                                evalcond[2]=((-0.36)+(((-1.0)*x301*x308))+x307+(((-1.0)*x299*x308))+(((-1.0)*x300))+(((-1.0)*x303)));
//                                                                evalcond[3]=((((-1.0)*x301*x305))+(((-1.0)*x299*x305))+(((-1.0)*pz*x308))+(((-1.0)*x302))+(((-1.0)*x304)));
//                                                                evalcond[4]=((-0.2016)+(((-1.0)*x301*x306))+(((0.72)*x307))+(((-1.0)*(px*px)))+(((-0.2592)*x298))+(((-1.0)*(pz*pz)))+(((-1.0)*x299*x306))+(((-0.72)*x299))+(((-1.0)*(py*py)))+(((-0.72)*x301)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j3;
//                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                vinfos[0].maxsolutions = _nj3;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j4;
//                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                vinfos[1].maxsolutions = _nj4;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j5;
//                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                vinfos[2].maxsolutions = _nj5;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                bool j4valid[1]= {false};
                                                _nj4 = 1;
                                                IkReal x309=((150.0)*cj5);
                                                IkReal x310=(py*sj3);
                                                IkReal x311=(cj3*px);
                                                IkReal x312=((150.0)*sj5);
                                                CheckValue<IkReal> x313=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((117.0)+(((108.0)*cj5)))),-1);
                                                if(!x313.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x314 = IKatan2WithCheck(IkReal(((((225.0)*pz))+(((-1.0)*x310*x312))+(((-54.0)*sj5))+(((-1.0)*x311*x312))+((pz*x309)))),IkReal(((-81.0)+(((-225.0)*x311))+(((-225.0)*x310))+(((-54.0)*cj5))+(((-1.0)*pz*x312))+(((-1.0)*x309*x311))+(((-1.0)*x309*x310)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x314.valid)
                                                {
//                                                    continue;
                                                }
                                                j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x313.value)))+(x314.value));
                                                sj4array[0]=IKsin(j4array[0]);
                                                cj4array[0]=IKcos(j4array[0]);
                                                if( j4array[0] > IKPI )
                                                {
//                                                    j4array[0]-=IK2PI;
                                                }
                                                else if( j4array[0] < -IKPI )
                                                {
//                                                    j4array[0]+=IK2PI;
                                                }
                                                j4valid[0] = true;
                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                {
                                                    if( !j4valid[ij4] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij4[0] = ij4;
                                                    _ij4[1] = -1;
                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                    {
                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j4valid[iij4]=false;
//                                                            _ij4[1] = iij4;
//                                                            break;
                                                        }
                                                    }
                                                    j4 = j4array[ij4];
                                                    cj4 = cj4array[ij4];
                                                    sj4 = sj4array[ij4];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x315=IKsin(j4);
                                                        IkReal x316=IKcos(j4);
                                                        IkReal x317=(cj3*px);
                                                        IkReal x318=((0.24)*cj5);
                                                        IkReal x319=(py*sj3);
                                                        IkReal x320=((0.24)*sj5);
                                                        IkReal x321=((0.36)*x316);
                                                        IkReal x322=((0.36)*x315);
                                                        IkReal x323=((1.0)*x315);
                                                        IkReal x324=((0.72)*x316);
                                                        IkReal x325=(pz*x315);
                                                        IkReal x326=((1.0)*x316);
                                                        evalcond[0]=((((-1.0)*x322))+pz+(((-1.0)*x315*x318))+((x316*x320)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x321))+(((-1.0)*x315*x320))+(((-1.0)*x317))+(((-1.0)*x319))+(((-1.0)*x316*x318)));
                                                        evalcond[2]=((-0.36)+(((-1.0)*x317*x326))+(((-1.0)*x321))+x325+(((-1.0)*x318))+(((-1.0)*x319*x326)));
                                                        evalcond[3]=((((-1.0)*x317*x323))+(((-1.0)*x320))+(((-1.0)*x322))+(((-1.0)*x319*x323))+(((-1.0)*pz*x326)));
                                                        evalcond[4]=((-0.2016)+(((0.72)*x325))+(((-1.0)*(px*px)))+(((-1.0)*x317*x324))+(((-0.72)*x319))+(((-0.72)*x317))+(((-0.2592)*x316))+(((-1.0)*x319*x324))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j3;
                                                        vinfos[0].indices[0] = _ij3[0];
                                                        vinfos[0].indices[1] = _ij3[1];
                                                        vinfos[0].maxsolutions = _nj3;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j4;
                                                        vinfos[1].indices[0] = _ij4[0];
                                                        vinfos[1].indices[1] = _ij4[1];
                                                        vinfos[1].maxsolutions = _nj4;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j5;
                                                        vinfos[2].indices[0] = _ij5[0];
                                                        vinfos[2].indices[1] = _ij5[1];
                                                        vinfos[2].maxsolutions = _nj5;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Hunker (478e384d3e70b2b7bae27b584cda0040)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
