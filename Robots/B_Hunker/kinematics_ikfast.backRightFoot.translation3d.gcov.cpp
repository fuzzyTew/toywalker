#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL float
#define IKFAST_NAMESPACE kinematics_ikfast_backRightFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-20 01:59:54.550759
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return float(-IKPI_2);
    }
    else if (false)//else if( f >= 1 )
    {
//        return float(IKPI_2);
    }
//    return asinf(f);
}
inline double IKasin(double f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if (false)//else if( f >= 1 )
    {
//        return IKPI_2;
    }
//    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return float(IKPI);
    }
    else if( f >= 1 )
    {
//        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if (false)//if( f <= 0.0f )
    {
//        return 0.0f;
    }
//    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if (false)//if( f <= 0.0 )
    {
//        return 0.0;
    }
//    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKsin(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x0);
    x8=((0.33)*x2);
    x9=(x1*x3);
    IkReal x10=((1.0)*x7);
    IkReal x11=((1.0)*x0);
    eetrans[0]=((-0.36)+(((-1.0)*x11*x4*x6))+(((-1.0)*x10))+(((-1.0)*x1*x10))+(((-1.0)*x1*x11*x8)));
    eetrans[1]=((((-0.36)*x3))+(((-0.36)*x9))+(((-1.0)*x3*x4*x6))+(((-1.0)*x8*x9)));
    eetrans[2]=((0.15)+((x4*x8))+(((-1.0)*x1*x6))+(((0.36)*x4)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j3=numeric_limits<IkReal>::quiet_NaN();
        _ij3[0] = -1;
        _ij3[1] = -1;
        _nj3 = -1;
        j4=numeric_limits<IkReal>::quiet_NaN();
        _ij4[0] = -1;
        _ij4[1] = -1;
        _nj4 = -1;
        j5=numeric_limits<IkReal>::quiet_NaN();
        _ij5[0] = -1;
        _ij5[1] = -1;
        _nj5 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((0.36)+px);
            new_py=py;
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j3eval[1];
                j3eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j3eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
//                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
//                                bgotonextstatement=false;
                                {
                                    IkReal j5array[2], cj5array[2], sj5array[2];
                                    bool j5valid[2]= {false};
//                                    _nj5 = 2;
//                                    cj5array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz))));
                                    if (false)//if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
//                                        j5valid[0] = j5valid[1] = true;
//                                        j5array[0] = IKacos(cj5array[0]);
//                                        sj5array[0] = IKsin(j5array[0]);
//                                        cj5array[1] = cj5array[0];
//                                        j5array[1] = -j5array[0];
//                                        sj5array[1] = -sj5array[0];
                                    }
                                    else if (false)//else if( isnan(cj5array[0]) )
                                    {
                                        // probably any value will work
//                                        j5valid[0] = true;
//                                        cj5array[0] = 1;
//                                        sj5array[0] = 0;
//                                        j5array[0] = 0;
                                    }
//                                    for(int ij5 = 0; ij5 < 2; ++ij5)
                                    {
                                        if (false)//if( !j5valid[ij5] )
                                        {
//                                            continue;
                                        }
//                                        _ij5[0] = ij5;
//                                        _ij5[1] = -1;
//                                        for(int iij5 = ij5+1; iij5 < 2; ++iij5)
                                        {
                                            if (false)//if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
                                            {
//                                                j5valid[iij5]=false;
//                                                _ij5[1] = iij5;
//                                                break;
                                            }
                                        }
//                                        j5 = j5array[ij5];
//                                        cj5 = cj5array[ij5];
//                                        sj5 = sj5array[ij5];

                                        {
                                            IkReal j4eval[3];
//                                            px=0;
//                                            py=0;
//                                            pp=pz*pz;
//                                            IkReal x12=pz*pz;
//                                            IkReal x13=((825.0)*pz);
//                                            j4eval[0]=((-1.0)+(((-7.71604938271605)*x12)));
//                                            j4eval[1]=IKsign(((-324.0)+(((-2500.0)*x12))));
//                                            j4eval[2]=((IKabs(((((-1.0)*cj5*x13))+(((297.0)*sj5))+(((-900.0)*pz)))))+(IKabs(((324.0)+((sj5*x13))+(((297.0)*cj5))))));
                                            if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j4eval[1];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    j4eval[0]=((1.09090909090909)+cj5+(((-2.77777777777778)*pz*sj5)));
                                                    if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j4eval[1];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j4eval[0]=((((-1.0)*sj5))+(((-2.77777777777778)*cj5*pz))+(((-3.03030303030303)*pz)));
                                                            if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
//                                                                        IkReal x14=pz*pz;
//                                                                        IkReal x15=((1.0)+(((7.71604938271605)*x14)));
                                                                        if (false)//if((x15) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x16=IKabs(IKsqrt(x15));
//                                                                        IkReal x22 = x15;
                                                                        if (false)//if(IKabs(x22)==0)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x17=pow(x22,-0.5);
//                                                                        CheckValue<IkReal> x23=IKPowWithIntegerCheck<IKFAST_REAL>(x16,-1);
                                                                        if (false)//if(!x23.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x18=x23.value;
//                                                                        IkReal x19=((3.03030303030303)*pz*x18);
                                                                        if (false)//if((((1.0)+(((-9.18273645546373)*x14*(x18*x18))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x20=IKsqrt(((1.0)+(((-9.18273645546373)*x14*(x18*x18)))));
//                                                                        IkReal x21=(x17*x20);
                                                                        if (false)//if( (x19) < -1-IKFAST_SINCOS_THRESH || (x19) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x24.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal gconst0=((IKasin(x19))+(((-1.0)*(x24.value))));
//                                                                        IkReal gconst1=((((-1.0)*x17*x19))+(((2.77777777777778)*pz*x21)));
//                                                                        IkReal gconst2=((((-1.0)*x21))+(((-8.41750841750842)*x14*x17*x18)));
//                                                                        CheckValue<IkReal> x25 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x25.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x26=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if (false)//if(!x26.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((3.03030303030303)*pz*(x26.value))) < -1-IKFAST_SINCOS_THRESH || (((3.03030303030303)*pz*(x26.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x25.value)+(((-1.0)*(IKasin(((3.03030303030303)*pz*(x26.value))))))+j5)))), 6.28318530717959)));
                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
//                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j4eval[2];
//                                                                                IkReal x27=pz*pz;
//                                                                                IkReal x28=x15;
                                                                                if (false)//if((x28) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x29=IKabs(IKsqrt(x28));
//                                                                                IkReal x36 = x28;
                                                                                if (false)//if(IKabs(x36)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x30=pow(x36,-0.5);
//                                                                                CheckValue<IkReal> x37=IKPowWithIntegerCheck<IKFAST_REAL>(x29,-1);
                                                                                if (false)//if(!x37.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x31=x37.value;
//                                                                                IkReal x32=((3.03030303030303)*pz*x31);
                                                                                if (false)//if( (x32) < -1-IKFAST_SINCOS_THRESH || (x32) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x38.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x33=((IKasin(x32))+(((-1.0)*(x38.value))));
                                                                                if (false)//if((((1.0)+(((-9.18273645546373)*x27*(x31*x31))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x34=IKsqrt(((1.0)+(((-9.18273645546373)*x27*(x31*x31)))));
//                                                                                IkReal x35=(x30*x34);
//                                                                                px=0;
//                                                                                py=0;
//                                                                                pp=x27;
//                                                                                sj5=gconst1;
//                                                                                cj5=gconst2;
//                                                                                j5=x33;
//                                                                                IkReal gconst0=x33;
//                                                                                IkReal gconst1=((((2.77777777777778)*pz*x35))+(((-1.0)*x30*x32)));
//                                                                                IkReal gconst2=((((-1.0)*x35))+(((-8.41750841750842)*x27*x30*x31)));
//                                                                                IkReal x39=pz*pz;
//                                                                                j4eval[0]=((-1.0)+(((-7.71604938271605)*x39)));
//                                                                                j4eval[1]=IKsign(((-324.0)+(((-2500.0)*x39))));
                                                                                if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                        bool j4valid[1]= {false};
//                                                                                        _nj4 = 1;
//                                                                                        IkReal x40=(gconst1*pz);
//                                                                                        CheckValue<IkReal> x41=IKPowWithIntegerCheck<IKFAST_REAL>(((4.32)+(((3.96)*gconst2))+(((-11.0)*x40))),-1);
                                                                                        if (false)//if(!x41.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x42=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((1100.0)*x40))+(((-396.0)*gconst2))),-1);
                                                                                        if (false)//if(!x42.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
                                                                                        if (false)//if( IKabs(((x41.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x42.value)*(((432.0)+(((-363.0)*(gconst1*gconst1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x41.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2))))))+IKsqr(((x42.value)*(((432.0)+(((-363.0)*(gconst1*gconst1)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j4array[0]=IKatan2(((x41.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2))))), ((x42.value)*(((432.0)+(((-363.0)*(gconst1*gconst1)))))));
//                                                                                        sj4array[0]=IKsin(j4array[0]);
//                                                                                        cj4array[0]=IKcos(j4array[0]);
                                                                                        if (false)//if( j4array[0] > IKPI )
                                                                                        {
//                                                                                            j4array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j4array[0] < -IKPI )
                                                                                        {
//                                                                                            j4array[0]+=IK2PI;
                                                                                        }
//                                                                                        j4valid[0] = true;
//                                                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                        {
                                                                                            if (false)//if( !j4valid[ij4] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij4[0] = ij4;
//                                                                                            _ij4[1] = -1;
//                                                                                            for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                            {
                                                                                                if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j4valid[iij4]=false;
//                                                                                                    _ij4[1] = iij4;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j4 = j4array[ij4];
//                                                                                            cj4 = cj4array[ij4];
//                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x43=IKcos(j4);
//                                                                                                IkReal x44=IKsin(j4);
//                                                                                                IkReal x45=((0.33)*gconst2);
//                                                                                                IkReal x46=((0.33)*gconst1);
//                                                                                                IkReal x47=((0.36)*x44);
//                                                                                                IkReal x48=((0.36)*x43);
//                                                                                                IkReal x49=(pz*x44);
//                                                                                                evalcond[0]=((-0.36)+(((-1.0)*x45))+(((-1.0)*x48))+x49);
//                                                                                                evalcond[1]=((((-1.0)*x47))+(((-1.0)*x46))+(((-1.0)*pz*x43)));
//                                                                                                evalcond[2]=((-0.1503)+(((-0.2592)*x43))+(((0.72)*x49))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=((((-1.0)*x47))+((x43*x46))+(((-1.0)*x44*x45))+pz);
//                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x48))+(((-1.0)*x43*x45))+(((-1.0)*x44*x46)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                bool j3valid[1]= {false};
//                                                                                                _nj3 = 1;
//                                                                                                j3array[0]=0;
//                                                                                                sj3array[0]=IKsin(j3array[0]);
//                                                                                                cj3array[0]=IKcos(j3array[0]);
                                                                                                if (false)//if( j3array[0] > IKPI )
                                                                                                {
//                                                                                                    j3array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j3array[0] < -IKPI )
                                                                                                {
//                                                                                                    j3array[0]+=IK2PI;
                                                                                                }
//                                                                                                j3valid[0] = true;
//                                                                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                {
                                                                                                    if (false)//if( !j3valid[ij3] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij3[0] = ij3;
//                                                                                                    _ij3[1] = -1;
//                                                                                                    for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                    {
                                                                                                        if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j3valid[iij3]=false;
//                                                                                                            _ij3[1] = iij3;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j3 = j3array[ij3];
//                                                                                                    cj3 = cj3array[ij3];
//                                                                                                    sj3 = sj3array[ij3];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j3;
//                                                                                                        vinfos[0].indices[0] = _ij3[0];
//                                                                                                        vinfos[0].indices[1] = _ij3[1];
//                                                                                                        vinfos[0].maxsolutions = _nj3;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j4;
//                                                                                                        vinfos[1].indices[0] = _ij4[0];
//                                                                                                        vinfos[1].indices[1] = _ij4[1];
//                                                                                                        vinfos[1].maxsolutions = _nj4;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j5;
//                                                                                                        vinfos[2].indices[0] = _ij5[0];
//                                                                                                        vinfos[2].indices[1] = _ij5[1];
//                                                                                                        vinfos[2].maxsolutions = _nj5;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                        bool j4valid[1]= {false};
//                                                                                        _nj4 = 1;
//                                                                                        IkReal x50=((825.0)*pz);
//                                                                                        CheckValue<IkReal> x51 = IKatan2WithCheck(IkReal(((((297.0)*gconst1))+(((-1.0)*gconst2*x50))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst2))+((gconst1*x50)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x51.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x52=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                        if (false)//if(!x52.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j4array[0]=((-1.5707963267949)+(x51.value)+(((1.5707963267949)*(x52.value))));
//                                                                                        sj4array[0]=IKsin(j4array[0]);
//                                                                                        cj4array[0]=IKcos(j4array[0]);
                                                                                        if (false)//if( j4array[0] > IKPI )
                                                                                        {
//                                                                                            j4array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j4array[0] < -IKPI )
                                                                                        {
//                                                                                            j4array[0]+=IK2PI;
                                                                                        }
//                                                                                        j4valid[0] = true;
//                                                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                        {
                                                                                            if (false)//if( !j4valid[ij4] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij4[0] = ij4;
//                                                                                            _ij4[1] = -1;
//                                                                                            for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                            {
                                                                                                if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j4valid[iij4]=false;
//                                                                                                    _ij4[1] = iij4;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j4 = j4array[ij4];
//                                                                                            cj4 = cj4array[ij4];
//                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x53=IKcos(j4);
//                                                                                                IkReal x54=IKsin(j4);
//                                                                                                IkReal x55=((0.33)*gconst2);
//                                                                                                IkReal x56=((0.33)*gconst1);
//                                                                                                IkReal x57=((0.36)*x54);
//                                                                                                IkReal x58=((0.36)*x53);
//                                                                                                IkReal x59=(pz*x54);
//                                                                                                evalcond[0]=((-0.36)+x59+(((-1.0)*x58))+(((-1.0)*x55)));
//                                                                                                evalcond[1]=((((-1.0)*x56))+(((-1.0)*x57))+(((-1.0)*pz*x53)));
//                                                                                                evalcond[2]=((-0.1503)+(((0.72)*x59))+(((-0.2592)*x53))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=((((-1.0)*x54*x55))+pz+((x53*x56))+(((-1.0)*x57)));
//                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x53*x55))+(((-1.0)*x54*x56))+(((-1.0)*x58)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                bool j3valid[1]= {false};
//                                                                                                _nj3 = 1;
//                                                                                                j3array[0]=0;
//                                                                                                sj3array[0]=IKsin(j3array[0]);
//                                                                                                cj3array[0]=IKcos(j3array[0]);
                                                                                                if (false)//if( j3array[0] > IKPI )
                                                                                                {
//                                                                                                    j3array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j3array[0] < -IKPI )
                                                                                                {
//                                                                                                    j3array[0]+=IK2PI;
                                                                                                }
//                                                                                                j3valid[0] = true;
//                                                                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                {
                                                                                                    if (false)//if( !j3valid[ij3] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij3[0] = ij3;
//                                                                                                    _ij3[1] = -1;
//                                                                                                    for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                    {
                                                                                                        if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j3valid[iij3]=false;
//                                                                                                            _ij3[1] = iij3;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j3 = j3array[ij3];
//                                                                                                    cj3 = cj3array[ij3];
//                                                                                                    sj3 = sj3array[ij3];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j3;
//                                                                                                        vinfos[0].indices[0] = _ij3[0];
//                                                                                                        vinfos[0].indices[1] = _ij3[1];
//                                                                                                        vinfos[0].maxsolutions = _nj3;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j4;
//                                                                                                        vinfos[1].indices[0] = _ij4[0];
//                                                                                                        vinfos[1].indices[1] = _ij4[1];
//                                                                                                        vinfos[1].maxsolutions = _nj4;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j5;
//                                                                                                        vinfos[2].indices[0] = _ij5[0];
//                                                                                                        vinfos[2].indices[1] = _ij5[1];
//                                                                                                        vinfos[2].maxsolutions = _nj5;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if (false)//if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            IkReal x60=pz*pz;
//                                                                            IkReal x61=((1.0)+(((7.71604938271605)*x60)));
//                                                                            IkReal x68 = x61;
                                                                            if (false)//if(IKabs(x68)==0)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x62=pow(x68,-0.5);
                                                                            if (false)//if((x61) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x63=IKabs(IKsqrt(x61));
//                                                                            CheckValue<IkReal> x69=IKPowWithIntegerCheck<IKFAST_REAL>(x63,-1);
                                                                            if (false)//if(!x69.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x64=x69.value;
//                                                                            IkReal x65=((3.03030303030303)*pz*x64);
                                                                            if (false)//if((((1.0)+(((-9.18273645546373)*x60*(x64*x64))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x66=IKsqrt(((1.0)+(((-9.18273645546373)*x60*(x64*x64)))));
//                                                                            IkReal x67=(x62*x66);
                                                                            if (false)//if( (x65) < -1-IKFAST_SINCOS_THRESH || (x65) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x70.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(IKasin(x65))))+(((-1.0)*(x70.value))));
//                                                                            IkReal gconst4=((((-2.77777777777778)*pz*x67))+(((-1.0)*x62*x65)));
//                                                                            IkReal gconst5=((((-8.41750841750842)*x60*x62*x64))+(((1.0)*x67)));
//                                                                            CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x71.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x72=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if (false)//if(!x72.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (((3.03030303030303)*pz*(x72.value))) < -1-IKFAST_SINCOS_THRESH || (((3.03030303030303)*pz*(x72.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x71.value)+(IKasin(((3.03030303030303)*pz*(x72.value))))+j5)))), 6.28318530717959)));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j4eval[2];
//                                                                                    IkReal x73=pz*pz;
//                                                                                    IkReal x74=x61;
//                                                                                    IkReal x82 = x74;
                                                                                    if (false)//if(IKabs(x82)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x75=pow(x82,-0.5);
                                                                                    if (false)//if((x74) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x76=IKabs(IKsqrt(x74));
//                                                                                    CheckValue<IkReal> x83=IKPowWithIntegerCheck<IKFAST_REAL>(x76,-1);
                                                                                    if (false)//if(!x83.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x77=x83.value;
//                                                                                    IkReal x78=((3.03030303030303)*pz*x77);
                                                                                    if (false)//if((((1.0)+(((-9.18273645546373)*x73*(x77*x77))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x79=IKsqrt(((1.0)+(((-9.18273645546373)*x73*(x77*x77)))));
//                                                                                    CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x84.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (x78) < -1-IKFAST_SINCOS_THRESH || (x78) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x80=((((1.0)*(x84.value)))+(((1.0)*(IKasin(x78)))));
//                                                                                    IkReal x81=(x75*x79);
//                                                                                    px=0;
//                                                                                    py=0;
//                                                                                    pp=x73;
//                                                                                    sj5=gconst4;
//                                                                                    cj5=gconst5;
//                                                                                    j5=((3.14159265)+(((-1.0)*x80)));
//                                                                                    IkReal gconst3=((3.14159265358979)+(((-1.0)*x80)));
//                                                                                    IkReal gconst4=((((-2.77777777777778)*pz*x81))+(((-1.0)*x75*x78)));
//                                                                                    IkReal gconst5=((((-8.41750841750842)*x73*x75*x77))+(((1.0)*x81)));
//                                                                                    IkReal x85=pz*pz;
//                                                                                    j4eval[0]=((-1.0)+(((-7.71604938271605)*x85)));
//                                                                                    j4eval[1]=IKsign(((-324.0)+(((-2500.0)*x85))));
                                                                                    if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                            bool j4valid[1]= {false};
//                                                                                            _nj4 = 1;
//                                                                                            IkReal x86=(gconst4*pz);
//                                                                                            CheckValue<IkReal> x87=IKPowWithIntegerCheck<IKFAST_REAL>(((4.32)+(((3.96)*gconst5))+(((-11.0)*x86))),-1);
                                                                                            if (false)//if(!x87.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x88=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((1100.0)*x86))+(((-396.0)*gconst5))),-1);
                                                                                            if (false)//if(!x88.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
                                                                                            if (false)//if( IKabs(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5))))))+IKsqr(((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j4array[0]=IKatan2(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5))))), ((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))));
//                                                                                            sj4array[0]=IKsin(j4array[0]);
//                                                                                            cj4array[0]=IKcos(j4array[0]);
                                                                                            if (false)//if( j4array[0] > IKPI )
                                                                                            {
//                                                                                                j4array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j4array[0] < -IKPI )
                                                                                            {
//                                                                                                j4array[0]+=IK2PI;
                                                                                            }
//                                                                                            j4valid[0] = true;
//                                                                                            for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                            {
                                                                                                if (false)//if( !j4valid[ij4] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij4[0] = ij4;
//                                                                                                _ij4[1] = -1;
//                                                                                                for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                {
                                                                                                    if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j4valid[iij4]=false;
//                                                                                                        _ij4[1] = iij4;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j4 = j4array[ij4];
//                                                                                                cj4 = cj4array[ij4];
//                                                                                                sj4 = sj4array[ij4];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x89=IKcos(j4);
//                                                                                                    IkReal x90=IKsin(j4);
//                                                                                                    IkReal x91=((0.33)*gconst5);
//                                                                                                    IkReal x92=((0.33)*gconst4);
//                                                                                                    IkReal x93=((0.36)*x90);
//                                                                                                    IkReal x94=((0.36)*x89);
//                                                                                                    IkReal x95=(pz*x90);
//                                                                                                    evalcond[0]=((-0.36)+x95+(((-1.0)*x91))+(((-1.0)*x94)));
//                                                                                                    evalcond[1]=((((-1.0)*pz*x89))+(((-1.0)*x93))+(((-1.0)*x92)));
//                                                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x89))+(((-1.0)*(pz*pz)))+(((0.72)*x95)));
//                                                                                                    evalcond[3]=(((x89*x92))+(((-1.0)*x90*x91))+pz+(((-1.0)*x93)));
//                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x90*x92))+(((-1.0)*x94))+(((-1.0)*x89*x91)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                    bool j3valid[1]= {false};
//                                                                                                    _nj3 = 1;
//                                                                                                    j3array[0]=0;
//                                                                                                    sj3array[0]=IKsin(j3array[0]);
//                                                                                                    cj3array[0]=IKcos(j3array[0]);
                                                                                                    if (false)//if( j3array[0] > IKPI )
                                                                                                    {
//                                                                                                        j3array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j3array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j3array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j3valid[0] = true;
//                                                                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                    {
                                                                                                        if (false)//if( !j3valid[ij3] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij3[0] = ij3;
//                                                                                                        _ij3[1] = -1;
//                                                                                                        for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                        {
                                                                                                            if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j3valid[iij3]=false;
//                                                                                                                _ij3[1] = iij3;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j3 = j3array[ij3];
//                                                                                                        cj3 = cj3array[ij3];
//                                                                                                        sj3 = sj3array[ij3];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j3;
//                                                                                                            vinfos[0].indices[0] = _ij3[0];
//                                                                                                            vinfos[0].indices[1] = _ij3[1];
//                                                                                                            vinfos[0].maxsolutions = _nj3;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j4;
//                                                                                                            vinfos[1].indices[0] = _ij4[0];
//                                                                                                            vinfos[1].indices[1] = _ij4[1];
//                                                                                                            vinfos[1].maxsolutions = _nj4;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j5;
//                                                                                                            vinfos[2].indices[0] = _ij5[0];
//                                                                                                            vinfos[2].indices[1] = _ij5[1];
//                                                                                                            vinfos[2].maxsolutions = _nj5;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                            bool j4valid[1]= {false};
//                                                                                            _nj4 = 1;
//                                                                                            IkReal x96=((825.0)*pz);
//                                                                                            CheckValue<IkReal> x97 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x96))+(((297.0)*gconst4))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst5))+((gconst4*x96)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x97.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x98=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                            if (false)//if(!x98.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j4array[0]=((-1.5707963267949)+(x97.value)+(((1.5707963267949)*(x98.value))));
//                                                                                            sj4array[0]=IKsin(j4array[0]);
//                                                                                            cj4array[0]=IKcos(j4array[0]);
                                                                                            if (false)//if( j4array[0] > IKPI )
                                                                                            {
//                                                                                                j4array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j4array[0] < -IKPI )
                                                                                            {
//                                                                                                j4array[0]+=IK2PI;
                                                                                            }
//                                                                                            j4valid[0] = true;
//                                                                                            for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                            {
                                                                                                if (false)//if( !j4valid[ij4] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij4[0] = ij4;
//                                                                                                _ij4[1] = -1;
//                                                                                                for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                {
                                                                                                    if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j4valid[iij4]=false;
//                                                                                                        _ij4[1] = iij4;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j4 = j4array[ij4];
//                                                                                                cj4 = cj4array[ij4];
//                                                                                                sj4 = sj4array[ij4];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x99=IKcos(j4);
//                                                                                                    IkReal x100=IKsin(j4);
//                                                                                                    IkReal x101=((0.33)*gconst5);
//                                                                                                    IkReal x102=((0.33)*gconst4);
//                                                                                                    IkReal x103=((0.36)*x100);
//                                                                                                    IkReal x104=((0.36)*x99);
//                                                                                                    IkReal x105=(pz*x100);
//                                                                                                    evalcond[0]=((-0.36)+(((-1.0)*x101))+(((-1.0)*x104))+x105);
//                                                                                                    evalcond[1]=((((-1.0)*pz*x99))+(((-1.0)*x103))+(((-1.0)*x102)));
//                                                                                                    evalcond[2]=((-0.1503)+(((0.72)*x105))+(((-0.2592)*x99))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=((((-1.0)*x100*x101))+((x102*x99))+(((-1.0)*x103))+pz);
//                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x100*x102))+(((-1.0)*x104))+(((-1.0)*x101*x99)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                    bool j3valid[1]= {false};
//                                                                                                    _nj3 = 1;
//                                                                                                    j3array[0]=0;
//                                                                                                    sj3array[0]=IKsin(j3array[0]);
//                                                                                                    cj3array[0]=IKcos(j3array[0]);
                                                                                                    if (false)//if( j3array[0] > IKPI )
                                                                                                    {
//                                                                                                        j3array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j3array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j3array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j3valid[0] = true;
//                                                                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                    {
                                                                                                        if (false)//if( !j3valid[ij3] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij3[0] = ij3;
//                                                                                                        _ij3[1] = -1;
//                                                                                                        for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                        {
                                                                                                            if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j3valid[iij3]=false;
//                                                                                                                _ij3[1] = iij3;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j3 = j3array[ij3];
//                                                                                                        cj3 = cj3array[ij3];
//                                                                                                        sj3 = sj3array[ij3];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j3;
//                                                                                                            vinfos[0].indices[0] = _ij3[0];
//                                                                                                            vinfos[0].indices[1] = _ij3[1];
//                                                                                                            vinfos[0].maxsolutions = _nj3;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j4;
//                                                                                                            vinfos[1].indices[0] = _ij4[0];
//                                                                                                            vinfos[1].indices[1] = _ij4[1];
//                                                                                                            vinfos[1].maxsolutions = _nj4;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j5;
//                                                                                                            vinfos[2].indices[0] = _ij5[0];
//                                                                                                            vinfos[2].indices[1] = _ij5[1];
//                                                                                                            vinfos[2].maxsolutions = _nj5;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
//                                                                                IkReal x106=((1.0)+(((7.71604938271605)*(pz*pz))));
//                                                                                IkReal x113 = x106;
                                                                                if (false)//if(IKabs(x113)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x107=pow(x113,-0.5);
                                                                                if (false)//if((x106) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x108=IKabs(IKsqrt(x106));
//                                                                                IkReal x109=(pz*x107);
//                                                                                CheckValue<IkReal> x114=IKPowWithIntegerCheck<IKFAST_REAL>(x108,-1);
                                                                                if (false)//if(!x114.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x110=x114.value;
//                                                                                IkReal x111=((1.09090909090909)*x110);
                                                                                if (false)//if((((1.0)+(((-1.1900826446281)*(x110*x110))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x112=IKsqrt(((1.0)+(((-1.1900826446281)*(x110*x110)))));
//                                                                                CheckValue<IkReal> x115 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x115.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (x111) < -1-IKFAST_SINCOS_THRESH || (x111) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal gconst6=((((-1.0)*(x115.value)))+(((-1.0)*(IKasin(x111)))));
//                                                                                IkReal gconst7=((((-1.0)*x107*x112))+(((3.03030303030303)*x109*x110)));
//                                                                                IkReal gconst8=((((-2.77777777777778)*x109*x112))+(((-1.0)*x107*x111)));
//                                                                                CheckValue<IkReal> x116 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x116.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x117=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                if (false)//if(!x117.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (((1.09090909090909)*(x117.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x117.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x116.value)+(IKasin(((1.09090909090909)*(x117.value))))+j5)))), 6.28318530717959)));
                                                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
//                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j4eval[2];
//                                                                                        IkReal x118=pz*pz;
//                                                                                        CheckValue<IkReal> x127 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x127.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x119=((1.0)*(x127.value));
//                                                                                        IkReal x120=x106;
//                                                                                        IkReal x128 = x120;
                                                                                        if (false)//if(IKabs(x128)==0)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x121=pow(x128,-0.5);
                                                                                        if (false)//if((x120) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x122=IKabs(IKsqrt(x120));
//                                                                                        CheckValue<IkReal> x129=IKPowWithIntegerCheck<IKFAST_REAL>(x122,-1);
                                                                                        if (false)//if(!x129.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x123=x129.value;
                                                                                        if (false)//if((((1.0)+(((-1.1900826446281)*(x123*x123))))) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x124=IKsqrt(((1.0)+(((-1.1900826446281)*(x123*x123)))));
//                                                                                        IkReal x125=(x121*x123);
//                                                                                        IkReal x126=(x121*x124);
//                                                                                        px=0;
//                                                                                        py=0;
//                                                                                        pp=x118;
//                                                                                        sj5=gconst7;
//                                                                                        cj5=gconst8;
                                                                                        if (false)//if( (((1.09090908694215)*x123)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x123)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j5=((((-1.0)*x119))+(((-1.0)*(IKasin(((1.09090908694215)*x123))))));
                                                                                        if (false)//if( (((1.09090909090909)*x123)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x123)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal gconst6=((((-1.0)*x119))+(((-1.0)*(IKasin(((1.09090909090909)*x123))))));
//                                                                                        IkReal gconst7=((((3.03030303030303)*pz*x125))+(((-1.0)*x126)));
//                                                                                        IkReal gconst8=((((-1.09090909090909)*x125))+(((-2.77777777777778)*pz*x126)));
//                                                                                        IkReal x130=pz*pz;
//                                                                                        j4eval[0]=((-1.0)+(((-7.71604938271605)*x130)));
//                                                                                        j4eval[1]=IKsign(((-324.0)+(((-2500.0)*x130))));
                                                                                        if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                                bool j4valid[1]= {false};
//                                                                                                _nj4 = 1;
//                                                                                                IkReal x131=((297.0)*gconst7);
//                                                                                                IkReal x132=((900.0)*pz);
//                                                                                                IkReal x133=(x131+x132);
//                                                                                                CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((((-594.0)*gconst8))+(((-272.25)*(gconst8*gconst8))))),IkReal((x133+(((272.25)*gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x134.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x135=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-1.0)*x133))+(((-825.0)*gconst8*pz)))),-1);
                                                                                                if (false)//if(!x135.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j4array[0]=((-1.5707963267949)+(x134.value)+(((1.5707963267949)*(x135.value))));
//                                                                                                sj4array[0]=IKsin(j4array[0]);
//                                                                                                cj4array[0]=IKcos(j4array[0]);
                                                                                                if (false)//if( j4array[0] > IKPI )
                                                                                                {
//                                                                                                    j4array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j4array[0] < -IKPI )
                                                                                                {
//                                                                                                    j4array[0]+=IK2PI;
                                                                                                }
//                                                                                                j4valid[0] = true;
//                                                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                                {
                                                                                                    if (false)//if( !j4valid[ij4] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij4[0] = ij4;
//                                                                                                    _ij4[1] = -1;
//                                                                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                    {
                                                                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j4valid[iij4]=false;
//                                                                                                            _ij4[1] = iij4;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j4 = j4array[ij4];
//                                                                                                    cj4 = cj4array[ij4];
//                                                                                                    sj4 = sj4array[ij4];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x136=IKcos(j4);
//                                                                                                        IkReal x137=IKsin(j4);
//                                                                                                        IkReal x138=((0.33)*gconst7);
//                                                                                                        IkReal x139=((0.33)*gconst8);
//                                                                                                        IkReal x140=((0.36)*x137);
//                                                                                                        IkReal x141=((0.36)*x136);
//                                                                                                        IkReal x142=(pz*x137);
//                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x141))+x142+(((-1.0)*x139)));
//                                                                                                        evalcond[1]=((((-1.0)*x140))+(((-1.0)*x138))+(((-1.0)*pz*x136)));
//                                                                                                        evalcond[2]=((-0.1503)+(((-0.2592)*x136))+(((0.72)*x142))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((((-1.0)*x140))+(((-1.0)*x137*x139))+((x136*x138))+pz);
//                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x141))+(((-1.0)*x137*x138))+(((-1.0)*x136*x139)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                        bool j3valid[1]= {false};
//                                                                                                        _nj3 = 1;
//                                                                                                        j3array[0]=0;
//                                                                                                        sj3array[0]=IKsin(j3array[0]);
//                                                                                                        cj3array[0]=IKcos(j3array[0]);
                                                                                                        if (false)//if( j3array[0] > IKPI )
                                                                                                        {
//                                                                                                            j3array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j3array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j3array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j3valid[0] = true;
//                                                                                                        for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                        {
                                                                                                            if (false)//if( !j3valid[ij3] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij3[0] = ij3;
//                                                                                                            _ij3[1] = -1;
//                                                                                                            for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                            {
                                                                                                                if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j3valid[iij3]=false;
//                                                                                                                    _ij3[1] = iij3;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j3 = j3array[ij3];
//                                                                                                            cj3 = cj3array[ij3];
//                                                                                                            sj3 = sj3array[ij3];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j3;
//                                                                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                                                                vinfos[0].maxsolutions = _nj3;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j4;
//                                                                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                                                                vinfos[1].maxsolutions = _nj4;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j5;
//                                                                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                                                                vinfos[2].maxsolutions = _nj5;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                                bool j4valid[1]= {false};
//                                                                                                _nj4 = 1;
//                                                                                                IkReal x143=((825.0)*pz);
//                                                                                                CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal(((((297.0)*gconst7))+(((-1.0)*gconst8*x143))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst8))+((gconst7*x143)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x144.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x145=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                                if (false)//if(!x145.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j4array[0]=((-1.5707963267949)+(x144.value)+(((1.5707963267949)*(x145.value))));
//                                                                                                sj4array[0]=IKsin(j4array[0]);
//                                                                                                cj4array[0]=IKcos(j4array[0]);
                                                                                                if (false)//if( j4array[0] > IKPI )
                                                                                                {
//                                                                                                    j4array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j4array[0] < -IKPI )
                                                                                                {
//                                                                                                    j4array[0]+=IK2PI;
                                                                                                }
//                                                                                                j4valid[0] = true;
//                                                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                                {
                                                                                                    if (false)//if( !j4valid[ij4] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij4[0] = ij4;
//                                                                                                    _ij4[1] = -1;
//                                                                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                    {
                                                                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j4valid[iij4]=false;
//                                                                                                            _ij4[1] = iij4;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j4 = j4array[ij4];
//                                                                                                    cj4 = cj4array[ij4];
//                                                                                                    sj4 = sj4array[ij4];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x146=IKcos(j4);
//                                                                                                        IkReal x147=IKsin(j4);
//                                                                                                        IkReal x148=((0.33)*gconst7);
//                                                                                                        IkReal x149=((0.33)*gconst8);
//                                                                                                        IkReal x150=((0.36)*x147);
//                                                                                                        IkReal x151=((0.36)*x146);
//                                                                                                        IkReal x152=(pz*x147);
//                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x149))+(((-1.0)*x151))+x152);
//                                                                                                        evalcond[1]=((((-1.0)*x148))+(((-1.0)*x150))+(((-1.0)*pz*x146)));
//                                                                                                        evalcond[2]=((-0.1503)+(((-0.2592)*x146))+(((0.72)*x152))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((((-1.0)*x150))+(((-1.0)*x147*x149))+pz+((x146*x148)));
//                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x151))+(((-1.0)*x147*x148))+(((-1.0)*x146*x149)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                        bool j3valid[1]= {false};
//                                                                                                        _nj3 = 1;
//                                                                                                        j3array[0]=0;
//                                                                                                        sj3array[0]=IKsin(j3array[0]);
//                                                                                                        cj3array[0]=IKcos(j3array[0]);
                                                                                                        if (false)//if( j3array[0] > IKPI )
                                                                                                        {
//                                                                                                            j3array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j3array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j3array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j3valid[0] = true;
//                                                                                                        for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                        {
                                                                                                            if (false)//if( !j3valid[ij3] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij3[0] = ij3;
//                                                                                                            _ij3[1] = -1;
//                                                                                                            for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                            {
                                                                                                                if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j3valid[iij3]=false;
//                                                                                                                    _ij3[1] = iij3;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j3 = j3array[ij3];
//                                                                                                            cj3 = cj3array[ij3];
//                                                                                                            sj3 = sj3array[ij3];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j3;
//                                                                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                                                                vinfos[0].maxsolutions = _nj3;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j4;
//                                                                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                                                                vinfos[1].maxsolutions = _nj4;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j5;
//                                                                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                                                                vinfos[2].maxsolutions = _nj5;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if (false)//if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
//                                                                                    IkReal x153=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                                    if (false)//if((x153) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x154=IKabs(IKsqrt(x153));
//                                                                                    IkReal x160 = x153;
                                                                                    if (false)//if(IKabs(x160)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x155=pow(x160,-0.5);
//                                                                                    IkReal x156=(pz*x155);
//                                                                                    CheckValue<IkReal> x161=IKPowWithIntegerCheck<IKFAST_REAL>(x154,-1);
                                                                                    if (false)//if(!x161.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x157=x161.value;
//                                                                                    IkReal x158=((1.09090909090909)*x157);
                                                                                    if (false)//if((((1.0)+(((-1.1900826446281)*(x157*x157))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x159=IKsqrt(((1.0)+(((-1.1900826446281)*(x157*x157)))));
//                                                                                    CheckValue<IkReal> x162 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x162.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (x158) < -1-IKFAST_SINCOS_THRESH || (x158) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal gconst9=((3.14159265358979)+(((-1.0)*(x162.value)))+(IKasin(x158)));
//                                                                                    IkReal gconst10=((((1.0)*x155*x159))+(((3.03030303030303)*x156*x157)));
//                                                                                    IkReal gconst11=((((2.77777777777778)*x156*x159))+(((-1.0)*x155*x158)));
//                                                                                    CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x163.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x164=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                    if (false)//if(!x164.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (((1.09090909090909)*(x164.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x164.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x163.value)+(((-1.0)*(IKasin(((1.09090909090909)*(x164.value))))))+j5)))), 6.28318530717959)));
                                                                                    if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
//                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j4eval[2];
//                                                                                            IkReal x165=pz*pz;
//                                                                                            CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x174.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x166=((1.0)*(x174.value));
//                                                                                            IkReal x167=x153;
                                                                                            if (false)//if((x167) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x168=IKabs(IKsqrt(x167));
//                                                                                            IkReal x175 = x167;
                                                                                            if (false)//if(IKabs(x175)==0)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x169=pow(x175,-0.5);
//                                                                                            CheckValue<IkReal> x176=IKPowWithIntegerCheck<IKFAST_REAL>(x168,-1);
                                                                                            if (false)//if(!x176.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x170=x176.value;
                                                                                            if (false)//if((((1.0)+(((-1.1900826446281)*(x170*x170))))) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x171=IKsqrt(((1.0)+(((-1.1900826446281)*(x170*x170)))));
//                                                                                            IkReal x172=(x169*x170);
//                                                                                            IkReal x173=(x169*x171);
//                                                                                            px=0;
//                                                                                            py=0;
//                                                                                            pp=x165;
//                                                                                            sj5=gconst10;
//                                                                                            cj5=gconst11;
                                                                                            if (false)//if( (((1.09090908694215)*x170)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x170)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j5=((3.14159265)+(((-1.0)*x166))+(IKasin(((1.09090908694215)*x170))));
                                                                                            if (false)//if( (((1.09090909090909)*x170)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x170)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal gconst9=((3.14159265358979)+(((-1.0)*x166))+(IKasin(((1.09090909090909)*x170))));
//                                                                                            IkReal gconst10=((((3.03030303030303)*pz*x172))+(((1.0)*x173)));
//                                                                                            IkReal gconst11=((((2.77777777777778)*pz*x173))+(((-1.09090909090909)*x172)));
//                                                                                            IkReal x177=pz*pz;
//                                                                                            j4eval[0]=((-1.0)+(((-7.71604938271605)*x177)));
//                                                                                            j4eval[1]=IKsign(((-324.0)+(((-2500.0)*x177))));
                                                                                            if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                                    bool j4valid[1]= {false};
//                                                                                                    _nj4 = 1;
//                                                                                                    IkReal x178=(gconst10*pz);
//                                                                                                    CheckValue<IkReal> x179=IKPowWithIntegerCheck<IKFAST_REAL>(((4.32)+(((3.96)*gconst11))+(((-11.0)*x178))),-1);
                                                                                                    if (false)//if(!x179.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x180=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((1100.0)*x178))+(((-396.0)*gconst11))),-1);
                                                                                                    if (false)//if(!x180.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                    if (false)//if( IKabs(((x179.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x180.value)*(((432.0)+(((-363.0)*(gconst10*gconst10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x179.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11))))))+IKsqr(((x180.value)*(((432.0)+(((-363.0)*(gconst10*gconst10)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j4array[0]=IKatan2(((x179.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11))))), ((x180.value)*(((432.0)+(((-363.0)*(gconst10*gconst10)))))));
//                                                                                                    sj4array[0]=IKsin(j4array[0]);
//                                                                                                    cj4array[0]=IKcos(j4array[0]);
                                                                                                    if (false)//if( j4array[0] > IKPI )
                                                                                                    {
//                                                                                                        j4array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j4array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j4array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j4valid[0] = true;
//                                                                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                                    {
                                                                                                        if (false)//if( !j4valid[ij4] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij4[0] = ij4;
//                                                                                                        _ij4[1] = -1;
//                                                                                                        for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                        {
                                                                                                            if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j4valid[iij4]=false;
//                                                                                                                _ij4[1] = iij4;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j4 = j4array[ij4];
//                                                                                                        cj4 = cj4array[ij4];
//                                                                                                        sj4 = sj4array[ij4];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x181=IKcos(j4);
//                                                                                                            IkReal x182=IKsin(j4);
//                                                                                                            IkReal x183=((0.33)*gconst10);
//                                                                                                            IkReal x184=((0.33)*gconst11);
//                                                                                                            IkReal x185=((0.36)*x182);
//                                                                                                            IkReal x186=((0.36)*x181);
//                                                                                                            IkReal x187=(pz*x182);
//                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x186))+(((-1.0)*x184))+x187);
//                                                                                                            evalcond[1]=((((-1.0)*x185))+(((-1.0)*x183))+(((-1.0)*pz*x181)));
//                                                                                                            evalcond[2]=((-0.1503)+(((0.72)*x187))+(((-1.0)*(pz*pz)))+(((-0.2592)*x181)));
//                                                                                                            evalcond[3]=((((-1.0)*x185))+pz+(((-1.0)*x182*x184))+((x181*x183)));
//                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x186))+(((-1.0)*x182*x183))+(((-1.0)*x181*x184)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                            bool j3valid[1]= {false};
//                                                                                                            _nj3 = 1;
//                                                                                                            j3array[0]=0;
//                                                                                                            sj3array[0]=IKsin(j3array[0]);
//                                                                                                            cj3array[0]=IKcos(j3array[0]);
                                                                                                            if (false)//if( j3array[0] > IKPI )
                                                                                                            {
//                                                                                                                j3array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j3array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j3array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j3valid[0] = true;
//                                                                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                            {
                                                                                                                if (false)//if( !j3valid[ij3] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij3[0] = ij3;
//                                                                                                                _ij3[1] = -1;
//                                                                                                                for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                                {
                                                                                                                    if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j3valid[iij3]=false;
//                                                                                                                        _ij3[1] = iij3;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j3 = j3array[ij3];
//                                                                                                                cj3 = cj3array[ij3];
//                                                                                                                sj3 = sj3array[ij3];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j3;
//                                                                                                                    vinfos[0].indices[0] = _ij3[0];
//                                                                                                                    vinfos[0].indices[1] = _ij3[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj3;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j4;
//                                                                                                                    vinfos[1].indices[0] = _ij4[0];
//                                                                                                                    vinfos[1].indices[1] = _ij4[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj4;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j5;
//                                                                                                                    vinfos[2].indices[0] = _ij5[0];
//                                                                                                                    vinfos[2].indices[1] = _ij5[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj5;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                                    bool j4valid[1]= {false};
//                                                                                                    _nj4 = 1;
//                                                                                                    IkReal x188=((825.0)*pz);
//                                                                                                    CheckValue<IkReal> x189 = IKatan2WithCheck(IkReal(((((297.0)*gconst10))+(((-1.0)*gconst11*x188))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst11))+((gconst10*x188)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x189.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x190=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                                    if (false)//if(!x190.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j4array[0]=((-1.5707963267949)+(x189.value)+(((1.5707963267949)*(x190.value))));
//                                                                                                    sj4array[0]=IKsin(j4array[0]);
//                                                                                                    cj4array[0]=IKcos(j4array[0]);
                                                                                                    if (false)//if( j4array[0] > IKPI )
                                                                                                    {
//                                                                                                        j4array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j4array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j4array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j4valid[0] = true;
//                                                                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                                                    {
                                                                                                        if (false)//if( !j4valid[ij4] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij4[0] = ij4;
//                                                                                                        _ij4[1] = -1;
//                                                                                                        for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                                                        {
                                                                                                            if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j4valid[iij4]=false;
//                                                                                                                _ij4[1] = iij4;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j4 = j4array[ij4];
//                                                                                                        cj4 = cj4array[ij4];
//                                                                                                        sj4 = sj4array[ij4];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x191=IKcos(j4);
//                                                                                                            IkReal x192=IKsin(j4);
//                                                                                                            IkReal x193=((0.33)*gconst10);
//                                                                                                            IkReal x194=((0.33)*gconst11);
//                                                                                                            IkReal x195=((0.36)*x192);
//                                                                                                            IkReal x196=((0.36)*x191);
//                                                                                                            IkReal x197=(pz*x192);
//                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x194))+(((-1.0)*x196))+x197);
//                                                                                                            evalcond[1]=((((-1.0)*x193))+(((-1.0)*x195))+(((-1.0)*pz*x191)));
//                                                                                                            evalcond[2]=((-0.1503)+(((0.72)*x197))+(((-1.0)*(pz*pz)))+(((-0.2592)*x191)));
//                                                                                                            evalcond[3]=((((-1.0)*x192*x194))+(((-1.0)*x195))+pz+((x191*x193)));
//                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x192*x193))+(((-1.0)*x191*x194))+(((-1.0)*x196)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                                                            bool j3valid[1]= {false};
//                                                                                                            _nj3 = 1;
//                                                                                                            j3array[0]=0;
//                                                                                                            sj3array[0]=IKsin(j3array[0]);
//                                                                                                            cj3array[0]=IKcos(j3array[0]);
                                                                                                            if (false)//if( j3array[0] > IKPI )
                                                                                                            {
//                                                                                                                j3array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j3array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j3array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j3valid[0] = true;
//                                                                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                                                            {
                                                                                                                if (false)//if( !j3valid[ij3] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij3[0] = ij3;
//                                                                                                                _ij3[1] = -1;
//                                                                                                                for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                                                {
                                                                                                                    if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j3valid[iij3]=false;
//                                                                                                                        _ij3[1] = iij3;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j3 = j3array[ij3];
//                                                                                                                cj3 = cj3array[ij3];
//                                                                                                                sj3 = sj3array[ij3];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j3;
//                                                                                                                    vinfos[0].indices[0] = _ij3[0];
//                                                                                                                    vinfos[0].indices[1] = _ij3[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj3;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j4;
//                                                                                                                    vinfos[1].indices[0] = _ij4[0];
//                                                                                                                    vinfos[1].indices[1] = _ij4[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj4;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j5;
//                                                                                                                    vinfos[2].indices[0] = _ij5[0];
//                                                                                                                    vinfos[2].indices[1] = _ij5[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj5;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if (false)//if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
//                                                                                            bgotonextstatement=false;
//                                                                                            continue; // branch miss [j3, j4]

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if( bgotonextstatement )
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                                    bool j4valid[1]= {false};
//                                                                    _nj4 = 1;
//                                                                    IkReal x198=((297.0)*sj5);
//                                                                    IkReal x199=((900.0)*pz);
//                                                                    IkReal x200=(cj5*pz);
//                                                                    IkReal x201=(x199+x198);
//                                                                    CheckValue<IkReal> x202=IKPowWithIntegerCheck<IKFAST_REAL>(((((-3300.0)*x200))+(((-3600.0)*pz))+(((-1188.0)*sj5))),-1);
                                                                    if (false)//if(!x202.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x203=IKPowWithIntegerCheck<IKFAST_REAL>(((((-1.0)*x201))+(((-825.0)*x200))),-1);
                                                                    if (false)//if(!x203.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((x202.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x203.value)*(((((272.25)*cj5*sj5))+x201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x202.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj5*cj5)))))))+IKsqr(((x203.value)*(((((272.25)*cj5*sj5))+x201))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j4array[0]=IKatan2(((x202.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj5*cj5)))))), ((x203.value)*(((((272.25)*cj5*sj5))+x201))));
//                                                                    sj4array[0]=IKsin(j4array[0]);
//                                                                    cj4array[0]=IKcos(j4array[0]);
                                                                    if (false)//if( j4array[0] > IKPI )
                                                                    {
//                                                                        j4array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j4array[0] < -IKPI )
                                                                    {
//                                                                        j4array[0]+=IK2PI;
                                                                    }
//                                                                    j4valid[0] = true;
//                                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                    {
                                                                        if (false)//if( !j4valid[ij4] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij4[0] = ij4;
//                                                                        _ij4[1] = -1;
//                                                                        for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                        {
                                                                            if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j4valid[iij4]=false;
//                                                                                _ij4[1] = iij4;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j4 = j4array[ij4];
//                                                                        cj4 = cj4array[ij4];
//                                                                        sj4 = sj4array[ij4];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x204=IKcos(j4);
//                                                                            IkReal x205=IKsin(j4);
//                                                                            IkReal x206=((0.33)*sj5);
//                                                                            IkReal x207=((0.33)*cj5);
//                                                                            IkReal x208=((0.36)*x205);
//                                                                            IkReal x209=((0.36)*x204);
//                                                                            IkReal x210=(pz*x205);
//                                                                            evalcond[0]=((-0.36)+(((-1.0)*x207))+(((-1.0)*x209))+x210);
//                                                                            evalcond[1]=((((-1.0)*x206))+(((-1.0)*x208))+(((-1.0)*pz*x204)));
//                                                                            evalcond[2]=((-0.1503)+(((-0.2592)*x204))+(((0.72)*x210))+(((-1.0)*(pz*pz))));
//                                                                            evalcond[3]=((((-1.0)*x208))+((x204*x206))+pz+(((-1.0)*x205*x207)));
//                                                                            evalcond[4]=((-0.36)+(((-1.0)*x204*x207))+(((-1.0)*x209))+(((-1.0)*x205*x206)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                                            bool j3valid[1]= {false};
//                                                                            _nj3 = 1;
//                                                                            j3array[0]=0;
//                                                                            sj3array[0]=IKsin(j3array[0]);
//                                                                            cj3array[0]=IKcos(j3array[0]);
                                                                            if (false)//if( j3array[0] > IKPI )
                                                                            {
//                                                                                j3array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j3array[0] < -IKPI )
                                                                            {
//                                                                                j3array[0]+=IK2PI;
                                                                            }
//                                                                            j3valid[0] = true;
//                                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                            {
                                                                                if (false)//if( !j3valid[ij3] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij3[0] = ij3;
//                                                                                _ij3[1] = -1;
//                                                                                for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                                {
                                                                                    if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j3valid[iij3]=false;
//                                                                                        _ij3[1] = iij3;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j3 = j3array[ij3];
//                                                                                cj3 = cj3array[ij3];
//                                                                                sj3 = sj3array[ij3];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j3;
//                                                                                    vinfos[0].indices[0] = _ij3[0];
//                                                                                    vinfos[0].indices[1] = _ij3[1];
//                                                                                    vinfos[0].maxsolutions = _nj3;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j4;
//                                                                                    vinfos[1].indices[0] = _ij4[0];
//                                                                                    vinfos[1].indices[1] = _ij4[1];
//                                                                                    vinfos[1].maxsolutions = _nj4;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j5;
//                                                                                    vinfos[2].indices[0] = _ij5[0];
//                                                                                    vinfos[2].indices[1] = _ij5[1];
//                                                                                    vinfos[2].maxsolutions = _nj5;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                            bool j4valid[1]= {false};
//                                                            _nj4 = 1;
//                                                            IkReal x211=(pz*sj5);
//                                                            CheckValue<IkReal> x212=IKPowWithIntegerCheck<IKFAST_REAL>(((4.32)+(((3.96)*cj5))+(((-11.0)*x211))),-1);
                                                            if (false)//if(!x212.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            CheckValue<IkReal> x213=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((-396.0)*cj5))+(((1100.0)*x211))),-1);
                                                            if (false)//if(!x213.valid)
                                                            {
//                                                                continue;
                                                            }
                                                            if (false)//if( IKabs(((x212.value)*(((((-3.63)*cj5*sj5))+(((12.0)*pz))+(((-3.96)*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x213.value)*(((69.0)+(((363.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x212.value)*(((((-3.63)*cj5*sj5))+(((12.0)*pz))+(((-3.96)*sj5))))))+IKsqr(((x213.value)*(((69.0)+(((363.0)*(cj5*cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                            {
//                                                                continue;
                                                            }
//                                                            j4array[0]=IKatan2(((x212.value)*(((((-3.63)*cj5*sj5))+(((12.0)*pz))+(((-3.96)*sj5))))), ((x213.value)*(((69.0)+(((363.0)*(cj5*cj5)))))));
//                                                            sj4array[0]=IKsin(j4array[0]);
//                                                            cj4array[0]=IKcos(j4array[0]);
                                                            if (false)//if( j4array[0] > IKPI )
                                                            {
//                                                                j4array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j4array[0] < -IKPI )
                                                            {
//                                                                j4array[0]+=IK2PI;
                                                            }
//                                                            j4valid[0] = true;
//                                                            for(int ij4 = 0; ij4 < 1; ++ij4)
                                                            {
                                                                if (false)//if( !j4valid[ij4] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij4[0] = ij4;
//                                                                _ij4[1] = -1;
//                                                                for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                {
                                                                    if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j4valid[iij4]=false;
//                                                                        _ij4[1] = iij4;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j4 = j4array[ij4];
//                                                                cj4 = cj4array[ij4];
//                                                                sj4 = sj4array[ij4];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x214=IKcos(j4);
//                                                                    IkReal x215=IKsin(j4);
//                                                                    IkReal x216=((0.33)*sj5);
//                                                                    IkReal x217=((0.33)*cj5);
//                                                                    IkReal x218=((0.36)*x215);
//                                                                    IkReal x219=((0.36)*x214);
//                                                                    IkReal x220=(pz*x215);
//                                                                    evalcond[0]=((-0.36)+x220+(((-1.0)*x219))+(((-1.0)*x217)));
//                                                                    evalcond[1]=((((-1.0)*pz*x214))+(((-1.0)*x218))+(((-1.0)*x216)));
//                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x214))+(((0.72)*x220))+(((-1.0)*(pz*pz))));
//                                                                    evalcond[3]=(((x214*x216))+pz+(((-1.0)*x218))+(((-1.0)*x215*x217)));
//                                                                    evalcond[4]=((-0.36)+(((-1.0)*x214*x217))+(((-1.0)*x219))+(((-1.0)*x215*x216)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j3array[1], cj3array[1], sj3array[1];
                                                                    bool j3valid[1]= {false};
//                                                                    _nj3 = 1;
//                                                                    j3array[0]=0;
//                                                                    sj3array[0]=IKsin(j3array[0]);
//                                                                    cj3array[0]=IKcos(j3array[0]);
                                                                    if (false)//if( j3array[0] > IKPI )
                                                                    {
//                                                                        j3array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j3array[0] < -IKPI )
                                                                    {
//                                                                        j3array[0]+=IK2PI;
                                                                    }
//                                                                    j3valid[0] = true;
//                                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                    {
                                                                        if (false)//if( !j3valid[ij3] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij3[0] = ij3;
//                                                                        _ij3[1] = -1;
//                                                                        for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                        {
                                                                            if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j3valid[iij3]=false;
//                                                                                _ij3[1] = iij3;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j3 = j3array[ij3];
//                                                                        cj3 = cj3array[ij3];
//                                                                        sj3 = sj3array[ij3];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j3;
//                                                                            vinfos[0].indices[0] = _ij3[0];
//                                                                            vinfos[0].indices[1] = _ij3[1];
//                                                                            vinfos[0].maxsolutions = _nj3;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j4;
//                                                                            vinfos[1].indices[0] = _ij4[0];
//                                                                            vinfos[1].indices[1] = _ij4[1];
//                                                                            vinfos[1].maxsolutions = _nj4;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j5;
//                                                                            vinfos[2].indices[0] = _ij5[0];
//                                                                            vinfos[2].indices[1] = _ij5[1];
//                                                                            vinfos[2].maxsolutions = _nj5;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                    bool j4valid[1]= {false};
//                                                    _nj4 = 1;
//                                                    IkReal x221=((825.0)*pz);
//                                                    CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x221))+(((297.0)*sj5))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*cj5))+((sj5*x221)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if (false)//if(!x222.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    CheckValue<IkReal> x223=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                    if (false)//if(!x223.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    j4array[0]=((-1.5707963267949)+(x222.value)+(((1.5707963267949)*(x223.value))));
//                                                    sj4array[0]=IKsin(j4array[0]);
//                                                    cj4array[0]=IKcos(j4array[0]);
                                                    if (false)//if( j4array[0] > IKPI )
                                                    {
//                                                        j4array[0]-=IK2PI;
                                                    }
                                                    else if (false)//else if( j4array[0] < -IKPI )
                                                    {
//                                                        j4array[0]+=IK2PI;
                                                    }
//                                                    j4valid[0] = true;
//                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                    {
                                                        if (false)//if( !j4valid[ij4] )
                                                        {
//                                                            continue;
                                                        }
//                                                        _ij4[0] = ij4;
//                                                        _ij4[1] = -1;
//                                                        for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                        {
                                                            if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                            {
//                                                                j4valid[iij4]=false;
//                                                                _ij4[1] = iij4;
//                                                                break;
                                                            }
                                                        }
//                                                        j4 = j4array[ij4];
//                                                        cj4 = cj4array[ij4];
//                                                        sj4 = sj4array[ij4];
                                                        {
                                                            IkReal evalcond[5];
//                                                            IkReal x224=IKcos(j4);
//                                                            IkReal x225=IKsin(j4);
//                                                            IkReal x226=((0.33)*sj5);
//                                                            IkReal x227=((0.33)*cj5);
//                                                            IkReal x228=((0.36)*x225);
//                                                            IkReal x229=((0.36)*x224);
//                                                            IkReal x230=(pz*x225);
//                                                            evalcond[0]=((-0.36)+x230+(((-1.0)*x229))+(((-1.0)*x227)));
//                                                            evalcond[1]=((((-1.0)*pz*x224))+(((-1.0)*x228))+(((-1.0)*x226)));
//                                                            evalcond[2]=((-0.1503)+(((0.72)*x230))+(((-0.2592)*x224))+(((-1.0)*(pz*pz))));
//                                                            evalcond[3]=(((x224*x226))+(((-1.0)*x225*x227))+pz+(((-1.0)*x228)));
//                                                            evalcond[4]=((-0.36)+(((-1.0)*x224*x227))+(((-1.0)*x225*x226))+(((-1.0)*x229)));
                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
//                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j3array[1], cj3array[1], sj3array[1];
                                                            bool j3valid[1]= {false};
//                                                            _nj3 = 1;
//                                                            j3array[0]=0;
//                                                            sj3array[0]=IKsin(j3array[0]);
//                                                            cj3array[0]=IKcos(j3array[0]);
                                                            if (false)//if( j3array[0] > IKPI )
                                                            {
//                                                                j3array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j3array[0] < -IKPI )
                                                            {
//                                                                j3array[0]+=IK2PI;
                                                            }
//                                                            j3valid[0] = true;
//                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                            {
                                                                if (false)//if( !j3valid[ij3] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij3[0] = ij3;
//                                                                _ij3[1] = -1;
//                                                                for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                {
                                                                    if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j3valid[iij3]=false;
//                                                                        _ij3[1] = iij3;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j3 = j3array[ij3];
//                                                                cj3 = cj3array[ij3];
//                                                                sj3 = sj3array[ij3];

                                                                {
//                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                    vinfos[0].jointtype = 1;
//                                                                    vinfos[0].foffset = j3;
//                                                                    vinfos[0].indices[0] = _ij3[0];
//                                                                    vinfos[0].indices[1] = _ij3[1];
//                                                                    vinfos[0].maxsolutions = _nj3;
//                                                                    vinfos[1].jointtype = 1;
//                                                                    vinfos[1].foffset = j4;
//                                                                    vinfos[1].indices[0] = _ij4[0];
//                                                                    vinfos[1].indices[1] = _ij4[1];
//                                                                    vinfos[1].maxsolutions = _nj4;
//                                                                    vinfos[2].jointtype = 1;
//                                                                    vinfos[2].foffset = j5;
//                                                                    vinfos[2].indices[0] = _ij5[0];
//                                                                    vinfos[2].indices[1] = _ij5[1];
//                                                                    vinfos[2].maxsolutions = _nj5;
//                                                                    int vfree[0];
//                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if (false)//if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
//                                    bgotonextstatement=false;
//                                    continue; // branch miss [j3, j4, j5]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j3array[2], cj3array[2], sj3array[2];
                        bool j3valid[2]= {false};
                        _nj3 = 2;
                        CheckValue<IkReal> x232 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x232.valid)
                        {
//                            continue;
                        }
                        IkReal x231=x232.value;
                        j3array[0]=((-1.0)*x231);
                        sj3array[0]=IKsin(j3array[0]);
                        cj3array[0]=IKcos(j3array[0]);
                        j3array[1]=((3.14159265358979)+(((-1.0)*x231)));
                        sj3array[1]=IKsin(j3array[1]);
                        cj3array[1]=IKcos(j3array[1]);
                        if( j3array[0] > IKPI )
                        {
//                            j3array[0]-=IK2PI;
                        }
                        else if( j3array[0] < -IKPI )
                        {
//                            j3array[0]+=IK2PI;
                        }
                        j3valid[0] = true;
                        if( j3array[1] > IKPI )
                        {
                            j3array[1]-=IK2PI;
                        }
                        else if( j3array[1] < -IKPI )
                        {
//                            j3array[1]+=IK2PI;
                        }
                        j3valid[1] = true;
                        for(int ij3 = 0; ij3 < 2; ++ij3)
                        {
                            if( !j3valid[ij3] )
                            {
//                                continue;
                            }
                            _ij3[0] = ij3;
                            _ij3[1] = -1;
                            for(int iij3 = ij3+1; iij3 < 2; ++iij3)
                            {
                                if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                {
//                                    j3valid[iij3]=false;
//                                    _ij3[1] = iij3;
//                                    break;
                                }
                            }
                            j3 = j3array[ij3];
                            cj3 = cj3array[ij3];
                            sj3 = sj3array[ij3];

                            {
                                IkReal j5array[2], cj5array[2], sj5array[2];
                                bool j5valid[2]= {false};
                                _nj5 = 2;
                                cj5array[0]=((-0.458333333333333)+(((3.03030303030303)*py*sj3))+(((4.20875420875421)*(pz*pz)))+(((4.20875420875421)*(py*py)))+(((4.20875420875421)*(px*px)))+(((3.03030303030303)*cj3*px)));
                                if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j5valid[0] = j5valid[1] = true;
                                    j5array[0] = IKacos(cj5array[0]);
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[1] = cj5array[0];
                                    j5array[1] = -j5array[0];
                                    sj5array[1] = -sj5array[0];
                                }
                                else if( isnan(cj5array[0]) )
                                {
                                    // probably any value will work
//                                    j5valid[0] = true;
//                                    cj5array[0] = 1;
//                                    sj5array[0] = 0;
//                                    j5array[0] = 0;
                                }
                                for(int ij5 = 0; ij5 < 2; ++ij5)
                                {
                                    if( !j5valid[ij5] )
                                    {
                                        continue;
                                    }
                                    _ij5[0] = ij5;
                                    _ij5[1] = -1;
                                    for(int iij5 = ij5+1; iij5 < 2; ++iij5)
                                    {
                                        if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j5valid[iij5]=false;
//                                            _ij5[1] = iij5;
//                                            break;
                                        }
                                    }
                                    j5 = j5array[ij5];
                                    cj5 = cj5array[ij5];
                                    sj5 = sj5array[ij5];

                                    {
                                        IkReal j4eval[3];
                                        IkReal x233=(py*sj3);
                                        IkReal x234=(cj3*px);
                                        IkReal x235=((3300.0)*pz);
                                        IkReal x236=((3300.0)*sj5);
                                        IkReal x237=((3300.0)*cj5);
                                        j4eval[0]=((1.00378787878788)+cj5);
                                        j4eval[1]=((IKabs(((((-1.0)*x233*x236))+(((3600.0)*pz))+((cj5*x235))+(((-1188.0)*sj5))+(((-1.0)*x234*x236)))))+(IKabs(((-1296.0)+(((-1.0)*x233*x237))+(((-3600.0)*x234))+(((-3600.0)*x233))+(((-1188.0)*cj5))+(((-1.0)*sj5*x235))+(((-1.0)*x234*x237))))));
                                        j4eval[2]=IKsign(((2385.0)+(((2376.0)*cj5))));
                                        if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j4eval[3];
//                                                IkReal x238=(cj3*px);
//                                                IkReal x239=((100.0)*pz);
//                                                IkReal x240=((2.77777777777778)*cj5);
//                                                IkReal x241=(py*sj3);
//                                                IkReal x242=((33.0)*cj5);
//                                                IkReal x243=(pz*sj5);
//                                                j4eval[0]=((1.09090909090909)+((x240*x241))+cj5+((x238*x240))+(((-2.77777777777778)*x243))+(((3.03030303030303)*x241))+(((3.03030303030303)*x238)));
//                                                j4eval[1]=((IKabs(((-12.96)+(((-10.89)*(cj5*cj5)))+((pz*x239))+(((-23.76)*cj5)))))+(IKabs(((((-11.88)*sj5))+((x239*x241))+((x238*x239))+(((36.0)*pz))+(((-10.89)*cj5*sj5))))));
//                                                j4eval[2]=IKsign(((12.96)+(((36.0)*x241))+(((11.88)*cj5))+((x238*x242))+(((-33.0)*x243))+(((36.0)*x238))+((x241*x242))));
                                                if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j4eval[3];
//                                                        IkReal x244=cj3*cj3;
//                                                        IkReal x245=py*py;
//                                                        IkReal x246=pz*pz;
//                                                        IkReal x247=px*px;
//                                                        IkReal x248=(cj3*px);
//                                                        IkReal x249=((33.0)*sj5);
//                                                        IkReal x250=(py*sj3);
//                                                        IkReal x251=((33.0)*cj5);
//                                                        IkReal x252=((7.71604938271605)*x245);
//                                                        IkReal x253=((100.0)*x245);
//                                                        IkReal x254=(x244*x247);
//                                                        j4eval[0]=((1.0)+(((7.71604938271605)*x246))+(((-1.0)*x244*x252))+(((5.55555555555556)*x248))+(((15.4320987654321)*x248*x250))+x252+(((5.55555555555556)*x250))+(((7.71604938271605)*x254)));
//                                                        j4eval[1]=IKsign(((12.96)+(((200.0)*x248*x250))+(((72.0)*x248))+(((-1.0)*x244*x253))+x253+(((100.0)*x254))+(((100.0)*x246))+(((72.0)*x250))));
//                                                        j4eval[2]=((IKabs(((-12.96)+(((-1.0)*pz*x249))+(((-1.0)*x250*x251))+(((-1.0)*x248*x251))+(((-36.0)*x250))+(((-11.88)*cj5))+(((-36.0)*x248)))))+(IKabs(((((-1.0)*x248*x249))+(((-11.88)*sj5))+((pz*x251))+(((-1.0)*x249*x250))+(((36.0)*pz))))));
                                                        if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j4]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                bool j4valid[1]= {false};
//                                                                _nj4 = 1;
//                                                                IkReal x255=cj3*cj3;
//                                                                IkReal x256=py*py;
//                                                                IkReal x257=((33.0)*sj5);
//                                                                IkReal x258=(cj3*px);
//                                                                IkReal x259=(py*sj3);
//                                                                IkReal x260=((33.0)*cj5);
//                                                                IkReal x261=((100.0)*x255);
//                                                                CheckValue<IkReal> x262=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((12.96)+(((100.0)*(pz*pz)))+(((100.0)*x256))+((x261*(px*px)))+(((-1.0)*x256*x261))+(((200.0)*x258*x259))+(((72.0)*x258))+(((72.0)*x259)))),-1);
                                                                if (false)//if(!x262.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x263 = IKatan2WithCheck(IkReal(((((-11.88)*sj5))+(((-1.0)*x257*x259))+(((-1.0)*x257*x258))+((pz*x260))+(((36.0)*pz)))),IkReal(((-12.96)+(((-1.0)*x258*x260))+(((-1.0)*x259*x260))+(((-1.0)*pz*x257))+(((-36.0)*x259))+(((-36.0)*x258))+(((-11.88)*cj5)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x263.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x262.value)))+(x263.value));
//                                                                sj4array[0]=IKsin(j4array[0]);
//                                                                cj4array[0]=IKcos(j4array[0]);
                                                                if (false)//if( j4array[0] > IKPI )
                                                                {
//                                                                    j4array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j4array[0] < -IKPI )
                                                                {
//                                                                    j4array[0]+=IK2PI;
                                                                }
//                                                                j4valid[0] = true;
//                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                {
                                                                    if (false)//if( !j4valid[ij4] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij4[0] = ij4;
//                                                                    _ij4[1] = -1;
//                                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                    {
                                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j4valid[iij4]=false;
//                                                                            _ij4[1] = iij4;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j4 = j4array[ij4];
//                                                                    cj4 = cj4array[ij4];
//                                                                    sj4 = sj4array[ij4];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x264=IKsin(j4);
//                                                                        IkReal x265=IKcos(j4);
//                                                                        IkReal x266=((0.33)*cj5);
//                                                                        IkReal x267=((0.33)*sj5);
//                                                                        IkReal x268=((0.36)*x265);
//                                                                        IkReal x269=((0.36)*x264);
//                                                                        IkReal x270=((0.33)*x265);
//                                                                        IkReal x271=((1.0)*cj3*px);
//                                                                        IkReal x272=(pz*x264);
//                                                                        IkReal x273=((1.0)*py*sj3);
//                                                                        IkReal x274=((0.72)*cj3*px);
//                                                                        IkReal x275=(py*sj3*x265);
//                                                                        evalcond[0]=(pz+(((-1.0)*x269))+(((-1.0)*x264*x266))+((x265*x267)));
//                                                                        evalcond[1]=((-0.36)+(((-1.0)*x271))+(((-1.0)*x273))+(((-1.0)*x265*x266))+(((-1.0)*x268))+(((-1.0)*x264*x267)));
//                                                                        evalcond[2]=((-0.36)+x272+(((-1.0)*x265*x273))+(((-1.0)*x265*x271))+(((-1.0)*x266))+(((-1.0)*x268)));
//                                                                        evalcond[3]=((((-1.0)*pz*x265))+(((-1.0)*x267))+(((-1.0)*x269))+(((-1.0)*x264*x271))+(((-1.0)*x264*x273)));
//                                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.72)*x275))+(((-1.0)*x265*x274))+(((-0.72)*py*sj3))+(((-1.0)*(pz*pz)))+(((-0.2592)*x265))+(((-1.0)*x274))+(((-1.0)*(py*py)))+(((0.72)*x272)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j3;
//                                                                        vinfos[0].indices[0] = _ij3[0];
//                                                                        vinfos[0].indices[1] = _ij3[1];
//                                                                        vinfos[0].maxsolutions = _nj3;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j4;
//                                                                        vinfos[1].indices[0] = _ij4[0];
//                                                                        vinfos[1].indices[1] = _ij4[1];
//                                                                        vinfos[1].maxsolutions = _nj4;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j5;
//                                                                        vinfos[2].indices[0] = _ij5[0];
//                                                                        vinfos[2].indices[1] = _ij5[1];
//                                                                        vinfos[2].maxsolutions = _nj5;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                        bool j4valid[1]= {false};
//                                                        _nj4 = 1;
//                                                        IkReal x276=(cj3*px);
//                                                        IkReal x277=((100.0)*pz);
//                                                        IkReal x278=(py*sj3);
//                                                        IkReal x279=((33.0)*cj5);
//                                                        CheckValue<IkReal> x280=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((12.96)+(((36.0)*x276))+(((36.0)*x278))+(((11.88)*cj5))+(((-33.0)*pz*sj5))+((x278*x279))+((x276*x279)))),-1);
                                                        if (false)//if(!x280.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x281 = IKatan2WithCheck(IkReal(((((-11.88)*sj5))+((x277*x278))+(((36.0)*pz))+((x276*x277))+(((-10.89)*cj5*sj5)))),IkReal(((-12.96)+(((-10.89)*(cj5*cj5)))+(((-23.76)*cj5))+((pz*x277)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x281.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x280.value)))+(x281.value));
//                                                        sj4array[0]=IKsin(j4array[0]);
//                                                        cj4array[0]=IKcos(j4array[0]);
                                                        if (false)//if( j4array[0] > IKPI )
                                                        {
//                                                            j4array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j4array[0] < -IKPI )
                                                        {
//                                                            j4array[0]+=IK2PI;
                                                        }
//                                                        j4valid[0] = true;
//                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                        {
                                                            if (false)//if( !j4valid[ij4] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij4[0] = ij4;
//                                                            _ij4[1] = -1;
//                                                            for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                            {
                                                                if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j4valid[iij4]=false;
//                                                                    _ij4[1] = iij4;
//                                                                    break;
                                                                }
                                                            }
//                                                            j4 = j4array[ij4];
//                                                            cj4 = cj4array[ij4];
//                                                            sj4 = sj4array[ij4];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x282=IKsin(j4);
//                                                                IkReal x283=IKcos(j4);
//                                                                IkReal x284=((0.33)*cj5);
//                                                                IkReal x285=((0.33)*sj5);
//                                                                IkReal x286=((0.36)*x283);
//                                                                IkReal x287=((0.36)*x282);
//                                                                IkReal x288=((0.33)*x283);
//                                                                IkReal x289=((1.0)*cj3*px);
//                                                                IkReal x290=(pz*x282);
//                                                                IkReal x291=((1.0)*py*sj3);
//                                                                IkReal x292=((0.72)*cj3*px);
//                                                                IkReal x293=(py*sj3*x283);
//                                                                evalcond[0]=((((-1.0)*x282*x284))+pz+(((-1.0)*x287))+((x283*x285)));
//                                                                evalcond[1]=((-0.36)+(((-1.0)*x291))+(((-1.0)*x282*x285))+(((-1.0)*x286))+(((-1.0)*x289))+(((-1.0)*x283*x284)));
//                                                                evalcond[2]=((-0.36)+x290+(((-1.0)*x283*x291))+(((-1.0)*x284))+(((-1.0)*x286))+(((-1.0)*x283*x289)));
//                                                                evalcond[3]=((((-1.0)*pz*x283))+(((-1.0)*x282*x289))+(((-1.0)*x285))+(((-1.0)*x287))+(((-1.0)*x282*x291)));
//                                                                evalcond[4]=((-0.1503)+(((-0.2592)*x283))+(((0.72)*x290))+(((-1.0)*(px*px)))+(((-1.0)*x292))+(((-1.0)*x283*x292))+(((-0.72)*py*sj3))+(((-1.0)*(pz*pz)))+(((-0.72)*x293))+(((-1.0)*(py*py))));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j3;
//                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                vinfos[0].maxsolutions = _nj3;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j4;
//                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                vinfos[1].maxsolutions = _nj4;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j5;
//                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                vinfos[2].maxsolutions = _nj5;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                bool j4valid[1]= {false};
                                                _nj4 = 1;
                                                IkReal x294=(py*sj3);
                                                IkReal x295=((3300.0)*cj5);
                                                IkReal x296=(cj3*px);
                                                IkReal x297=((3300.0)*sj5);
                                                CheckValue<IkReal> x298=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((2385.0)+(((2376.0)*cj5)))),-1);
                                                if(!x298.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(((((3600.0)*pz))+(((-1.0)*x296*x297))+((pz*x295))+(((-1188.0)*sj5))+(((-1.0)*x294*x297)))),IkReal(((-1296.0)+(((-1.0)*pz*x297))+(((-1188.0)*cj5))+(((-3600.0)*x296))+(((-3600.0)*x294))+(((-1.0)*x295*x296))+(((-1.0)*x294*x295)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x299.valid)
                                                {
//                                                    continue;
                                                }
                                                j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x298.value)))+(x299.value));
                                                sj4array[0]=IKsin(j4array[0]);
                                                cj4array[0]=IKcos(j4array[0]);
                                                if( j4array[0] > IKPI )
                                                {
//                                                    j4array[0]-=IK2PI;
                                                }
                                                else if( j4array[0] < -IKPI )
                                                {
//                                                    j4array[0]+=IK2PI;
                                                }
                                                j4valid[0] = true;
                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                {
                                                    if( !j4valid[ij4] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij4[0] = ij4;
                                                    _ij4[1] = -1;
                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                    {
                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j4valid[iij4]=false;
//                                                            _ij4[1] = iij4;
//                                                            break;
                                                        }
                                                    }
                                                    j4 = j4array[ij4];
                                                    cj4 = cj4array[ij4];
                                                    sj4 = sj4array[ij4];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x300=IKsin(j4);
                                                        IkReal x301=IKcos(j4);
                                                        IkReal x302=((0.33)*cj5);
                                                        IkReal x303=((0.33)*sj5);
                                                        IkReal x304=((0.36)*x301);
                                                        IkReal x305=((0.36)*x300);
                                                        IkReal x306=((0.33)*x301);
                                                        IkReal x307=((1.0)*cj3*px);
                                                        IkReal x308=(pz*x300);
                                                        IkReal x309=((1.0)*py*sj3);
                                                        IkReal x310=((0.72)*cj3*px);
                                                        IkReal x311=(py*sj3*x301);
                                                        evalcond[0]=(((x301*x303))+pz+(((-1.0)*x300*x302))+(((-1.0)*x305)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x301*x302))+(((-1.0)*x300*x303))+(((-1.0)*x307))+(((-1.0)*x309))+(((-1.0)*x304)));
                                                        evalcond[2]=((-0.36)+(((-1.0)*x301*x309))+(((-1.0)*x301*x307))+x308+(((-1.0)*x302))+(((-1.0)*x304)));
                                                        evalcond[3]=((((-1.0)*pz*x301))+(((-1.0)*x300*x307))+(((-1.0)*x300*x309))+(((-1.0)*x303))+(((-1.0)*x305)));
                                                        evalcond[4]=((-0.1503)+(((0.72)*x308))+(((-1.0)*(px*px)))+(((-0.72)*x311))+(((-1.0)*x310))+(((-0.2592)*x301))+(((-0.72)*py*sj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*x301*x310)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j3;
                                                        vinfos[0].indices[0] = _ij3[0];
                                                        vinfos[0].indices[1] = _ij3[1];
                                                        vinfos[0].maxsolutions = _nj3;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j4;
                                                        vinfos[1].indices[0] = _ij4[0];
                                                        vinfos[1].indices[1] = _ij4[1];
                                                        vinfos[1].maxsolutions = _nj4;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j5;
                                                        vinfos[2].indices[0] = _ij5[0];
                                                        vinfos[2].indices[1] = _ij5[1];
                                                        vinfos[2].maxsolutions = _nj5;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Hunker (f7071dcf5459c249fade087ece139e54)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
