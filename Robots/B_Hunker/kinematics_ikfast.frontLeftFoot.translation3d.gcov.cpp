#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL float
#define IKFAST_NAMESPACE kinematics_ikfast_frontLeftFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-26 16:18:17.094139
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return float(-IKPI_2);
    }
    else if (false)//else if( f >= 1 )
    {
//        return float(IKPI_2);
    }
//    return asinf(f);
}
inline double IKasin(double f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if (false)//else if( f >= 1 )
    {
//        return IKPI_2;
    }
//    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return float(IKPI);
    }
    else if( f >= 1 )
    {
//        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if (false)//if( f <= 0.0f )
    {
//        return 0.0f;
    }
//    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if (false)//if( f <= 0.0 )
    {
//        return 0.0;
    }
//    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKsin(j[0]);
    x3=IKsin(j[1]);
    x4=IKsin(j[2]);
    x5=IKcos(j[2]);
    x6=((0.24)*x4);
    x7=((0.36)*x0);
    x8=((0.36)*x2);
    x9=((0.24)*x1*x5);
    eetrans[0]=((0.36)+((x0*x9))+((x1*x7))+((x0*x3*x6))+x7);
    eetrans[1]=(((x1*x8))+x8+((x2*x3*x6))+((x2*x9)));
    eetrans[2]=((0.15)+(((-0.36)*x3))+((x1*x6))+(((-0.24)*x3*x5)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j6=numeric_limits<IkReal>::quiet_NaN();
        _ij6[0] = -1;
        _ij6[1] = -1;
        _nj6 = -1;
        j7=numeric_limits<IkReal>::quiet_NaN();
        _ij7[0] = -1;
        _ij7[1] = -1;
        _nj7 = -1;
        j8=numeric_limits<IkReal>::quiet_NaN();
        _ij8[0] = -1;
        _ij8[1] = -1;
        _nj8 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((-0.36)+px);
            new_py=py;
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j6eval[1];
                j6eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j6eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
//                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
//                                bgotonextstatement=false;
                                {
                                    IkReal j8array[2], cj8array[2], sj8array[2];
                                    bool j8valid[2]= {false};
//                                    _nj8 = 2;
//                                    cj8array[0]=((-0.333333333333333)+(((5.78703703703704)*(pz*pz))));
                                    if (false)//if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
//                                        j8valid[0] = j8valid[1] = true;
//                                        j8array[0] = IKacos(cj8array[0]);
//                                        sj8array[0] = IKsin(j8array[0]);
//                                        cj8array[1] = cj8array[0];
//                                        j8array[1] = -j8array[0];
//                                        sj8array[1] = -sj8array[0];
                                    }
                                    else if (false)//else if( isnan(cj8array[0]) )
                                    {
                                        // probably any value will work
//                                        j8valid[0] = true;
//                                        cj8array[0] = 1;
//                                        sj8array[0] = 0;
//                                        j8array[0] = 0;
                                    }
//                                    for(int ij8 = 0; ij8 < 2; ++ij8)
                                    {
                                        if (false)//if( !j8valid[ij8] )
                                        {
//                                            continue;
                                        }
//                                        _ij8[0] = ij8;
//                                        _ij8[1] = -1;
//                                        for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                                        {
                                            if (false)//if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                                            {
//                                                j8valid[iij8]=false;
//                                                _ij8[1] = iij8;
//                                                break;
                                            }
                                        }
//                                        j8 = j8array[ij8];
//                                        cj8 = cj8array[ij8];
//                                        sj8 = sj8array[ij8];

                                        {
                                            IkReal j7eval[3];
//                                            px=0;
//                                            py=0;
//                                            pp=pz*pz;
//                                            IkReal x10=pz*pz;
//                                            IkReal x11=((150.0)*pz);
//                                            j7eval[0]=((1.0)+(((7.71604938271605)*x10)));
//                                            j7eval[1]=IKsign(((81.0)+(((625.0)*x10))));
//                                            j7eval[2]=((IKabs(((((-54.0)*sj8))+(((-1.0)*cj8*x11))+(((-225.0)*pz)))))+(IKabs(((-81.0)+((sj8*x11))+(((-54.0)*cj8))))));
                                            if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j7eval[3];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    IkReal x12=((54.0)*sj8);
//                                                    IkReal x13=((225.0)*pz);
//                                                    IkReal x14=(cj8*pz);
//                                                    j7eval[0]=(sj8+(((-4.16666666666667)*pz))+(((-2.77777777777778)*x14)));
//                                                    j7eval[1]=((IKabs(((-36.0)+(((625.0)*(pz*pz)))+(((36.0)*(cj8*cj8))))))+(IKabs(((((-1.0)*x12))+(((-36.0)*cj8*sj8))+x13))));
//                                                    j7eval[2]=IKsign(((((-1.0)*x13))+x12+(((-150.0)*x14))));
                                                    if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j7eval[1];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j7eval[0]=((-1.5)+(((-2.77777777777778)*pz*sj8))+(((-1.0)*cj8)));
                                                            if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
//                                                                        IkReal x15=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                        if (false)//if((x15) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x16=IKabs(IKsqrt(x15));
//                                                                        IkReal x22 = x15;
                                                                        if (false)//if(IKabs(x22)==0)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x17=pow(x22,-0.5);
//                                                                        CheckValue<IkReal> x23=IKPowWithIntegerCheck<IKFAST_REAL>(x16,-1);
                                                                        if (false)//if(!x23.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x18=x23.value;
//                                                                        IkReal x19=((1.5)*x18);
                                                                        if (false)//if((((1.0)+(((-2.25)*(x18*x18))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x20=IKsqrt(((1.0)+(((-2.25)*(x18*x18)))));
//                                                                        IkReal x21=(x17*x20);
                                                                        if (false)//if( (x19) < -1-IKFAST_SINCOS_THRESH || (x19) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x24.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal gconst0=((IKasin(x19))+(((-1.0)*(x24.value))));
//                                                                        IkReal gconst1=((((-4.16666666666667)*pz*x17*x18))+x21);
//                                                                        IkReal gconst2=((((-2.77777777777778)*pz*x21))+(((-1.0)*x17*x19)));
                                                                        if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x25=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if (false)//if(!x25.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((1.5)*(x25.value))) < -1-IKFAST_SINCOS_THRESH || (((1.5)*(x25.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x26 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x26.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((1.5)*(x25.value))))))+(x26.value)+j8)))), 6.28318530717959)));
                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
//                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j7eval[2];
//                                                                                IkReal x27=pz*pz;
//                                                                                IkReal x28=x15;
                                                                                if (false)//if((x28) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x29=IKabs(IKsqrt(x28));
//                                                                                IkReal x36 = x28;
                                                                                if (false)//if(IKabs(x36)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x30=pow(x36,-0.5);
//                                                                                CheckValue<IkReal> x37=IKPowWithIntegerCheck<IKFAST_REAL>(x29,-1);
                                                                                if (false)//if(!x37.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x31=x37.value;
//                                                                                IkReal x32=((1.5)*x31);
                                                                                if (false)//if((((1.0)+(((-2.25)*(x31*x31))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x33=IKsqrt(((1.0)+(((-2.25)*(x31*x31)))));
//                                                                                CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x38.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (x32) < -1-IKFAST_SINCOS_THRESH || (x32) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x34=((((-1.0)*(x38.value)))+(IKasin(x32)));
//                                                                                IkReal x35=(x30*x33);
//                                                                                px=0;
//                                                                                py=0;
//                                                                                pp=x27;
//                                                                                sj8=gconst1;
//                                                                                cj8=gconst2;
//                                                                                j8=x34;
//                                                                                IkReal gconst0=x34;
//                                                                                IkReal gconst1=((((-4.16666666666667)*pz*x30*x31))+x35);
//                                                                                IkReal gconst2=((((-1.0)*x30*x32))+(((-2.77777777777778)*pz*x35)));
//                                                                                IkReal x39=pz*pz;
//                                                                                j7eval[0]=((1.0)+(((7.71604938271605)*x39)));
//                                                                                j7eval[1]=IKsign(((81.0)+(((625.0)*x39))));
                                                                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                        bool j7valid[1]= {false};
//                                                                                        _nj7 = 1;
//                                                                                        IkReal x40=((225.0)*pz);
//                                                                                        IkReal x41=((54.0)*gconst1);
//                                                                                        CheckValue<IkReal> x42 = IKatan2WithCheck(IkReal(((((36.0)*(gconst2*gconst2)))+(((108.0)*gconst2)))),IkReal(((((-1.0)*x41))+x40+(((-36.0)*gconst1*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x42.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x43=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-1.0)*x40))+x41+(((-150.0)*gconst2*pz)))),-1);
                                                                                        if (false)//if(!x43.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j7array[0]=((-1.5707963267949)+(x42.value)+(((1.5707963267949)*(x43.value))));
//                                                                                        sj7array[0]=IKsin(j7array[0]);
//                                                                                        cj7array[0]=IKcos(j7array[0]);
                                                                                        if (false)//if( j7array[0] > IKPI )
                                                                                        {
//                                                                                            j7array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                                                        {
//                                                                                            j7array[0]+=IK2PI;
                                                                                        }
//                                                                                        j7valid[0] = true;
//                                                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                        {
                                                                                            if (false)//if( !j7valid[ij7] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij7[0] = ij7;
//                                                                                            _ij7[1] = -1;
//                                                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                            {
                                                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j7valid[iij7]=false;
//                                                                                                    _ij7[1] = iij7;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j7 = j7array[ij7];
//                                                                                            cj7 = cj7array[ij7];
//                                                                                            sj7 = sj7array[ij7];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x44=IKcos(j7);
//                                                                                                IkReal x45=IKsin(j7);
//                                                                                                IkReal x46=((1.0)*pz);
//                                                                                                IkReal x47=((0.24)*gconst2);
//                                                                                                IkReal x48=((0.24)*gconst1);
//                                                                                                IkReal x49=((0.36)*x44);
//                                                                                                IkReal x50=((0.36)*x45);
//                                                                                                evalcond[0]=(((pz*x44))+(((-1.0)*x48))+(((-1.0)*x50)));
//                                                                                                evalcond[1]=((-0.36)+(((-1.0)*x47))+(((-1.0)*x49))+(((-1.0)*x45*x46)));
//                                                                                                evalcond[2]=((-0.2016)+(((-0.2592)*x44))+(((-1.0)*pz*x46))+(((-0.72)*pz*x45)));
//                                                                                                evalcond[3]=((-0.36)+(((-1.0)*x49))+(((-1.0)*x45*x48))+(((-1.0)*x44*x47)));
//                                                                                                evalcond[4]=((((-1.0)*x46))+(((-1.0)*x45*x47))+((x44*x48))+(((-1.0)*x50)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                bool j6valid[1]= {false};
//                                                                                                _nj6 = 1;
//                                                                                                j6array[0]=0;
//                                                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                                if (false)//if( j6array[0] > IKPI )
                                                                                                {
//                                                                                                    j6array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                                                {
//                                                                                                    j6array[0]+=IK2PI;
                                                                                                }
//                                                                                                j6valid[0] = true;
//                                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                {
                                                                                                    if (false)//if( !j6valid[ij6] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij6[0] = ij6;
//                                                                                                    _ij6[1] = -1;
//                                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                    {
                                                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j6valid[iij6]=false;
//                                                                                                            _ij6[1] = iij6;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j6 = j6array[ij6];
//                                                                                                    cj6 = cj6array[ij6];
//                                                                                                    sj6 = sj6array[ij6];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j6;
//                                                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j7;
//                                                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j8;
//                                                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                        bool j7valid[1]= {false};
//                                                                                        _nj7 = 1;
//                                                                                        IkReal x51=((150.0)*pz);
//                                                                                        CheckValue<IkReal> x52=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                                                        if (false)//if(!x52.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x53 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x51))+(((-225.0)*pz))+(((-54.0)*gconst1)))),IkReal(((-81.0)+((gconst1*x51))+(((-54.0)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x53.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x52.value)))+(x53.value));
//                                                                                        sj7array[0]=IKsin(j7array[0]);
//                                                                                        cj7array[0]=IKcos(j7array[0]);
                                                                                        if (false)//if( j7array[0] > IKPI )
                                                                                        {
//                                                                                            j7array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                                                        {
//                                                                                            j7array[0]+=IK2PI;
                                                                                        }
//                                                                                        j7valid[0] = true;
//                                                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                        {
                                                                                            if (false)//if( !j7valid[ij7] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij7[0] = ij7;
//                                                                                            _ij7[1] = -1;
//                                                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                            {
                                                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j7valid[iij7]=false;
//                                                                                                    _ij7[1] = iij7;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j7 = j7array[ij7];
//                                                                                            cj7 = cj7array[ij7];
//                                                                                            sj7 = sj7array[ij7];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x54=IKcos(j7);
//                                                                                                IkReal x55=IKsin(j7);
//                                                                                                IkReal x56=((1.0)*pz);
//                                                                                                IkReal x57=((0.24)*gconst2);
//                                                                                                IkReal x58=((0.24)*gconst1);
//                                                                                                IkReal x59=((0.36)*x54);
//                                                                                                IkReal x60=((0.36)*x55);
//                                                                                                evalcond[0]=(((pz*x54))+(((-1.0)*x60))+(((-1.0)*x58)));
//                                                                                                evalcond[1]=((-0.36)+(((-1.0)*x55*x56))+(((-1.0)*x59))+(((-1.0)*x57)));
//                                                                                                evalcond[2]=((-0.2016)+(((-0.72)*pz*x55))+(((-0.2592)*x54))+(((-1.0)*pz*x56)));
//                                                                                                evalcond[3]=((-0.36)+(((-1.0)*x55*x58))+(((-1.0)*x54*x57))+(((-1.0)*x59)));
//                                                                                                evalcond[4]=((((-1.0)*x55*x57))+(((-1.0)*x60))+(((-1.0)*x56))+((x54*x58)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                bool j6valid[1]= {false};
//                                                                                                _nj6 = 1;
//                                                                                                j6array[0]=0;
//                                                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                                if (false)//if( j6array[0] > IKPI )
                                                                                                {
//                                                                                                    j6array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                                                {
//                                                                                                    j6array[0]+=IK2PI;
                                                                                                }
//                                                                                                j6valid[0] = true;
//                                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                {
                                                                                                    if (false)//if( !j6valid[ij6] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij6[0] = ij6;
//                                                                                                    _ij6[1] = -1;
//                                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                    {
                                                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j6valid[iij6]=false;
//                                                                                                            _ij6[1] = iij6;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j6 = j6array[ij6];
//                                                                                                    cj6 = cj6array[ij6];
//                                                                                                    sj6 = sj6array[ij6];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j6;
//                                                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j7;
//                                                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j8;
//                                                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if (false)//if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            IkReal x61=((1.0)+(((7.71604938271605)*(pz*pz))));
//                                                                            IkReal x68 = x61;
                                                                            if (false)//if(IKabs(x68)==0)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x62=pow(x68,-0.5);
                                                                            if (false)//if((x61) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x63=IKabs(IKsqrt(x61));
//                                                                            IkReal x64=(pz*x62);
//                                                                            CheckValue<IkReal> x69=IKPowWithIntegerCheck<IKFAST_REAL>(x63,-1);
                                                                            if (false)//if(!x69.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x65=x69.value;
//                                                                            IkReal x66=((1.5)*x65);
                                                                            if (false)//if((((1.0)+(((-2.25)*(x65*x65))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x67=IKsqrt(((1.0)+(((-2.25)*(x65*x65)))));
//                                                                            CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x70.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (x66) < -1-IKFAST_SINCOS_THRESH || (x66) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(x70.value)))+(((-1.0)*(IKasin(x66)))));
//                                                                            IkReal gconst4=((((-1.0)*x62*x67))+(((-4.16666666666667)*x64*x65)));
//                                                                            IkReal gconst5=((((2.77777777777778)*x64*x67))+(((-1.0)*x62*x66)));
                                                                            if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x71=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if (false)//if(!x71.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (((1.5)*(x71.value))) < -1-IKFAST_SINCOS_THRESH || (((1.5)*(x71.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x72 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x72.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((1.5)*(x71.value))))+(x72.value)+j8)))), 6.28318530717959)));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j7eval[2];
//                                                                                    IkReal x73=pz*pz;
//                                                                                    IkReal x74=x61;
//                                                                                    IkReal x82 = x74;
                                                                                    if (false)//if(IKabs(x82)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x75=pow(x82,-0.5);
                                                                                    if (false)//if((x74) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x76=IKabs(IKsqrt(x74));
//                                                                                    IkReal x77=(pz*x75);
//                                                                                    CheckValue<IkReal> x83=IKPowWithIntegerCheck<IKFAST_REAL>(x76,-1);
                                                                                    if (false)//if(!x83.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x78=x83.value;
//                                                                                    IkReal x79=((1.5)*x78);
                                                                                    if (false)//if((((1.0)+(((-2.25)*(x78*x78))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x80=IKsqrt(((1.0)+(((-2.25)*(x78*x78)))));
                                                                                    if (false)//if( (x79) < -1-IKFAST_SINCOS_THRESH || (x79) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x84.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x81=((((1.0)*(IKasin(x79))))+(((1.0)*(x84.value))));
//                                                                                    px=0;
//                                                                                    py=0;
//                                                                                    pp=x73;
//                                                                                    sj8=gconst4;
//                                                                                    cj8=gconst5;
//                                                                                    j8=((3.14159265)+(((-1.0)*x81)));
//                                                                                    IkReal gconst3=((3.14159265358979)+(((-1.0)*x81)));
//                                                                                    IkReal gconst4=((((-4.16666666666667)*x77*x78))+(((-1.0)*x75*x80)));
//                                                                                    IkReal gconst5=((((2.77777777777778)*x77*x80))+(((-1.0)*x75*x79)));
//                                                                                    IkReal x85=pz*pz;
//                                                                                    j7eval[0]=((1.0)+(((7.71604938271605)*x85)));
//                                                                                    j7eval[1]=IKsign(((81.0)+(((625.0)*x85))));
                                                                                    if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                            bool j7valid[1]= {false};
//                                                                                            _nj7 = 1;
//                                                                                            IkReal x86=((54.0)*gconst4);
//                                                                                            IkReal x87=((225.0)*pz);
//                                                                                            CheckValue<IkReal> x88 = IKatan2WithCheck(IkReal(((((-36.0)*(gconst4*gconst4)))+(((625.0)*(pz*pz))))),IkReal((x87+(((-1.0)*x86))+(((-36.0)*gconst4*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x88.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x89=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*gconst5*pz))+x86+(((-1.0)*x87)))),-1);
                                                                                            if (false)//if(!x89.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j7array[0]=((-1.5707963267949)+(x88.value)+(((1.5707963267949)*(x89.value))));
//                                                                                            sj7array[0]=IKsin(j7array[0]);
//                                                                                            cj7array[0]=IKcos(j7array[0]);
                                                                                            if (false)//if( j7array[0] > IKPI )
                                                                                            {
//                                                                                                j7array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j7array[0] < -IKPI )
                                                                                            {
//                                                                                                j7array[0]+=IK2PI;
                                                                                            }
//                                                                                            j7valid[0] = true;
//                                                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                            {
                                                                                                if (false)//if( !j7valid[ij7] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij7[0] = ij7;
//                                                                                                _ij7[1] = -1;
//                                                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                {
                                                                                                    if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j7valid[iij7]=false;
//                                                                                                        _ij7[1] = iij7;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j7 = j7array[ij7];
//                                                                                                cj7 = cj7array[ij7];
//                                                                                                sj7 = sj7array[ij7];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x90=IKcos(j7);
//                                                                                                    IkReal x91=IKsin(j7);
//                                                                                                    IkReal x92=((1.0)*pz);
//                                                                                                    IkReal x93=((0.24)*gconst4);
//                                                                                                    IkReal x94=((0.24)*gconst5);
//                                                                                                    IkReal x95=((0.36)*x90);
//                                                                                                    IkReal x96=((0.36)*x91);
//                                                                                                    evalcond[0]=(((pz*x90))+(((-1.0)*x93))+(((-1.0)*x96)));
//                                                                                                    evalcond[1]=((-0.36)+(((-1.0)*x91*x92))+(((-1.0)*x94))+(((-1.0)*x95)));
//                                                                                                    evalcond[2]=((-0.2016)+(((-1.0)*pz*x92))+(((-0.2592)*x90))+(((-0.72)*pz*x91)));
//                                                                                                    evalcond[3]=((-0.36)+(((-1.0)*x90*x94))+(((-1.0)*x91*x93))+(((-1.0)*x95)));
//                                                                                                    evalcond[4]=((((-1.0)*x91*x94))+((x90*x93))+(((-1.0)*x96))+(((-1.0)*x92)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                    bool j6valid[1]= {false};
//                                                                                                    _nj6 = 1;
//                                                                                                    j6array[0]=0;
//                                                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                                    if (false)//if( j6array[0] > IKPI )
                                                                                                    {
//                                                                                                        j6array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j6array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j6valid[0] = true;
//                                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                    {
                                                                                                        if (false)//if( !j6valid[ij6] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij6[0] = ij6;
//                                                                                                        _ij6[1] = -1;
//                                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                        {
                                                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j6valid[iij6]=false;
//                                                                                                                _ij6[1] = iij6;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j6 = j6array[ij6];
//                                                                                                        cj6 = cj6array[ij6];
//                                                                                                        sj6 = sj6array[ij6];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j6;
//                                                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j7;
//                                                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j8;
//                                                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                            bool j7valid[1]= {false};
//                                                                                            _nj7 = 1;
//                                                                                            IkReal x97=((150.0)*pz);
//                                                                                            CheckValue<IkReal> x98=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                                                            if (false)//if(!x98.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x99 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x97))+(((-225.0)*pz))+(((-54.0)*gconst4)))),IkReal(((-81.0)+(((-54.0)*gconst5))+((gconst4*x97)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x99.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x98.value)))+(x99.value));
//                                                                                            sj7array[0]=IKsin(j7array[0]);
//                                                                                            cj7array[0]=IKcos(j7array[0]);
                                                                                            if (false)//if( j7array[0] > IKPI )
                                                                                            {
//                                                                                                j7array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j7array[0] < -IKPI )
                                                                                            {
//                                                                                                j7array[0]+=IK2PI;
                                                                                            }
//                                                                                            j7valid[0] = true;
//                                                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                            {
                                                                                                if (false)//if( !j7valid[ij7] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij7[0] = ij7;
//                                                                                                _ij7[1] = -1;
//                                                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                {
                                                                                                    if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j7valid[iij7]=false;
//                                                                                                        _ij7[1] = iij7;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j7 = j7array[ij7];
//                                                                                                cj7 = cj7array[ij7];
//                                                                                                sj7 = sj7array[ij7];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x100=IKcos(j7);
//                                                                                                    IkReal x101=IKsin(j7);
//                                                                                                    IkReal x102=((1.0)*pz);
//                                                                                                    IkReal x103=((0.24)*gconst4);
//                                                                                                    IkReal x104=((0.24)*gconst5);
//                                                                                                    IkReal x105=((0.36)*x100);
//                                                                                                    IkReal x106=((0.36)*x101);
//                                                                                                    evalcond[0]=(((pz*x100))+(((-1.0)*x106))+(((-1.0)*x103)));
//                                                                                                    evalcond[1]=((-0.36)+(((-1.0)*x101*x102))+(((-1.0)*x105))+(((-1.0)*x104)));
//                                                                                                    evalcond[2]=((-0.2016)+(((-1.0)*pz*x102))+(((-0.2592)*x100))+(((-0.72)*pz*x101)));
//                                                                                                    evalcond[3]=((-0.36)+(((-1.0)*x101*x103))+(((-1.0)*x100*x104))+(((-1.0)*x105)));
//                                                                                                    evalcond[4]=((((-1.0)*x101*x104))+(((-1.0)*x106))+(((-1.0)*x102))+((x100*x103)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                    bool j6valid[1]= {false};
//                                                                                                    _nj6 = 1;
//                                                                                                    j6array[0]=0;
//                                                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                                    if (false)//if( j6array[0] > IKPI )
                                                                                                    {
//                                                                                                        j6array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j6array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j6valid[0] = true;
//                                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                    {
                                                                                                        if (false)//if( !j6valid[ij6] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij6[0] = ij6;
//                                                                                                        _ij6[1] = -1;
//                                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                        {
                                                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j6valid[iij6]=false;
//                                                                                                                _ij6[1] = iij6;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j6 = j6array[ij6];
//                                                                                                        cj6 = cj6array[ij6];
//                                                                                                        sj6 = sj6array[ij6];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j6;
//                                                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j7;
//                                                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j8;
//                                                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
//                                                                                IkReal x107=pz*pz;
//                                                                                IkReal x108=((4.16666666666667)*pz);
//                                                                                IkReal x109=((1.0)+(((7.71604938271605)*x107)));
//                                                                                IkReal x116 = x109;
                                                                                if (false)//if(IKabs(x116)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x110=pow(x116,-0.5);
                                                                                if (false)//if((x109) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x111=IKabs(IKsqrt(x109));
//                                                                                CheckValue<IkReal> x117=IKPowWithIntegerCheck<IKFAST_REAL>(x111,-1);
                                                                                if (false)//if(!x117.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x112=x117.value;
                                                                                if (false)//if((((1.0)+(((-17.3611111111111)*x107*(x112*x112))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x113=IKsqrt(((1.0)+(((-17.3611111111111)*x107*(x112*x112)))));
//                                                                                IkReal x114=(x110*x112);
//                                                                                IkReal x115=(x110*x113);
//                                                                                CheckValue<IkReal> x118 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x118.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( ((x108*x112)) < -1-IKFAST_SINCOS_THRESH || ((x108*x112)) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal gconst6=((((-1.0)*(x118.value)))+(IKasin((x108*x112))));
//                                                                                IkReal gconst7=((((2.77777777777778)*pz*x115))+((x108*x114)));
//                                                                                IkReal gconst8=((((-11.5740740740741)*x107*x114))+x115);
                                                                                if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x119=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                if (false)//if(!x119.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (((4.16666666666667)*pz*(x119.value))) < -1-IKFAST_SINCOS_THRESH || (((4.16666666666667)*pz*(x119.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x120 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x120.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j8+(((-1.0)*(IKasin(((4.16666666666667)*pz*(x119.value))))))+(x120.value))))), 6.28318530717959)));
                                                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
//                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j7eval[2];
//                                                                                        IkReal x121=pz*pz;
//                                                                                        IkReal x122=((4.16666666666667)*pz);
//                                                                                        IkReal x123=x109;
//                                                                                        IkReal x131 = x123;
                                                                                        if (false)//if(IKabs(x131)==0)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x124=pow(x131,-0.5);
                                                                                        if (false)//if((x123) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x125=IKabs(IKsqrt(x123));
//                                                                                        CheckValue<IkReal> x132=IKPowWithIntegerCheck<IKFAST_REAL>(x125,-1);
                                                                                        if (false)//if(!x132.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x126=x132.value;
                                                                                        if (false)//if( ((x122*x126)) < -1-IKFAST_SINCOS_THRESH || ((x122*x126)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x133 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x133.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x127=((IKasin((x122*x126)))+(((-1.0)*(x133.value))));
                                                                                        if (false)//if((((1.0)+(((-17.3611111111111)*x121*(x126*x126))))) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x128=IKsqrt(((1.0)+(((-17.3611111111111)*x121*(x126*x126)))));
//                                                                                        IkReal x129=(x124*x126);
//                                                                                        IkReal x130=(x124*x128);
//                                                                                        px=0;
//                                                                                        py=0;
//                                                                                        pp=x121;
//                                                                                        sj8=gconst7;
//                                                                                        cj8=gconst8;
//                                                                                        j8=x127;
//                                                                                        IkReal gconst6=x127;
//                                                                                        IkReal gconst7=((((2.77777777777778)*pz*x130))+((x122*x129)));
//                                                                                        IkReal gconst8=(x130+(((-11.5740740740741)*x121*x129)));
//                                                                                        IkReal x134=pz*pz;
//                                                                                        j7eval[0]=((1.0)+(((7.71604938271605)*x134)));
//                                                                                        j7eval[1]=IKsign(((81.0)+(((625.0)*x134))));
                                                                                        if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                                bool j7valid[1]= {false};
//                                                                                                _nj7 = 1;
//                                                                                                IkReal x135=(gconst7*pz);
//                                                                                                CheckValue<IkReal> x136=IKPowWithIntegerCheck<IKFAST_REAL>(((-1.08)+(((-2.0)*x135))+(((-0.72)*gconst8))),-1);
                                                                                                if (false)//if(!x136.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x137=IKPowWithIntegerCheck<IKFAST_REAL>(((-27.0)+(((-18.0)*gconst8))+(((-50.0)*x135))),-1);
                                                                                                if (false)//if(!x137.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                                if (false)//if( IKabs(((x136.value)*(((((0.72)*gconst7))+(((0.48)*gconst7*gconst8))+(((3.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x137.value)*(((27.0)+(((-12.0)*(gconst7*gconst7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x136.value)*(((((0.72)*gconst7))+(((0.48)*gconst7*gconst8))+(((3.0)*pz))))))+IKsqr(((x137.value)*(((27.0)+(((-12.0)*(gconst7*gconst7)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j7array[0]=IKatan2(((x136.value)*(((((0.72)*gconst7))+(((0.48)*gconst7*gconst8))+(((3.0)*pz))))), ((x137.value)*(((27.0)+(((-12.0)*(gconst7*gconst7)))))));
//                                                                                                sj7array[0]=IKsin(j7array[0]);
//                                                                                                cj7array[0]=IKcos(j7array[0]);
                                                                                                if (false)//if( j7array[0] > IKPI )
                                                                                                {
//                                                                                                    j7array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j7array[0] < -IKPI )
                                                                                                {
//                                                                                                    j7array[0]+=IK2PI;
                                                                                                }
//                                                                                                j7valid[0] = true;
//                                                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                                {
                                                                                                    if (false)//if( !j7valid[ij7] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij7[0] = ij7;
//                                                                                                    _ij7[1] = -1;
//                                                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                    {
                                                                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j7valid[iij7]=false;
//                                                                                                            _ij7[1] = iij7;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j7 = j7array[ij7];
//                                                                                                    cj7 = cj7array[ij7];
//                                                                                                    sj7 = sj7array[ij7];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x138=IKcos(j7);
//                                                                                                        IkReal x139=IKsin(j7);
//                                                                                                        IkReal x140=((0.24)*gconst7);
//                                                                                                        IkReal x141=((1.0)*pz);
//                                                                                                        IkReal x142=((0.24)*gconst8);
//                                                                                                        IkReal x143=((0.36)*x138);
//                                                                                                        IkReal x144=((0.36)*x139);
//                                                                                                        evalcond[0]=((((-1.0)*x144))+(((-1.0)*x140))+((pz*x138)));
//                                                                                                        evalcond[1]=((-0.36)+(((-1.0)*x143))+(((-1.0)*x142))+(((-1.0)*x139*x141)));
//                                                                                                        evalcond[2]=((-0.2016)+(((-0.2592)*x138))+(((-1.0)*pz*x141))+(((-0.72)*pz*x139)));
//                                                                                                        evalcond[3]=((-0.36)+(((-1.0)*x143))+(((-1.0)*x138*x142))+(((-1.0)*x139*x140)));
//                                                                                                        evalcond[4]=((((-1.0)*x144))+(((-1.0)*x141))+((x138*x140))+(((-1.0)*x139*x142)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                        bool j6valid[1]= {false};
//                                                                                                        _nj6 = 1;
//                                                                                                        j6array[0]=0;
//                                                                                                        sj6array[0]=IKsin(j6array[0]);
//                                                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                                                        if (false)//if( j6array[0] > IKPI )
                                                                                                        {
//                                                                                                            j6array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j6array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j6valid[0] = true;
//                                                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                        {
                                                                                                            if (false)//if( !j6valid[ij6] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij6[0] = ij6;
//                                                                                                            _ij6[1] = -1;
//                                                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                            {
                                                                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j6valid[iij6]=false;
//                                                                                                                    _ij6[1] = iij6;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j6 = j6array[ij6];
//                                                                                                            cj6 = cj6array[ij6];
//                                                                                                            sj6 = sj6array[ij6];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j6;
//                                                                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                                                                vinfos[0].maxsolutions = _nj6;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j7;
//                                                                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                                                                vinfos[1].maxsolutions = _nj7;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j8;
//                                                                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                                                                vinfos[2].maxsolutions = _nj8;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                                bool j7valid[1]= {false};
//                                                                                                _nj7 = 1;
//                                                                                                IkReal x145=((150.0)*pz);
//                                                                                                CheckValue<IkReal> x146=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                                                                if (false)//if(!x146.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x147 = IKatan2WithCheck(IkReal(((((-1.0)*gconst8*x145))+(((-225.0)*pz))+(((-54.0)*gconst7)))),IkReal(((-81.0)+((gconst7*x145))+(((-54.0)*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x147.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x146.value)))+(x147.value));
//                                                                                                sj7array[0]=IKsin(j7array[0]);
//                                                                                                cj7array[0]=IKcos(j7array[0]);
                                                                                                if (false)//if( j7array[0] > IKPI )
                                                                                                {
//                                                                                                    j7array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j7array[0] < -IKPI )
                                                                                                {
//                                                                                                    j7array[0]+=IK2PI;
                                                                                                }
//                                                                                                j7valid[0] = true;
//                                                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                                {
                                                                                                    if (false)//if( !j7valid[ij7] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij7[0] = ij7;
//                                                                                                    _ij7[1] = -1;
//                                                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                    {
                                                                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j7valid[iij7]=false;
//                                                                                                            _ij7[1] = iij7;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j7 = j7array[ij7];
//                                                                                                    cj7 = cj7array[ij7];
//                                                                                                    sj7 = sj7array[ij7];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x148=IKcos(j7);
//                                                                                                        IkReal x149=IKsin(j7);
//                                                                                                        IkReal x150=((0.24)*gconst7);
//                                                                                                        IkReal x151=((1.0)*pz);
//                                                                                                        IkReal x152=((0.24)*gconst8);
//                                                                                                        IkReal x153=((0.36)*x148);
//                                                                                                        IkReal x154=((0.36)*x149);
//                                                                                                        evalcond[0]=(((pz*x148))+(((-1.0)*x150))+(((-1.0)*x154)));
//                                                                                                        evalcond[1]=((-0.36)+(((-1.0)*x152))+(((-1.0)*x153))+(((-1.0)*x149*x151)));
//                                                                                                        evalcond[2]=((-0.2016)+(((-0.72)*pz*x149))+(((-0.2592)*x148))+(((-1.0)*pz*x151)));
//                                                                                                        evalcond[3]=((-0.36)+(((-1.0)*x153))+(((-1.0)*x148*x152))+(((-1.0)*x149*x150)));
//                                                                                                        evalcond[4]=((((-1.0)*x151))+(((-1.0)*x154))+((x148*x150))+(((-1.0)*x149*x152)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                        bool j6valid[1]= {false};
//                                                                                                        _nj6 = 1;
//                                                                                                        j6array[0]=0;
//                                                                                                        sj6array[0]=IKsin(j6array[0]);
//                                                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                                                        if (false)//if( j6array[0] > IKPI )
                                                                                                        {
//                                                                                                            j6array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j6array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j6valid[0] = true;
//                                                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                        {
                                                                                                            if (false)//if( !j6valid[ij6] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij6[0] = ij6;
//                                                                                                            _ij6[1] = -1;
//                                                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                            {
                                                                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j6valid[iij6]=false;
//                                                                                                                    _ij6[1] = iij6;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j6 = j6array[ij6];
//                                                                                                            cj6 = cj6array[ij6];
//                                                                                                            sj6 = sj6array[ij6];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j6;
//                                                                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                                                                vinfos[0].maxsolutions = _nj6;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j7;
//                                                                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                                                                vinfos[1].maxsolutions = _nj7;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j8;
//                                                                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                                                                vinfos[2].maxsolutions = _nj8;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if (false)//if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
//                                                                                    IkReal x155=pz*pz;
//                                                                                    IkReal x156=((4.16666666666667)*pz);
//                                                                                    IkReal x157=((1.0)+(((7.71604938271605)*x155)));
//                                                                                    IkReal x164 = x157;
                                                                                    if (false)//if(IKabs(x164)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x158=pow(x164,-0.5);
                                                                                    if (false)//if((x157) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x159=IKabs(IKsqrt(x157));
//                                                                                    CheckValue<IkReal> x165=IKPowWithIntegerCheck<IKFAST_REAL>(x159,-1);
                                                                                    if (false)//if(!x165.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x160=x165.value;
                                                                                    if (false)//if((((1.0)+(((-17.3611111111111)*x155*(x160*x160))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x161=IKsqrt(((1.0)+(((-17.3611111111111)*x155*(x160*x160)))));
//                                                                                    IkReal x162=(x158*x160);
//                                                                                    IkReal x163=(x158*x161);
                                                                                    if (false)//if( ((x156*x160)) < -1-IKFAST_SINCOS_THRESH || ((x156*x160)) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x166.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin((x156*x160)))))+(((-1.0)*(x166.value))));
//                                                                                    IkReal gconst10=((((-2.77777777777778)*pz*x163))+((x156*x162)));
//                                                                                    IkReal gconst11=((((-1.0)*x163))+(((-11.5740740740741)*x155*x162)));
                                                                                    if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x167=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                    if (false)//if(!x167.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (((4.16666666666667)*pz*(x167.value))) < -1-IKFAST_SINCOS_THRESH || (((4.16666666666667)*pz*(x167.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x168.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((4.16666666666667)*pz*(x167.value))))+j8+(x168.value))))), 6.28318530717959)));
                                                                                    if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
//                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j7eval[2];
//                                                                                            IkReal x169=pz*pz;
//                                                                                            IkReal x170=((4.16666666666667)*pz);
//                                                                                            IkReal x171=x157;
//                                                                                            IkReal x179 = x171;
                                                                                            if (false)//if(IKabs(x179)==0)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x172=pow(x179,-0.5);
                                                                                            if (false)//if((x171) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x173=IKabs(IKsqrt(x171));
//                                                                                            CheckValue<IkReal> x180=IKPowWithIntegerCheck<IKFAST_REAL>(x173,-1);
                                                                                            if (false)//if(!x180.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x174=x180.value;
                                                                                            if (false)//if((((1.0)+(((-17.3611111111111)*x169*(x174*x174))))) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x175=IKsqrt(((1.0)+(((-17.3611111111111)*x169*(x174*x174)))));
//                                                                                            IkReal x176=(x172*x174);
//                                                                                            CheckValue<IkReal> x181 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x181.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
                                                                                            if (false)//if( ((x170*x174)) < -1-IKFAST_SINCOS_THRESH || ((x170*x174)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x177=((((1.0)*(x181.value)))+(((1.0)*(IKasin((x170*x174))))));
//                                                                                            IkReal x178=(x172*x175);
//                                                                                            px=0;
//                                                                                            py=0;
//                                                                                            pp=x169;
//                                                                                            sj8=gconst10;
//                                                                                            cj8=gconst11;
//                                                                                            j8=((3.14159265)+(((-1.0)*x177)));
//                                                                                            IkReal gconst9=((3.14159265358979)+(((-1.0)*x177)));
//                                                                                            IkReal gconst10=((((-2.77777777777778)*pz*x178))+((x170*x176)));
//                                                                                            IkReal gconst11=((((-1.0)*x178))+(((-11.5740740740741)*x169*x176)));
//                                                                                            IkReal x182=pz*pz;
//                                                                                            j7eval[0]=((1.0)+(((7.71604938271605)*x182)));
//                                                                                            j7eval[1]=IKsign(((81.0)+(((625.0)*x182))));
                                                                                            if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                                    bool j7valid[1]= {false};
//                                                                                                    _nj7 = 1;
//                                                                                                    IkReal x183=((225.0)*pz);
//                                                                                                    IkReal x184=((54.0)*gconst10);
//                                                                                                    CheckValue<IkReal> x185=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*gconst11*pz))+(((-1.0)*x183))+x184)),-1);
                                                                                                    if (false)//if(!x185.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x186 = IKatan2WithCheck(IkReal(((((625.0)*(pz*pz)))+(((-36.0)*(gconst10*gconst10))))),IkReal(((((-36.0)*gconst10*gconst11))+(((-1.0)*x184))+x183)),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x186.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x185.value)))+(x186.value));
//                                                                                                    sj7array[0]=IKsin(j7array[0]);
//                                                                                                    cj7array[0]=IKcos(j7array[0]);
                                                                                                    if (false)//if( j7array[0] > IKPI )
                                                                                                    {
//                                                                                                        j7array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j7array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j7array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j7valid[0] = true;
//                                                                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                                    {
                                                                                                        if (false)//if( !j7valid[ij7] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij7[0] = ij7;
//                                                                                                        _ij7[1] = -1;
//                                                                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                        {
                                                                                                            if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j7valid[iij7]=false;
//                                                                                                                _ij7[1] = iij7;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j7 = j7array[ij7];
//                                                                                                        cj7 = cj7array[ij7];
//                                                                                                        sj7 = sj7array[ij7];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x187=IKcos(j7);
//                                                                                                            IkReal x188=IKsin(j7);
//                                                                                                            IkReal x189=((1.0)*pz);
//                                                                                                            IkReal x190=((0.24)*gconst11);
//                                                                                                            IkReal x191=((0.24)*gconst10);
//                                                                                                            IkReal x192=((0.36)*x187);
//                                                                                                            IkReal x193=((0.36)*x188);
//                                                                                                            IkReal x194=((0.24)*x187);
//                                                                                                            evalcond[0]=(((pz*x187))+(((-1.0)*x193))+(((-1.0)*x191)));
//                                                                                                            evalcond[1]=((-0.36)+(((-1.0)*x188*x189))+(((-1.0)*x190))+(((-1.0)*x192)));
//                                                                                                            evalcond[2]=((-0.2016)+(((-1.0)*pz*x189))+(((-0.72)*pz*x188))+(((-0.2592)*x187)));
//                                                                                                            evalcond[3]=((-0.36)+(((-1.0)*x188*x191))+(((-1.0)*x192))+(((-1.0)*x187*x190)));
//                                                                                                            evalcond[4]=((((-1.0)*x188*x190))+((x187*x191))+(((-1.0)*x189))+(((-1.0)*x193)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                            bool j6valid[1]= {false};
//                                                                                                            _nj6 = 1;
//                                                                                                            j6array[0]=0;
//                                                                                                            sj6array[0]=IKsin(j6array[0]);
//                                                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                                                            if (false)//if( j6array[0] > IKPI )
                                                                                                            {
//                                                                                                                j6array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j6array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j6array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j6valid[0] = true;
//                                                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                            {
                                                                                                                if (false)//if( !j6valid[ij6] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij6[0] = ij6;
//                                                                                                                _ij6[1] = -1;
//                                                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                                {
                                                                                                                    if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j6valid[iij6]=false;
//                                                                                                                        _ij6[1] = iij6;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j6 = j6array[ij6];
//                                                                                                                cj6 = cj6array[ij6];
//                                                                                                                sj6 = sj6array[ij6];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j6;
//                                                                                                                    vinfos[0].indices[0] = _ij6[0];
//                                                                                                                    vinfos[0].indices[1] = _ij6[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj6;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j7;
//                                                                                                                    vinfos[1].indices[0] = _ij7[0];
//                                                                                                                    vinfos[1].indices[1] = _ij7[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj7;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j8;
//                                                                                                                    vinfos[2].indices[0] = _ij8[0];
//                                                                                                                    vinfos[2].indices[1] = _ij8[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj8;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                                    bool j7valid[1]= {false};
//                                                                                                    _nj7 = 1;
//                                                                                                    IkReal x195=((150.0)*pz);
//                                                                                                    CheckValue<IkReal> x196=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                                                                    if (false)//if(!x196.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x197 = IKatan2WithCheck(IkReal(((((-54.0)*gconst10))+(((-225.0)*pz))+(((-1.0)*gconst11*x195)))),IkReal(((-81.0)+(((-54.0)*gconst11))+((gconst10*x195)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x197.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x196.value)))+(x197.value));
//                                                                                                    sj7array[0]=IKsin(j7array[0]);
//                                                                                                    cj7array[0]=IKcos(j7array[0]);
                                                                                                    if (false)//if( j7array[0] > IKPI )
                                                                                                    {
//                                                                                                        j7array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j7array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j7array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j7valid[0] = true;
//                                                                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                                    {
                                                                                                        if (false)//if( !j7valid[ij7] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij7[0] = ij7;
//                                                                                                        _ij7[1] = -1;
//                                                                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                        {
                                                                                                            if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j7valid[iij7]=false;
//                                                                                                                _ij7[1] = iij7;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j7 = j7array[ij7];
//                                                                                                        cj7 = cj7array[ij7];
//                                                                                                        sj7 = sj7array[ij7];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x198=IKcos(j7);
//                                                                                                            IkReal x199=IKsin(j7);
//                                                                                                            IkReal x200=((1.0)*pz);
//                                                                                                            IkReal x201=((0.24)*gconst11);
//                                                                                                            IkReal x202=((0.24)*gconst10);
//                                                                                                            IkReal x203=((0.36)*x198);
//                                                                                                            IkReal x204=((0.36)*x199);
//                                                                                                            IkReal x205=((0.24)*x198);
//                                                                                                            evalcond[0]=((((-1.0)*x202))+(((-1.0)*x204))+((pz*x198)));
//                                                                                                            evalcond[1]=((-0.36)+(((-1.0)*x201))+(((-1.0)*x203))+(((-1.0)*x199*x200)));
//                                                                                                            evalcond[2]=((-0.2016)+(((-1.0)*pz*x200))+(((-0.72)*pz*x199))+(((-0.2592)*x198)));
//                                                                                                            evalcond[3]=((-0.36)+(((-1.0)*x203))+(((-1.0)*x198*x201))+(((-1.0)*x199*x202)));
//                                                                                                            evalcond[4]=(((x198*x202))+(((-1.0)*x200))+(((-1.0)*x204))+(((-1.0)*x199*x201)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                            bool j6valid[1]= {false};
//                                                                                                            _nj6 = 1;
//                                                                                                            j6array[0]=0;
//                                                                                                            sj6array[0]=IKsin(j6array[0]);
//                                                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                                                            if (false)//if( j6array[0] > IKPI )
                                                                                                            {
//                                                                                                                j6array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j6array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j6array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j6valid[0] = true;
//                                                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                            {
                                                                                                                if (false)//if( !j6valid[ij6] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij6[0] = ij6;
//                                                                                                                _ij6[1] = -1;
//                                                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                                {
                                                                                                                    if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j6valid[iij6]=false;
//                                                                                                                        _ij6[1] = iij6;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j6 = j6array[ij6];
//                                                                                                                cj6 = cj6array[ij6];
//                                                                                                                sj6 = sj6array[ij6];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j6;
//                                                                                                                    vinfos[0].indices[0] = _ij6[0];
//                                                                                                                    vinfos[0].indices[1] = _ij6[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj6;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j7;
//                                                                                                                    vinfos[1].indices[0] = _ij7[0];
//                                                                                                                    vinfos[1].indices[1] = _ij7[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj7;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j8;
//                                                                                                                    vinfos[2].indices[0] = _ij8[0];
//                                                                                                                    vinfos[2].indices[1] = _ij8[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj8;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if (false)//if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
//                                                                                            bgotonextstatement=false;
//                                                                                            continue; // branch miss [j6, j7]

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if( bgotonextstatement )
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                                    bool j7valid[1]= {false};
//                                                                    _nj7 = 1;
//                                                                    IkReal x206=(pz*sj8);
//                                                                    CheckValue<IkReal> x207=IKPowWithIntegerCheck<IKFAST_REAL>(((-1.08)+(((-2.0)*x206))+(((-0.72)*cj8))),-1);
                                                                    if (false)//if(!x207.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x208=IKPowWithIntegerCheck<IKFAST_REAL>(((-27.0)+(((-50.0)*x206))+(((-18.0)*cj8))),-1);
                                                                    if (false)//if(!x208.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((x207.value)*(((((0.72)*sj8))+(((0.48)*cj8*sj8))+(((3.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x208.value)*(((15.0)+(((12.0)*(cj8*cj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x207.value)*(((((0.72)*sj8))+(((0.48)*cj8*sj8))+(((3.0)*pz))))))+IKsqr(((x208.value)*(((15.0)+(((12.0)*(cj8*cj8)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j7array[0]=IKatan2(((x207.value)*(((((0.72)*sj8))+(((0.48)*cj8*sj8))+(((3.0)*pz))))), ((x208.value)*(((15.0)+(((12.0)*(cj8*cj8)))))));
//                                                                    sj7array[0]=IKsin(j7array[0]);
//                                                                    cj7array[0]=IKcos(j7array[0]);
                                                                    if (false)//if( j7array[0] > IKPI )
                                                                    {
//                                                                        j7array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j7array[0] < -IKPI )
                                                                    {
//                                                                        j7array[0]+=IK2PI;
                                                                    }
//                                                                    j7valid[0] = true;
//                                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                    {
                                                                        if (false)//if( !j7valid[ij7] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij7[0] = ij7;
//                                                                        _ij7[1] = -1;
//                                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                        {
                                                                            if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j7valid[iij7]=false;
//                                                                                _ij7[1] = iij7;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j7 = j7array[ij7];
//                                                                        cj7 = cj7array[ij7];
//                                                                        sj7 = sj7array[ij7];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x209=IKcos(j7);
//                                                                            IkReal x210=IKsin(j7);
//                                                                            IkReal x211=((1.0)*pz);
//                                                                            IkReal x212=((0.24)*sj8);
//                                                                            IkReal x213=((0.24)*cj8);
//                                                                            IkReal x214=((0.36)*x209);
//                                                                            IkReal x215=((0.36)*x210);
//                                                                            evalcond[0]=(((pz*x209))+(((-1.0)*x212))+(((-1.0)*x215)));
//                                                                            evalcond[1]=((-0.36)+(((-1.0)*x210*x211))+(((-1.0)*x214))+(((-1.0)*x213)));
//                                                                            evalcond[2]=((-0.2016)+(((-1.0)*pz*x211))+(((-0.2592)*x209))+(((-0.72)*pz*x210)));
//                                                                            evalcond[3]=((-0.36)+(((-1.0)*x210*x212))+(((-1.0)*x214))+(((-1.0)*x209*x213)));
//                                                                            evalcond[4]=(((x209*x212))+(((-1.0)*x210*x213))+(((-1.0)*x211))+(((-1.0)*x215)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1]= {false};
//                                                                            _nj6 = 1;
//                                                                            j6array[0]=0;
//                                                                            sj6array[0]=IKsin(j6array[0]);
//                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                            if (false)//if( j6array[0] > IKPI )
                                                                            {
//                                                                                j6array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j6array[0] < -IKPI )
                                                                            {
//                                                                                j6array[0]+=IK2PI;
                                                                            }
//                                                                            j6valid[0] = true;
//                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                                if (false)//if( !j6valid[ij6] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij6[0] = ij6;
//                                                                                _ij6[1] = -1;
//                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                {
                                                                                    if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j6valid[iij6]=false;
//                                                                                        _ij6[1] = iij6;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j6 = j6array[ij6];
//                                                                                cj6 = cj6array[ij6];
//                                                                                sj6 = sj6array[ij6];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j6;
//                                                                                    vinfos[0].indices[0] = _ij6[0];
//                                                                                    vinfos[0].indices[1] = _ij6[1];
//                                                                                    vinfos[0].maxsolutions = _nj6;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j7;
//                                                                                    vinfos[1].indices[0] = _ij7[0];
//                                                                                    vinfos[1].indices[1] = _ij7[1];
//                                                                                    vinfos[1].maxsolutions = _nj7;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j8;
//                                                                                    vinfos[2].indices[0] = _ij8[0];
//                                                                                    vinfos[2].indices[1] = _ij8[1];
//                                                                                    vinfos[2].maxsolutions = _nj8;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                            bool j7valid[1]= {false};
//                                                            _nj7 = 1;
//                                                            IkReal x216=((54.0)*sj8);
//                                                            IkReal x217=((225.0)*pz);
//                                                            CheckValue<IkReal> x218 = IKatan2WithCheck(IkReal(((-36.0)+(((625.0)*(pz*pz)))+(((36.0)*(cj8*cj8))))),IkReal(((((-36.0)*cj8*sj8))+x217+(((-1.0)*x216)))),IKFAST_ATAN2_MAGTHRESH);
                                                            if (false)//if(!x218.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            CheckValue<IkReal> x219=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign((x216+(((-1.0)*x217))+(((-150.0)*cj8*pz)))),-1);
                                                            if (false)//if(!x219.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            j7array[0]=((-1.5707963267949)+(x218.value)+(((1.5707963267949)*(x219.value))));
//                                                            sj7array[0]=IKsin(j7array[0]);
//                                                            cj7array[0]=IKcos(j7array[0]);
                                                            if (false)//if( j7array[0] > IKPI )
                                                            {
//                                                                j7array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j7array[0] < -IKPI )
                                                            {
//                                                                j7array[0]+=IK2PI;
                                                            }
//                                                            j7valid[0] = true;
//                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                            {
                                                                if (false)//if( !j7valid[ij7] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij7[0] = ij7;
//                                                                _ij7[1] = -1;
//                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                {
                                                                    if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j7valid[iij7]=false;
//                                                                        _ij7[1] = iij7;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j7 = j7array[ij7];
//                                                                cj7 = cj7array[ij7];
//                                                                sj7 = sj7array[ij7];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x220=IKcos(j7);
//                                                                    IkReal x221=IKsin(j7);
//                                                                    IkReal x222=((1.0)*pz);
//                                                                    IkReal x223=((0.24)*sj8);
//                                                                    IkReal x224=((0.24)*cj8);
//                                                                    IkReal x225=((0.36)*x220);
//                                                                    IkReal x226=((0.36)*x221);
//                                                                    evalcond[0]=(((pz*x220))+(((-1.0)*x223))+(((-1.0)*x226)));
//                                                                    evalcond[1]=((-0.36)+(((-1.0)*x221*x222))+(((-1.0)*x224))+(((-1.0)*x225)));
//                                                                    evalcond[2]=((-0.2016)+(((-0.72)*pz*x221))+(((-0.2592)*x220))+(((-1.0)*pz*x222)));
//                                                                    evalcond[3]=((-0.36)+(((-1.0)*x220*x224))+(((-1.0)*x221*x223))+(((-1.0)*x225)));
//                                                                    evalcond[4]=(((x220*x223))+(((-1.0)*x221*x224))+(((-1.0)*x226))+(((-1.0)*x222)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                    bool j6valid[1]= {false};
//                                                                    _nj6 = 1;
//                                                                    j6array[0]=0;
//                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                    if (false)//if( j6array[0] > IKPI )
                                                                    {
//                                                                        j6array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                    {
//                                                                        j6array[0]+=IK2PI;
                                                                    }
//                                                                    j6valid[0] = true;
//                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                    {
                                                                        if (false)//if( !j6valid[ij6] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij6[0] = ij6;
//                                                                        _ij6[1] = -1;
//                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                        {
                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j6valid[iij6]=false;
//                                                                                _ij6[1] = iij6;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j6 = j6array[ij6];
//                                                                        cj6 = cj6array[ij6];
//                                                                        sj6 = sj6array[ij6];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j6;
//                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j7;
//                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j8;
//                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                    bool j7valid[1]= {false};
//                                                    _nj7 = 1;
//                                                    IkReal x227=((150.0)*pz);
//                                                    CheckValue<IkReal> x228=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                    if (false)//if(!x228.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    CheckValue<IkReal> x229 = IKatan2WithCheck(IkReal(((((-54.0)*sj8))+(((-1.0)*cj8*x227))+(((-225.0)*pz)))),IkReal(((-81.0)+(((-54.0)*cj8))+((sj8*x227)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if (false)//if(!x229.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x228.value)))+(x229.value));
//                                                    sj7array[0]=IKsin(j7array[0]);
//                                                    cj7array[0]=IKcos(j7array[0]);
                                                    if (false)//if( j7array[0] > IKPI )
                                                    {
//                                                        j7array[0]-=IK2PI;
                                                    }
                                                    else if (false)//else if( j7array[0] < -IKPI )
                                                    {
//                                                        j7array[0]+=IK2PI;
                                                    }
//                                                    j7valid[0] = true;
//                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                    {
                                                        if (false)//if( !j7valid[ij7] )
                                                        {
//                                                            continue;
                                                        }
//                                                        _ij7[0] = ij7;
//                                                        _ij7[1] = -1;
//                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                        {
                                                            if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                            {
//                                                                j7valid[iij7]=false;
//                                                                _ij7[1] = iij7;
//                                                                break;
                                                            }
                                                        }
//                                                        j7 = j7array[ij7];
//                                                        cj7 = cj7array[ij7];
//                                                        sj7 = sj7array[ij7];
                                                        {
                                                            IkReal evalcond[5];
//                                                            IkReal x230=IKcos(j7);
//                                                            IkReal x231=IKsin(j7);
//                                                            IkReal x232=((1.0)*pz);
//                                                            IkReal x233=((0.24)*sj8);
//                                                            IkReal x234=((0.24)*cj8);
//                                                            IkReal x235=((0.36)*x230);
//                                                            IkReal x236=((0.36)*x231);
//                                                            evalcond[0]=(((pz*x230))+(((-1.0)*x233))+(((-1.0)*x236)));
//                                                            evalcond[1]=((-0.36)+(((-1.0)*x235))+(((-1.0)*x234))+(((-1.0)*x231*x232)));
//                                                            evalcond[2]=((-0.2016)+(((-1.0)*pz*x232))+(((-0.72)*pz*x231))+(((-0.2592)*x230)));
//                                                            evalcond[3]=((-0.36)+(((-1.0)*x230*x234))+(((-1.0)*x235))+(((-1.0)*x231*x233)));
//                                                            evalcond[4]=(((x230*x233))+(((-1.0)*x232))+(((-1.0)*x236))+(((-1.0)*x231*x234)));
                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
//                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                            bool j6valid[1]= {false};
//                                                            _nj6 = 1;
//                                                            j6array[0]=0;
//                                                            sj6array[0]=IKsin(j6array[0]);
//                                                            cj6array[0]=IKcos(j6array[0]);
                                                            if (false)//if( j6array[0] > IKPI )
                                                            {
//                                                                j6array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j6array[0] < -IKPI )
                                                            {
//                                                                j6array[0]+=IK2PI;
                                                            }
//                                                            j6valid[0] = true;
//                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                            {
                                                                if (false)//if( !j6valid[ij6] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij6[0] = ij6;
//                                                                _ij6[1] = -1;
//                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                {
                                                                    if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j6valid[iij6]=false;
//                                                                        _ij6[1] = iij6;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j6 = j6array[ij6];
//                                                                cj6 = cj6array[ij6];
//                                                                sj6 = sj6array[ij6];

                                                                {
//                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                    vinfos[0].jointtype = 1;
//                                                                    vinfos[0].foffset = j6;
//                                                                    vinfos[0].indices[0] = _ij6[0];
//                                                                    vinfos[0].indices[1] = _ij6[1];
//                                                                    vinfos[0].maxsolutions = _nj6;
//                                                                    vinfos[1].jointtype = 1;
//                                                                    vinfos[1].foffset = j7;
//                                                                    vinfos[1].indices[0] = _ij7[0];
//                                                                    vinfos[1].indices[1] = _ij7[1];
//                                                                    vinfos[1].maxsolutions = _nj7;
//                                                                    vinfos[2].jointtype = 1;
//                                                                    vinfos[2].foffset = j8;
//                                                                    vinfos[2].indices[0] = _ij8[0];
//                                                                    vinfos[2].indices[1] = _ij8[1];
//                                                                    vinfos[2].maxsolutions = _nj8;
//                                                                    int vfree[0];
//                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if (false)//if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
//                                    bgotonextstatement=false;
//                                    continue; // branch miss [j6, j7, j8]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j6array[2], cj6array[2], sj6array[2];
                        bool j6valid[2]= {false};
                        _nj6 = 2;
                        CheckValue<IkReal> x238 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x238.valid)
                        {
//                            continue;
                        }
                        IkReal x237=x238.value;
                        j6array[0]=((-1.0)*x237);
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        j6array[1]=((3.14159265358979)+(((-1.0)*x237)));
                        sj6array[1]=IKsin(j6array[1]);
                        cj6array[1]=IKcos(j6array[1]);
                        if( j6array[0] > IKPI )
                        {
//                            j6array[0]-=IK2PI;
                        }
                        else if( j6array[0] < -IKPI )
                        {
//                            j6array[0]+=IK2PI;
                        }
                        j6valid[0] = true;
                        if( j6array[1] > IKPI )
                        {
                            j6array[1]-=IK2PI;
                        }
                        else if( j6array[1] < -IKPI )
                        {
//                            j6array[1]+=IK2PI;
                        }
                        j6valid[1] = true;
                        for(int ij6 = 0; ij6 < 2; ++ij6)
                        {
                            if( !j6valid[ij6] )
                            {
//                                continue;
                            }
                            _ij6[0] = ij6;
                            _ij6[1] = -1;
                            for(int iij6 = ij6+1; iij6 < 2; ++iij6)
                            {
                                if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                {
//                                    j6valid[iij6]=false;
//                                    _ij6[1] = iij6;
//                                    break;
                                }
                            }
                            j6 = j6array[ij6];
                            cj6 = cj6array[ij6];
                            sj6 = sj6array[ij6];

                            {
                                IkReal j8array[2], cj8array[2], sj8array[2];
                                bool j8valid[2]= {false};
                                _nj8 = 2;
                                cj8array[0]=((-0.333333333333333)+(((5.78703703703704)*(py*py)))+(((5.78703703703704)*(pz*pz)))+(((-4.16666666666667)*py*sj6))+(((5.78703703703704)*(px*px)))+(((-4.16666666666667)*cj6*px)));
                                if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j8valid[0] = j8valid[1] = true;
                                    j8array[0] = IKacos(cj8array[0]);
                                    sj8array[0] = IKsin(j8array[0]);
                                    cj8array[1] = cj8array[0];
                                    j8array[1] = -j8array[0];
                                    sj8array[1] = -sj8array[0];
                                }
                                else if( isnan(cj8array[0]) )
                                {
                                    // probably any value will work
//                                    j8valid[0] = true;
//                                    cj8array[0] = 1;
//                                    sj8array[0] = 0;
//                                    j8array[0] = 0;
                                }
                                for(int ij8 = 0; ij8 < 2; ++ij8)
                                {
                                    if( !j8valid[ij8] )
                                    {
                                        continue;
                                    }
                                    _ij8[0] = ij8;
                                    _ij8[1] = -1;
                                    for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                                    {
                                        if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j8valid[iij8]=false;
//                                            _ij8[1] = iij8;
//                                            break;
                                        }
                                    }
                                    j8 = j8array[ij8];
                                    cj8 = cj8array[ij8];
                                    sj8 = sj8array[ij8];

                                    {
                                        IkReal j7eval[3];
                                        IkReal x239=((150.0)*sj8);
                                        IkReal x240=(py*sj6);
                                        IkReal x241=((150.0)*cj8);
                                        IkReal x242=(cj6*px);
                                        j7eval[0]=((1.08333333333333)+cj8);
                                        j7eval[1]=IKsign(((117.0)+(((108.0)*cj8))));
                                        j7eval[2]=((IKabs(((((-1.0)*pz*x241))+(((-54.0)*sj8))+((x239*x240))+((x239*x242))+(((-225.0)*pz)))))+(IKabs(((-81.0)+((x240*x241))+(((-54.0)*cj8))+((pz*x239))+((x241*x242))+(((225.0)*x242))+(((225.0)*x240))))));
                                        if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j7eval[3];
//                                                IkReal x243=(cj6*px);
//                                                IkReal x244=((25.0)*pz);
//                                                IkReal x245=(py*sj6);
//                                                IkReal x246=(pz*sj8);
//                                                IkReal x247=((2.77777777777778)*cj8);
//                                                IkReal x248=((6.0)*cj8);
//                                                j7eval[0]=((1.5)+cj8+(((-1.0)*x243*x247))+(((2.77777777777778)*x246))+(((-1.0)*x245*x247))+(((-4.16666666666667)*x243))+(((-4.16666666666667)*x245)));
//                                                j7eval[1]=((IKabs(((((-1.44)*cj8*sj8))+(((-2.16)*sj8))+(((-9.0)*pz))+((x244*x245))+((x243*x244)))))+(IKabs(((-3.24)+(((-1.44)*(cj8*cj8)))+(((-4.32)*cj8))+((pz*x244))))));
//                                                j7eval[2]=IKsign(((3.24)+(((6.0)*x246))+(((2.16)*cj8))+(((-1.0)*x243*x248))+(((-9.0)*x245))+(((-9.0)*x243))+(((-1.0)*x245*x248))));
                                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j7eval[1];
//                                                        IkReal x249=((2.77777777777778)*sj8);
//                                                        j7eval[0]=(sj8+(((-1.0)*cj6*px*x249))+(((-4.16666666666667)*pz))+(((-1.0)*py*sj6*x249))+(((-2.77777777777778)*cj8*pz)));
                                                        if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j7]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                bool j7valid[1]= {false};
//                                                                _nj7 = 1;
//                                                                IkReal x250=((2.16)*sj8);
//                                                                IkReal x251=((9.0)*pz);
//                                                                IkReal x252=(cj8*pz);
//                                                                IkReal x253=((25.0)*pz);
//                                                                IkReal x254=(py*sj6);
//                                                                IkReal x255=(cj6*px);
//                                                                IkReal x256=((150.0)*sj8);
//                                                                IkReal x257=((6.0)*sj8);
//                                                                CheckValue<IkReal> x258=IKPowWithIntegerCheck<IKFAST_REAL>(((((54.0)*sj8))+(((-1.0)*x255*x256))+(((-1.0)*x254*x256))+(((-150.0)*x252))+(((-225.0)*pz))),-1);
                                                                if (false)//if(!x258.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x259=IKPowWithIntegerCheck<IKFAST_REAL>(((((-1.0)*x255*x257))+(((-1.0)*x254*x257))+x250+(((-6.0)*x252))+(((-1.0)*x251))),-1);
                                                                if (false)//if(!x259.valid)
                                                                {
//                                                                    continue;
                                                                }
                                                                if (false)//if( IKabs(((x258.value)*(((-36.0)+(((625.0)*(pz*pz)))+(((36.0)*(cj8*cj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x259.value)*(((((-1.44)*cj8*sj8))+x251+(((-1.0)*x253*x255))+(((-1.0)*x253*x254))+(((-1.0)*x250)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x258.value)*(((-36.0)+(((625.0)*(pz*pz)))+(((36.0)*(cj8*cj8)))))))+IKsqr(((x259.value)*(((((-1.44)*cj8*sj8))+x251+(((-1.0)*x253*x255))+(((-1.0)*x253*x254))+(((-1.0)*x250))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                {
//                                                                    continue;
                                                                }
//                                                                j7array[0]=IKatan2(((x258.value)*(((-36.0)+(((625.0)*(pz*pz)))+(((36.0)*(cj8*cj8)))))), ((x259.value)*(((((-1.44)*cj8*sj8))+x251+(((-1.0)*x253*x255))+(((-1.0)*x253*x254))+(((-1.0)*x250))))));
//                                                                sj7array[0]=IKsin(j7array[0]);
//                                                                cj7array[0]=IKcos(j7array[0]);
                                                                if (false)//if( j7array[0] > IKPI )
                                                                {
//                                                                    j7array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j7array[0] < -IKPI )
                                                                {
//                                                                    j7array[0]+=IK2PI;
                                                                }
//                                                                j7valid[0] = true;
//                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                {
                                                                    if (false)//if( !j7valid[ij7] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij7[0] = ij7;
//                                                                    _ij7[1] = -1;
//                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                    {
                                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j7valid[iij7]=false;
//                                                                            _ij7[1] = iij7;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j7 = j7array[ij7];
//                                                                    cj7 = cj7array[ij7];
//                                                                    sj7 = sj7array[ij7];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x260=IKsin(j7);
//                                                                        IkReal x261=IKcos(j7);
//                                                                        IkReal x262=((0.24)*cj8);
//                                                                        IkReal x263=(py*sj6);
//                                                                        IkReal x264=(cj6*px);
//                                                                        IkReal x265=((0.24)*sj8);
//                                                                        IkReal x266=((0.36)*x260);
//                                                                        IkReal x267=((0.36)*x261);
//                                                                        IkReal x268=(pz*x260);
//                                                                        IkReal x269=((0.72)*x261);
//                                                                        evalcond[0]=((((-1.0)*pz))+((x261*x265))+(((-1.0)*x266))+(((-1.0)*x260*x262)));
//                                                                        evalcond[1]=((-0.36)+x264+x263+(((-1.0)*x261*x262))+(((-1.0)*x267))+(((-1.0)*x260*x265)));
//                                                                        evalcond[2]=(((x260*x263))+((x260*x264))+((pz*x261))+(((-1.0)*x265))+(((-1.0)*x266)));
//                                                                        evalcond[3]=((-0.36)+(((-1.0)*x268))+((x261*x264))+((x261*x263))+(((-1.0)*x262))+(((-1.0)*x267)));
//                                                                        evalcond[4]=((-0.2016)+(((-1.0)*(px*px)))+(((-0.72)*x268))+((x264*x269))+((x263*x269))+(((-1.0)*(pz*pz)))+(((-0.2592)*x261))+(((-1.0)*(py*py)))+(((0.72)*x263))+(((0.72)*x264)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j6;
//                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j7;
//                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j8;
//                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                        bool j7valid[1]= {false};
//                                                        _nj7 = 1;
//                                                        IkReal x270=((25.0)*pz);
//                                                        IkReal x271=(py*sj6);
//                                                        IkReal x272=(cj6*px);
//                                                        IkReal x273=((6.0)*cj8);
//                                                        CheckValue<IkReal> x274=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((3.24)+(((-1.0)*x272*x273))+(((2.16)*cj8))+(((6.0)*pz*sj8))+(((-1.0)*x271*x273))+(((-9.0)*x271))+(((-9.0)*x272)))),-1);
                                                        if (false)//if(!x274.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x275 = IKatan2WithCheck(IkReal(((((-1.44)*cj8*sj8))+(((-2.16)*sj8))+(((-9.0)*pz))+((x270*x271))+((x270*x272)))),IkReal(((-3.24)+(((-1.44)*(cj8*cj8)))+(((-4.32)*cj8))+((pz*x270)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x275.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x274.value)))+(x275.value));
//                                                        sj7array[0]=IKsin(j7array[0]);
//                                                        cj7array[0]=IKcos(j7array[0]);
                                                        if (false)//if( j7array[0] > IKPI )
                                                        {
//                                                            j7array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                        {
//                                                            j7array[0]+=IK2PI;
                                                        }
//                                                        j7valid[0] = true;
//                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                        {
                                                            if (false)//if( !j7valid[ij7] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij7[0] = ij7;
//                                                            _ij7[1] = -1;
//                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                            {
                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j7valid[iij7]=false;
//                                                                    _ij7[1] = iij7;
//                                                                    break;
                                                                }
                                                            }
//                                                            j7 = j7array[ij7];
//                                                            cj7 = cj7array[ij7];
//                                                            sj7 = sj7array[ij7];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x276=IKsin(j7);
//                                                                IkReal x277=IKcos(j7);
//                                                                IkReal x278=((0.24)*cj8);
//                                                                IkReal x279=(py*sj6);
//                                                                IkReal x280=(cj6*px);
//                                                                IkReal x281=((0.24)*sj8);
//                                                                IkReal x282=((0.36)*x276);
//                                                                IkReal x283=((0.36)*x277);
//                                                                IkReal x284=(pz*x276);
//                                                                IkReal x285=((0.72)*x277);
//                                                                evalcond[0]=((((-1.0)*pz))+(((-1.0)*x282))+((x277*x281))+(((-1.0)*x276*x278)));
//                                                                evalcond[1]=((-0.36)+(((-1.0)*x277*x278))+(((-1.0)*x276*x281))+x279+x280+(((-1.0)*x283)));
//                                                                evalcond[2]=((((-1.0)*x281))+(((-1.0)*x282))+((x276*x279))+((pz*x277))+((x276*x280)));
//                                                                evalcond[3]=((-0.36)+(((-1.0)*x284))+((x277*x279))+(((-1.0)*x278))+(((-1.0)*x283))+((x277*x280)));
//                                                                evalcond[4]=((-0.2016)+(((-1.0)*(px*px)))+((x279*x285))+(((-0.72)*x284))+(((0.72)*x280))+(((-1.0)*(pz*pz)))+(((-0.2592)*x277))+((x280*x285))+(((-1.0)*(py*py)))+(((0.72)*x279)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j6;
//                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                vinfos[0].maxsolutions = _nj6;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j7;
//                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                vinfos[1].maxsolutions = _nj7;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j8;
//                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                vinfos[2].maxsolutions = _nj8;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                bool j7valid[1]= {false};
                                                _nj7 = 1;
                                                IkReal x286=((150.0)*cj8);
                                                IkReal x287=(py*sj6);
                                                IkReal x288=((150.0)*sj8);
                                                IkReal x289=(cj6*px);
                                                CheckValue<IkReal> x290=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((117.0)+(((108.0)*cj8)))),-1);
                                                if(!x290.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal(((((-54.0)*sj8))+((x288*x289))+(((-1.0)*pz*x286))+(((-225.0)*pz))+((x287*x288)))),IkReal(((-81.0)+((x286*x289))+((x286*x287))+(((-54.0)*cj8))+(((225.0)*x289))+(((225.0)*x287))+((pz*x288)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x291.valid)
                                                {
//                                                    continue;
                                                }
                                                j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x290.value)))+(x291.value));
                                                sj7array[0]=IKsin(j7array[0]);
                                                cj7array[0]=IKcos(j7array[0]);
                                                if( j7array[0] > IKPI )
                                                {
//                                                    j7array[0]-=IK2PI;
                                                }
                                                else if( j7array[0] < -IKPI )
                                                {
//                                                    j7array[0]+=IK2PI;
                                                }
                                                j7valid[0] = true;
                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                {
                                                    if( !j7valid[ij7] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij7[0] = ij7;
                                                    _ij7[1] = -1;
                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                    {
                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j7valid[iij7]=false;
//                                                            _ij7[1] = iij7;
//                                                            break;
                                                        }
                                                    }
                                                    j7 = j7array[ij7];
                                                    cj7 = cj7array[ij7];
                                                    sj7 = sj7array[ij7];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x292=IKsin(j7);
                                                        IkReal x293=IKcos(j7);
                                                        IkReal x294=((0.24)*cj8);
                                                        IkReal x295=(py*sj6);
                                                        IkReal x296=(cj6*px);
                                                        IkReal x297=((0.24)*sj8);
                                                        IkReal x298=((0.36)*x292);
                                                        IkReal x299=((0.36)*x293);
                                                        IkReal x300=(pz*x292);
                                                        IkReal x301=((0.72)*x293);
                                                        evalcond[0]=((((-1.0)*x298))+(((-1.0)*pz))+((x293*x297))+(((-1.0)*x292*x294)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x299))+(((-1.0)*x293*x294))+x295+x296+(((-1.0)*x292*x297)));
                                                        evalcond[2]=((((-1.0)*x298))+(((-1.0)*x297))+((pz*x293))+((x292*x296))+((x292*x295)));
                                                        evalcond[3]=((-0.36)+(((-1.0)*x299))+(((-1.0)*x294))+(((-1.0)*x300))+((x293*x296))+((x293*x295)));
                                                        evalcond[4]=((-0.2016)+(((0.72)*x295))+(((0.72)*x296))+(((-1.0)*(px*px)))+((x295*x301))+(((-0.2592)*x293))+(((-1.0)*(pz*pz)))+((x296*x301))+(((-1.0)*(py*py)))+(((-0.72)*x300)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j6;
                                                        vinfos[0].indices[0] = _ij6[0];
                                                        vinfos[0].indices[1] = _ij6[1];
                                                        vinfos[0].maxsolutions = _nj6;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j7;
                                                        vinfos[1].indices[0] = _ij7[0];
                                                        vinfos[1].indices[1] = _ij7[1];
                                                        vinfos[1].maxsolutions = _nj7;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j8;
                                                        vinfos[2].indices[0] = _ij8[0];
                                                        vinfos[2].indices[1] = _ij8[1];
                                                        vinfos[2].maxsolutions = _nj8;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Hunker (478e384d3e70b2b7bae27b584cda0040)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
