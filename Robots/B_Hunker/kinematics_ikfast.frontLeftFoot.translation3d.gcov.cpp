#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL float
#define IKFAST_NAMESPACE kinematics_ikfast_frontLeftFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-20 01:59:42.168293
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return float(-IKPI_2);
    }
    else if (false)//else if( f >= 1 )
    {
//        return float(IKPI_2);
    }
//    return asinf(f);
}
inline double IKasin(double f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if (false)//else if( f >= 1 )
    {
//        return IKPI_2;
    }
//    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return float(IKPI);
    }
    else if( f >= 1 )
    {
//        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if (false)//if( f <= 0.0f )
    {
//        return 0.0f;
    }
//    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if (false)//if( f <= 0.0 )
    {
//        return 0.0;
    }
//    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKsin(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x0);
    x8=((0.33)*x2);
    x9=(x1*x3);
    eetrans[0]=((0.36)+((x1*x7))+x7+((x0*x4*x6))+((x0*x1*x8)));
    eetrans[1]=(((x8*x9))+((x3*x4*x6))+(((0.36)*x3))+(((0.36)*x9)));
    eetrans[2]=((0.15)+(((-0.36)*x4))+((x1*x6))+(((-1.0)*x4*x8)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j6=numeric_limits<IkReal>::quiet_NaN();
        _ij6[0] = -1;
        _ij6[1] = -1;
        _nj6 = -1;
        j7=numeric_limits<IkReal>::quiet_NaN();
        _ij7[0] = -1;
        _ij7[1] = -1;
        _nj7 = -1;
        j8=numeric_limits<IkReal>::quiet_NaN();
        _ij8[0] = -1;
        _ij8[1] = -1;
        _nj8 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((-0.36)+px);
            new_py=py;
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j6eval[1];
                j6eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j6eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
//                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
//                                bgotonextstatement=false;
                                {
                                    IkReal j8array[2], cj8array[2], sj8array[2];
                                    bool j8valid[2]= {false};
//                                    _nj8 = 2;
//                                    cj8array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz))));
                                    if (false)//if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
//                                        j8valid[0] = j8valid[1] = true;
//                                        j8array[0] = IKacos(cj8array[0]);
//                                        sj8array[0] = IKsin(j8array[0]);
//                                        cj8array[1] = cj8array[0];
//                                        j8array[1] = -j8array[0];
//                                        sj8array[1] = -sj8array[0];
                                    }
                                    else if (false)//else if( isnan(cj8array[0]) )
                                    {
                                        // probably any value will work
//                                        j8valid[0] = true;
//                                        cj8array[0] = 1;
//                                        sj8array[0] = 0;
//                                        j8array[0] = 0;
                                    }
//                                    for(int ij8 = 0; ij8 < 2; ++ij8)
                                    {
                                        if (false)//if( !j8valid[ij8] )
                                        {
//                                            continue;
                                        }
//                                        _ij8[0] = ij8;
//                                        _ij8[1] = -1;
//                                        for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                                        {
                                            if (false)//if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                                            {
//                                                j8valid[iij8]=false;
//                                                _ij8[1] = iij8;
//                                                break;
                                            }
                                        }
//                                        j8 = j8array[ij8];
//                                        cj8 = cj8array[ij8];
//                                        sj8 = sj8array[ij8];

                                        {
                                            IkReal j7eval[3];
//                                            px=0;
//                                            py=0;
//                                            pp=pz*pz;
//                                            IkReal x10=pz*pz;
//                                            IkReal x11=((825.0)*pz);
//                                            j7eval[0]=((1.0)+(((7.71604938271605)*x10)));
//                                            j7eval[1]=IKsign(((324.0)+(((2500.0)*x10))));
//                                            j7eval[2]=((IKabs(((-324.0)+((sj8*x11))+(((-297.0)*cj8)))))+(IKabs(((((-1.0)*cj8*x11))+(((-297.0)*sj8))+(((-900.0)*pz))))));
                                            if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j7eval[1];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    j7eval[0]=((-1.09090909090909)+(((-2.77777777777778)*pz*sj8))+(((-1.0)*cj8)));
                                                    if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j7eval[1];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j7eval[0]=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                            if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
//                                                                        IkReal x12=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                        if (false)//if((x12) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x13=IKabs(IKsqrt(x12));
//                                                                        IkReal x19 = x12;
                                                                        if (false)//if(IKabs(x19)==0)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x14=pow(x19,-0.5);
//                                                                        CheckValue<IkReal> x20=IKPowWithIntegerCheck<IKFAST_REAL>(x13,-1);
                                                                        if (false)//if(!x20.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x15=x20.value;
                                                                        if (false)//if((((1.0)+(((-1.1900826446281)*(x15*x15))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x16=IKsqrt(((1.0)+(((-1.1900826446281)*(x15*x15)))));
//                                                                        IkReal x17=(x14*x15);
//                                                                        IkReal x18=(x14*x16);
//                                                                        CheckValue<IkReal> x21 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x21.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((1.09090909090909)*x15)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x15)) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal gconst0=((((-1.0)*(x21.value)))+(IKasin(((1.09090909090909)*x15))));
//                                                                        IkReal gconst1=((((-3.03030303030303)*pz*x17))+x18);
//                                                                        IkReal gconst2=((((-2.77777777777778)*pz*x18))+(((-1.09090909090909)*x17)));
                                                                        if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x22=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if (false)//if(!x22.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((1.09090909090909)*(x22.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x22.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x23.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((1.09090909090909)*(x22.value))))))+(x23.value)+j8)))), 6.28318530717959)));
                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
//                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j7eval[2];
//                                                                                IkReal x24=pz*pz;
//                                                                                CheckValue<IkReal> x33 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x33.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x25=((1.0)*(x33.value));
//                                                                                IkReal x26=x12;
                                                                                if (false)//if((x26) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x27=IKabs(IKsqrt(x26));
//                                                                                IkReal x34 = x26;
                                                                                if (false)//if(IKabs(x34)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x28=pow(x34,-0.5);
//                                                                                CheckValue<IkReal> x35=IKPowWithIntegerCheck<IKFAST_REAL>(x27,-1);
                                                                                if (false)//if(!x35.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x29=x35.value;
                                                                                if (false)//if((((1.0)+(((-1.1900826446281)*(x29*x29))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x30=IKsqrt(((1.0)+(((-1.1900826446281)*(x29*x29)))));
//                                                                                IkReal x31=(x28*x29);
//                                                                                IkReal x32=(x28*x30);
//                                                                                px=0;
//                                                                                py=0;
//                                                                                pp=x24;
//                                                                                sj8=gconst1;
//                                                                                cj8=gconst2;
                                                                                if (false)//if( (((1.09090908694215)*x29)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x29)) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                j8=((((-1.0)*x25))+(IKasin(((1.09090908694215)*x29))));
                                                                                if (false)//if( (((1.09090909090909)*x29)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x29)) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal gconst0=((((-1.0)*x25))+(IKasin(((1.09090909090909)*x29))));
//                                                                                IkReal gconst1=((((-3.03030303030303)*pz*x31))+x32);
//                                                                                IkReal gconst2=((((-2.77777777777778)*pz*x32))+(((-1.09090909090909)*x31)));
//                                                                                IkReal x36=pz*pz;
//                                                                                j7eval[0]=((1.0)+(((7.71604938271605)*x36)));
//                                                                                j7eval[1]=IKsign(((324.0)+(((2500.0)*x36))));
                                                                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                        bool j7valid[1]= {false};
//                                                                                        _nj7 = 1;
//                                                                                        IkReal x37=((297.0)*gconst1);
//                                                                                        IkReal x38=((900.0)*pz);
//                                                                                        CheckValue<IkReal> x39 = IKatan2WithCheck(IkReal(((((594.0)*gconst2))+(((272.25)*(gconst2*gconst2))))),IkReal(((((-1.0)*x37))+(((-272.25)*gconst1*gconst2))+x38)),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x39.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x40=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-825.0)*gconst2*pz))+(((-1.0)*x38))+x37)),-1);
                                                                                        if (false)//if(!x40.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j7array[0]=((-1.5707963267949)+(x39.value)+(((1.5707963267949)*(x40.value))));
//                                                                                        sj7array[0]=IKsin(j7array[0]);
//                                                                                        cj7array[0]=IKcos(j7array[0]);
                                                                                        if (false)//if( j7array[0] > IKPI )
                                                                                        {
//                                                                                            j7array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                                                        {
//                                                                                            j7array[0]+=IK2PI;
                                                                                        }
//                                                                                        j7valid[0] = true;
//                                                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                        {
                                                                                            if (false)//if( !j7valid[ij7] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij7[0] = ij7;
//                                                                                            _ij7[1] = -1;
//                                                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                            {
                                                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j7valid[iij7]=false;
//                                                                                                    _ij7[1] = iij7;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j7 = j7array[ij7];
//                                                                                            cj7 = cj7array[ij7];
//                                                                                            sj7 = sj7array[ij7];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x41=IKcos(j7);
//                                                                                                IkReal x42=IKsin(j7);
//                                                                                                IkReal x43=((0.33)*gconst1);
//                                                                                                IkReal x44=((1.0)*pz);
//                                                                                                IkReal x45=((0.33)*gconst2);
//                                                                                                IkReal x46=((0.36)*x41);
//                                                                                                IkReal x47=((0.36)*x42);
//                                                                                                evalcond[0]=(((pz*x41))+(((-1.0)*x47))+(((-1.0)*x43)));
//                                                                                                evalcond[1]=((-0.36)+(((-1.0)*x42*x44))+(((-1.0)*x45))+(((-1.0)*x46)));
//                                                                                                evalcond[2]=((-0.1503)+(((-0.2592)*x41))+(((-1.0)*pz*x44))+(((-0.72)*pz*x42)));
//                                                                                                evalcond[3]=((-0.36)+(((-1.0)*x42*x43))+(((-1.0)*x46))+(((-1.0)*x41*x45)));
//                                                                                                evalcond[4]=(((x41*x43))+(((-1.0)*x42*x45))+(((-1.0)*x44))+(((-1.0)*x47)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                bool j6valid[1]= {false};
//                                                                                                _nj6 = 1;
//                                                                                                j6array[0]=0;
//                                                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                                if (false)//if( j6array[0] > IKPI )
                                                                                                {
//                                                                                                    j6array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                                                {
//                                                                                                    j6array[0]+=IK2PI;
                                                                                                }
//                                                                                                j6valid[0] = true;
//                                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                {
                                                                                                    if (false)//if( !j6valid[ij6] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij6[0] = ij6;
//                                                                                                    _ij6[1] = -1;
//                                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                    {
                                                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j6valid[iij6]=false;
//                                                                                                            _ij6[1] = iij6;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j6 = j6array[ij6];
//                                                                                                    cj6 = cj6array[ij6];
//                                                                                                    sj6 = sj6array[ij6];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j6;
//                                                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j7;
//                                                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j8;
//                                                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                        bool j7valid[1]= {false};
//                                                                                        _nj7 = 1;
//                                                                                        IkReal x48=((825.0)*pz);
//                                                                                        CheckValue<IkReal> x49=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((324.0)+(((2500.0)*(pz*pz))))),-1);
                                                                                        if (false)//if(!x49.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(((((-297.0)*gconst1))+(((-1.0)*gconst2*x48))+(((-900.0)*pz)))),IkReal(((-324.0)+(((-297.0)*gconst2))+((gconst1*x48)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x50.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x49.value)))+(x50.value));
//                                                                                        sj7array[0]=IKsin(j7array[0]);
//                                                                                        cj7array[0]=IKcos(j7array[0]);
                                                                                        if (false)//if( j7array[0] > IKPI )
                                                                                        {
//                                                                                            j7array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                                                        {
//                                                                                            j7array[0]+=IK2PI;
                                                                                        }
//                                                                                        j7valid[0] = true;
//                                                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                        {
                                                                                            if (false)//if( !j7valid[ij7] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij7[0] = ij7;
//                                                                                            _ij7[1] = -1;
//                                                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                            {
                                                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j7valid[iij7]=false;
//                                                                                                    _ij7[1] = iij7;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j7 = j7array[ij7];
//                                                                                            cj7 = cj7array[ij7];
//                                                                                            sj7 = sj7array[ij7];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x51=IKcos(j7);
//                                                                                                IkReal x52=IKsin(j7);
//                                                                                                IkReal x53=((0.33)*gconst1);
//                                                                                                IkReal x54=((1.0)*pz);
//                                                                                                IkReal x55=((0.33)*gconst2);
//                                                                                                IkReal x56=((0.36)*x51);
//                                                                                                IkReal x57=((0.36)*x52);
//                                                                                                evalcond[0]=(((pz*x51))+(((-1.0)*x57))+(((-1.0)*x53)));
//                                                                                                evalcond[1]=((-0.36)+(((-1.0)*x52*x54))+(((-1.0)*x56))+(((-1.0)*x55)));
//                                                                                                evalcond[2]=((-0.1503)+(((-0.72)*pz*x52))+(((-0.2592)*x51))+(((-1.0)*pz*x54)));
//                                                                                                evalcond[3]=((-0.36)+(((-1.0)*x52*x53))+(((-1.0)*x51*x55))+(((-1.0)*x56)));
//                                                                                                evalcond[4]=((((-1.0)*x52*x55))+((x51*x53))+(((-1.0)*x57))+(((-1.0)*x54)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                bool j6valid[1]= {false};
//                                                                                                _nj6 = 1;
//                                                                                                j6array[0]=0;
//                                                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                                if (false)//if( j6array[0] > IKPI )
                                                                                                {
//                                                                                                    j6array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                                                {
//                                                                                                    j6array[0]+=IK2PI;
                                                                                                }
//                                                                                                j6valid[0] = true;
//                                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                {
                                                                                                    if (false)//if( !j6valid[ij6] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij6[0] = ij6;
//                                                                                                    _ij6[1] = -1;
//                                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                    {
                                                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j6valid[iij6]=false;
//                                                                                                            _ij6[1] = iij6;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j6 = j6array[ij6];
//                                                                                                    cj6 = cj6array[ij6];
//                                                                                                    sj6 = sj6array[ij6];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j6;
//                                                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j7;
//                                                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j8;
//                                                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if (false)//if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            IkReal x58=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                            if (false)//if((x58) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x59=IKabs(IKsqrt(x58));
//                                                                            IkReal x65 = x58;
                                                                            if (false)//if(IKabs(x65)==0)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x60=pow(x65,-0.5);
//                                                                            IkReal x61=(pz*x60);
//                                                                            CheckValue<IkReal> x66=IKPowWithIntegerCheck<IKFAST_REAL>(x59,-1);
                                                                            if (false)//if(!x66.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x62=x66.value;
//                                                                            IkReal x63=((1.09090909090909)*x62);
                                                                            if (false)//if((((1.0)+(((-1.1900826446281)*(x62*x62))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x64=IKsqrt(((1.0)+(((-1.1900826446281)*(x62*x62)))));
//                                                                            CheckValue<IkReal> x67 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x67.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (x63) < -1-IKFAST_SINCOS_THRESH || (x63) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(x67.value)))+(((-1.0)*(IKasin(x63)))));
//                                                                            IkReal gconst4=((((-1.0)*x60*x64))+(((-3.03030303030303)*x61*x62)));
//                                                                            IkReal gconst5=((((2.77777777777778)*x61*x64))+(((-1.0)*x60*x63)));
                                                                            if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x68=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if (false)//if(!x68.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (((1.09090909090909)*(x68.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x68.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x69.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((1.09090909090909)*(x68.value))))+(x69.value)+j8)))), 6.28318530717959)));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j7eval[2];
//                                                                                    IkReal x70=pz*pz;
//                                                                                    CheckValue<IkReal> x79 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x79.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x71=((1.0)*(x79.value));
//                                                                                    IkReal x72=x58;
                                                                                    if (false)//if((x72) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x73=IKabs(IKsqrt(x72));
//                                                                                    IkReal x80 = x72;
                                                                                    if (false)//if(IKabs(x80)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x74=pow(x80,-0.5);
//                                                                                    CheckValue<IkReal> x81=IKPowWithIntegerCheck<IKFAST_REAL>(x73,-1);
                                                                                    if (false)//if(!x81.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x75=x81.value;
                                                                                    if (false)//if((((1.0)+(((-1.1900826446281)*(x75*x75))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x76=IKsqrt(((1.0)+(((-1.1900826446281)*(x75*x75)))));
//                                                                                    IkReal x77=(x74*x75);
//                                                                                    IkReal x78=(x74*x76);
//                                                                                    px=0;
//                                                                                    py=0;
//                                                                                    pp=x70;
//                                                                                    sj8=gconst4;
//                                                                                    cj8=gconst5;
                                                                                    if (false)//if( (((1.09090908694215)*x75)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x75)) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    j8=((3.14159265)+(((-1.0)*x71))+(((-1.0)*(IKasin(((1.09090908694215)*x75))))));
                                                                                    if (false)//if( (((1.09090909090909)*x75)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x75)) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal gconst3=((3.14159265358979)+(((-1.0)*x71))+(((-1.0)*(IKasin(((1.09090909090909)*x75))))));
//                                                                                    IkReal gconst4=((((-1.0)*x78))+(((-3.03030303030303)*pz*x77)));
//                                                                                    IkReal gconst5=((((-1.09090909090909)*x77))+(((2.77777777777778)*pz*x78)));
//                                                                                    IkReal x82=pz*pz;
//                                                                                    j7eval[0]=((1.0)+(((7.71604938271605)*x82)));
//                                                                                    j7eval[1]=IKsign(((324.0)+(((2500.0)*x82))));
                                                                                    if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                            bool j7valid[1]= {false};
//                                                                                            _nj7 = 1;
//                                                                                            IkReal x83=(gconst4*pz);
//                                                                                            CheckValue<IkReal> x84=IKPowWithIntegerCheck<IKFAST_REAL>(((-4.32)+(((-3.96)*gconst5))+(((-11.0)*x83))),-1);
                                                                                            if (false)//if(!x84.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x85=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((-1100.0)*x83))+(((-396.0)*gconst5))),-1);
                                                                                            if (false)//if(!x85.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
                                                                                            if (false)//if( IKabs(((x84.value)*(((((12.0)*pz))+(((3.63)*gconst4*gconst5))+(((3.96)*gconst4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x85.value)*(((432.0)+(((-363.0)*(gconst4*gconst4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x84.value)*(((((12.0)*pz))+(((3.63)*gconst4*gconst5))+(((3.96)*gconst4))))))+IKsqr(((x85.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j7array[0]=IKatan2(((x84.value)*(((((12.0)*pz))+(((3.63)*gconst4*gconst5))+(((3.96)*gconst4))))), ((x85.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))));
//                                                                                            sj7array[0]=IKsin(j7array[0]);
//                                                                                            cj7array[0]=IKcos(j7array[0]);
                                                                                            if (false)//if( j7array[0] > IKPI )
                                                                                            {
//                                                                                                j7array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j7array[0] < -IKPI )
                                                                                            {
//                                                                                                j7array[0]+=IK2PI;
                                                                                            }
//                                                                                            j7valid[0] = true;
//                                                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                            {
                                                                                                if (false)//if( !j7valid[ij7] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij7[0] = ij7;
//                                                                                                _ij7[1] = -1;
//                                                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                {
                                                                                                    if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j7valid[iij7]=false;
//                                                                                                        _ij7[1] = iij7;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j7 = j7array[ij7];
//                                                                                                cj7 = cj7array[ij7];
//                                                                                                sj7 = sj7array[ij7];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x86=IKcos(j7);
//                                                                                                    IkReal x87=IKsin(j7);
//                                                                                                    IkReal x88=((0.33)*gconst5);
//                                                                                                    IkReal x89=((0.33)*gconst4);
//                                                                                                    IkReal x90=((1.0)*pz);
//                                                                                                    IkReal x91=((0.36)*x86);
//                                                                                                    IkReal x92=((0.36)*x87);
//                                                                                                    evalcond[0]=(((pz*x86))+(((-1.0)*x92))+(((-1.0)*x89)));
//                                                                                                    evalcond[1]=((-0.36)+(((-1.0)*x87*x90))+(((-1.0)*x91))+(((-1.0)*x88)));
//                                                                                                    evalcond[2]=((-0.1503)+(((-1.0)*pz*x90))+(((-0.2592)*x86))+(((-0.72)*pz*x87)));
//                                                                                                    evalcond[3]=((-0.36)+(((-1.0)*x86*x88))+(((-1.0)*x87*x89))+(((-1.0)*x91)));
//                                                                                                    evalcond[4]=(((x86*x89))+(((-1.0)*x87*x88))+(((-1.0)*x90))+(((-1.0)*x92)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                    bool j6valid[1]= {false};
//                                                                                                    _nj6 = 1;
//                                                                                                    j6array[0]=0;
//                                                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                                    if (false)//if( j6array[0] > IKPI )
                                                                                                    {
//                                                                                                        j6array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j6array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j6valid[0] = true;
//                                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                    {
                                                                                                        if (false)//if( !j6valid[ij6] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij6[0] = ij6;
//                                                                                                        _ij6[1] = -1;
//                                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                        {
                                                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j6valid[iij6]=false;
//                                                                                                                _ij6[1] = iij6;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j6 = j6array[ij6];
//                                                                                                        cj6 = cj6array[ij6];
//                                                                                                        sj6 = sj6array[ij6];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j6;
//                                                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j7;
//                                                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j8;
//                                                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                            bool j7valid[1]= {false};
//                                                                                            _nj7 = 1;
//                                                                                            IkReal x93=((825.0)*pz);
//                                                                                            CheckValue<IkReal> x94 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x93))+(((-297.0)*gconst4))+(((-900.0)*pz)))),IkReal(((-324.0)+(((-297.0)*gconst5))+((gconst4*x93)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x94.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x95=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((324.0)+(((2500.0)*(pz*pz))))),-1);
                                                                                            if (false)//if(!x95.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j7array[0]=((-1.5707963267949)+(x94.value)+(((1.5707963267949)*(x95.value))));
//                                                                                            sj7array[0]=IKsin(j7array[0]);
//                                                                                            cj7array[0]=IKcos(j7array[0]);
                                                                                            if (false)//if( j7array[0] > IKPI )
                                                                                            {
//                                                                                                j7array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j7array[0] < -IKPI )
                                                                                            {
//                                                                                                j7array[0]+=IK2PI;
                                                                                            }
//                                                                                            j7valid[0] = true;
//                                                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                            {
                                                                                                if (false)//if( !j7valid[ij7] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij7[0] = ij7;
//                                                                                                _ij7[1] = -1;
//                                                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                {
                                                                                                    if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j7valid[iij7]=false;
//                                                                                                        _ij7[1] = iij7;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j7 = j7array[ij7];
//                                                                                                cj7 = cj7array[ij7];
//                                                                                                sj7 = sj7array[ij7];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x96=IKcos(j7);
//                                                                                                    IkReal x97=IKsin(j7);
//                                                                                                    IkReal x98=((0.33)*gconst5);
//                                                                                                    IkReal x99=((0.33)*gconst4);
//                                                                                                    IkReal x100=((1.0)*pz);
//                                                                                                    IkReal x101=((0.36)*x96);
//                                                                                                    IkReal x102=((0.36)*x97);
//                                                                                                    evalcond[0]=((((-1.0)*x102))+((pz*x96))+(((-1.0)*x99)));
//                                                                                                    evalcond[1]=((-0.36)+(((-1.0)*x101))+(((-1.0)*x98))+(((-1.0)*x100*x97)));
//                                                                                                    evalcond[2]=((-0.1503)+(((-1.0)*pz*x100))+(((-0.2592)*x96))+(((-0.72)*pz*x97)));
//                                                                                                    evalcond[3]=((-0.36)+(((-1.0)*x101))+(((-1.0)*x96*x98))+(((-1.0)*x97*x99)));
//                                                                                                    evalcond[4]=(((x96*x99))+(((-1.0)*x100))+(((-1.0)*x102))+(((-1.0)*x97*x98)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                    bool j6valid[1]= {false};
//                                                                                                    _nj6 = 1;
//                                                                                                    j6array[0]=0;
//                                                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                                    if (false)//if( j6array[0] > IKPI )
                                                                                                    {
//                                                                                                        j6array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j6array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j6valid[0] = true;
//                                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                    {
                                                                                                        if (false)//if( !j6valid[ij6] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij6[0] = ij6;
//                                                                                                        _ij6[1] = -1;
//                                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                        {
                                                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j6valid[iij6]=false;
//                                                                                                                _ij6[1] = iij6;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j6 = j6array[ij6];
//                                                                                                        cj6 = cj6array[ij6];
//                                                                                                        sj6 = sj6array[ij6];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j6;
//                                                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j7;
//                                                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j8;
//                                                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                if( 1 )
                                                                                {
//                                                                                    bgotonextstatement=false;
//                                                                                    continue; // branch miss [j6, j7]

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if( bgotonextstatement )
                                                                            {
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                                    bool j7valid[1]= {false};
//                                                                    _nj7 = 1;
//                                                                    IkReal x103=pz*pz;
//                                                                    CheckValue<IkReal> x104=IKPowWithIntegerCheck<IKFAST_REAL>(((2916.0)+(((22500.0)*x103))),-1);
                                                                    if (false)//if(!x104.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x105=IKPowWithIntegerCheck<IKFAST_REAL>(((324.0)+(((2500.0)*x103))),-1);
                                                                    if (false)//if(!x105.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((x104.value)*(((((-2673.0)*sj8))+(((-31250.0)*(pz*pz*pz)))+(((-4696.875)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x105.value)*(((-187.875)+(((-1250.0)*x103))+(((825.0)*pz*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x104.value)*(((((-2673.0)*sj8))+(((-31250.0)*(pz*pz*pz)))+(((-4696.875)*pz))))))+IKsqr(((x105.value)*(((-187.875)+(((-1250.0)*x103))+(((825.0)*pz*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j7array[0]=IKatan2(((x104.value)*(((((-2673.0)*sj8))+(((-31250.0)*(pz*pz*pz)))+(((-4696.875)*pz))))), ((x105.value)*(((-187.875)+(((-1250.0)*x103))+(((825.0)*pz*sj8))))));
//                                                                    sj7array[0]=IKsin(j7array[0]);
//                                                                    cj7array[0]=IKcos(j7array[0]);
                                                                    if (false)//if( j7array[0] > IKPI )
                                                                    {
//                                                                        j7array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j7array[0] < -IKPI )
                                                                    {
//                                                                        j7array[0]+=IK2PI;
                                                                    }
//                                                                    j7valid[0] = true;
//                                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                    {
                                                                        if (false)//if( !j7valid[ij7] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij7[0] = ij7;
//                                                                        _ij7[1] = -1;
//                                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                        {
                                                                            if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j7valid[iij7]=false;
//                                                                                _ij7[1] = iij7;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j7 = j7array[ij7];
//                                                                        cj7 = cj7array[ij7];
//                                                                        sj7 = sj7array[ij7];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x106=IKcos(j7);
//                                                                            IkReal x107=IKsin(j7);
//                                                                            IkReal x108=((0.33)*sj8);
//                                                                            IkReal x109=((0.33)*cj8);
//                                                                            IkReal x110=((1.0)*pz);
//                                                                            IkReal x111=((0.36)*x106);
//                                                                            IkReal x112=((0.36)*x107);
//                                                                            evalcond[0]=(((pz*x106))+(((-1.0)*x108))+(((-1.0)*x112)));
//                                                                            evalcond[1]=((-0.36)+(((-1.0)*x107*x110))+(((-1.0)*x109))+(((-1.0)*x111)));
//                                                                            evalcond[2]=((-0.1503)+(((-0.2592)*x106))+(((-0.72)*pz*x107))+(((-1.0)*pz*x110)));
//                                                                            evalcond[3]=((-0.36)+(((-1.0)*x107*x108))+(((-1.0)*x111))+(((-1.0)*x106*x109)));
//                                                                            evalcond[4]=(((x106*x108))+(((-1.0)*x107*x109))+(((-1.0)*x112))+(((-1.0)*x110)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1]= {false};
//                                                                            _nj6 = 1;
//                                                                            j6array[0]=0;
//                                                                            sj6array[0]=IKsin(j6array[0]);
//                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                            if (false)//if( j6array[0] > IKPI )
                                                                            {
//                                                                                j6array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j6array[0] < -IKPI )
                                                                            {
//                                                                                j6array[0]+=IK2PI;
                                                                            }
//                                                                            j6valid[0] = true;
//                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                                if (false)//if( !j6valid[ij6] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij6[0] = ij6;
//                                                                                _ij6[1] = -1;
//                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                {
                                                                                    if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j6valid[iij6]=false;
//                                                                                        _ij6[1] = iij6;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j6 = j6array[ij6];
//                                                                                cj6 = cj6array[ij6];
//                                                                                sj6 = sj6array[ij6];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j6;
//                                                                                    vinfos[0].indices[0] = _ij6[0];
//                                                                                    vinfos[0].indices[1] = _ij6[1];
//                                                                                    vinfos[0].maxsolutions = _nj6;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j7;
//                                                                                    vinfos[1].indices[0] = _ij7[0];
//                                                                                    vinfos[1].indices[1] = _ij7[1];
//                                                                                    vinfos[1].maxsolutions = _nj7;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j8;
//                                                                                    vinfos[2].indices[0] = _ij8[0];
//                                                                                    vinfos[2].indices[1] = _ij8[1];
//                                                                                    vinfos[2].maxsolutions = _nj8;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                            bool j7valid[1]= {false};
//                                                            _nj7 = 1;
//                                                            IkReal x113=(pz*sj8);
//                                                            CheckValue<IkReal> x114=IKPowWithIntegerCheck<IKFAST_REAL>(((-4.32)+(((-3.96)*cj8))+(((-11.0)*x113))),-1);
                                                            if (false)//if(!x114.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            CheckValue<IkReal> x115=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((-1100.0)*x113))+(((-396.0)*cj8))),-1);
                                                            if (false)//if(!x115.valid)
                                                            {
//                                                                continue;
                                                            }
                                                            if (false)//if( IKabs(((x114.value)*(((((12.0)*pz))+(((3.63)*cj8*sj8))+(((3.96)*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x115.value)*(((69.0)+(((363.0)*(cj8*cj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x114.value)*(((((12.0)*pz))+(((3.63)*cj8*sj8))+(((3.96)*sj8))))))+IKsqr(((x115.value)*(((69.0)+(((363.0)*(cj8*cj8)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                            {
//                                                                continue;
                                                            }
//                                                            j7array[0]=IKatan2(((x114.value)*(((((12.0)*pz))+(((3.63)*cj8*sj8))+(((3.96)*sj8))))), ((x115.value)*(((69.0)+(((363.0)*(cj8*cj8)))))));
//                                                            sj7array[0]=IKsin(j7array[0]);
//                                                            cj7array[0]=IKcos(j7array[0]);
                                                            if (false)//if( j7array[0] > IKPI )
                                                            {
//                                                                j7array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j7array[0] < -IKPI )
                                                            {
//                                                                j7array[0]+=IK2PI;
                                                            }
//                                                            j7valid[0] = true;
//                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                            {
                                                                if (false)//if( !j7valid[ij7] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij7[0] = ij7;
//                                                                _ij7[1] = -1;
//                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                {
                                                                    if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j7valid[iij7]=false;
//                                                                        _ij7[1] = iij7;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j7 = j7array[ij7];
//                                                                cj7 = cj7array[ij7];
//                                                                sj7 = sj7array[ij7];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x116=IKcos(j7);
//                                                                    IkReal x117=IKsin(j7);
//                                                                    IkReal x118=((0.33)*sj8);
//                                                                    IkReal x119=((0.33)*cj8);
//                                                                    IkReal x120=((1.0)*pz);
//                                                                    IkReal x121=((0.36)*x116);
//                                                                    IkReal x122=((0.36)*x117);
//                                                                    evalcond[0]=(((pz*x116))+(((-1.0)*x118))+(((-1.0)*x122)));
//                                                                    evalcond[1]=((-0.36)+(((-1.0)*x119))+(((-1.0)*x117*x120))+(((-1.0)*x121)));
//                                                                    evalcond[2]=((-0.1503)+(((-1.0)*pz*x120))+(((-0.2592)*x116))+(((-0.72)*pz*x117)));
//                                                                    evalcond[3]=((-0.36)+(((-1.0)*x117*x118))+(((-1.0)*x116*x119))+(((-1.0)*x121)));
//                                                                    evalcond[4]=((((-1.0)*x117*x119))+(((-1.0)*x120))+(((-1.0)*x122))+((x116*x118)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                    bool j6valid[1]= {false};
//                                                                    _nj6 = 1;
//                                                                    j6array[0]=0;
//                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                    if (false)//if( j6array[0] > IKPI )
                                                                    {
//                                                                        j6array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                    {
//                                                                        j6array[0]+=IK2PI;
                                                                    }
//                                                                    j6valid[0] = true;
//                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                    {
                                                                        if (false)//if( !j6valid[ij6] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij6[0] = ij6;
//                                                                        _ij6[1] = -1;
//                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                        {
                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j6valid[iij6]=false;
//                                                                                _ij6[1] = iij6;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j6 = j6array[ij6];
//                                                                        cj6 = cj6array[ij6];
//                                                                        sj6 = sj6array[ij6];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j6;
//                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j7;
//                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j8;
//                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                    bool j7valid[1]= {false};
//                                                    _nj7 = 1;
//                                                    IkReal x123=((825.0)*pz);
//                                                    CheckValue<IkReal> x124=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((324.0)+(((2500.0)*(pz*pz))))),-1);
                                                    if (false)//if(!x124.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    CheckValue<IkReal> x125 = IKatan2WithCheck(IkReal(((((-1.0)*cj8*x123))+(((-297.0)*sj8))+(((-900.0)*pz)))),IkReal(((-324.0)+((sj8*x123))+(((-297.0)*cj8)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if (false)//if(!x125.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x124.value)))+(x125.value));
//                                                    sj7array[0]=IKsin(j7array[0]);
//                                                    cj7array[0]=IKcos(j7array[0]);
                                                    if (false)//if( j7array[0] > IKPI )
                                                    {
//                                                        j7array[0]-=IK2PI;
                                                    }
                                                    else if (false)//else if( j7array[0] < -IKPI )
                                                    {
//                                                        j7array[0]+=IK2PI;
                                                    }
//                                                    j7valid[0] = true;
//                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                    {
                                                        if (false)//if( !j7valid[ij7] )
                                                        {
//                                                            continue;
                                                        }
//                                                        _ij7[0] = ij7;
//                                                        _ij7[1] = -1;
//                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                        {
                                                            if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                            {
//                                                                j7valid[iij7]=false;
//                                                                _ij7[1] = iij7;
//                                                                break;
                                                            }
                                                        }
//                                                        j7 = j7array[ij7];
//                                                        cj7 = cj7array[ij7];
//                                                        sj7 = sj7array[ij7];
                                                        {
                                                            IkReal evalcond[5];
//                                                            IkReal x126=IKcos(j7);
//                                                            IkReal x127=IKsin(j7);
//                                                            IkReal x128=((0.33)*sj8);
//                                                            IkReal x129=((0.33)*cj8);
//                                                            IkReal x130=((1.0)*pz);
//                                                            IkReal x131=((0.36)*x126);
//                                                            IkReal x132=((0.36)*x127);
//                                                            evalcond[0]=((((-1.0)*x128))+((pz*x126))+(((-1.0)*x132)));
//                                                            evalcond[1]=((-0.36)+(((-1.0)*x129))+(((-1.0)*x131))+(((-1.0)*x127*x130)));
//                                                            evalcond[2]=((-0.1503)+(((-1.0)*pz*x130))+(((-0.2592)*x126))+(((-0.72)*pz*x127)));
//                                                            evalcond[3]=((-0.36)+(((-1.0)*x126*x129))+(((-1.0)*x131))+(((-1.0)*x127*x128)));
//                                                            evalcond[4]=((((-1.0)*x132))+(((-1.0)*x130))+((x126*x128))+(((-1.0)*x127*x129)));
                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
//                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                            bool j6valid[1]= {false};
//                                                            _nj6 = 1;
//                                                            j6array[0]=0;
//                                                            sj6array[0]=IKsin(j6array[0]);
//                                                            cj6array[0]=IKcos(j6array[0]);
                                                            if (false)//if( j6array[0] > IKPI )
                                                            {
//                                                                j6array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j6array[0] < -IKPI )
                                                            {
//                                                                j6array[0]+=IK2PI;
                                                            }
//                                                            j6valid[0] = true;
//                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                            {
                                                                if (false)//if( !j6valid[ij6] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij6[0] = ij6;
//                                                                _ij6[1] = -1;
//                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                {
                                                                    if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j6valid[iij6]=false;
//                                                                        _ij6[1] = iij6;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j6 = j6array[ij6];
//                                                                cj6 = cj6array[ij6];
//                                                                sj6 = sj6array[ij6];

                                                                {
//                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                    vinfos[0].jointtype = 1;
//                                                                    vinfos[0].foffset = j6;
//                                                                    vinfos[0].indices[0] = _ij6[0];
//                                                                    vinfos[0].indices[1] = _ij6[1];
//                                                                    vinfos[0].maxsolutions = _nj6;
//                                                                    vinfos[1].jointtype = 1;
//                                                                    vinfos[1].foffset = j7;
//                                                                    vinfos[1].indices[0] = _ij7[0];
//                                                                    vinfos[1].indices[1] = _ij7[1];
//                                                                    vinfos[1].maxsolutions = _nj7;
//                                                                    vinfos[2].jointtype = 1;
//                                                                    vinfos[2].foffset = j8;
//                                                                    vinfos[2].indices[0] = _ij8[0];
//                                                                    vinfos[2].indices[1] = _ij8[1];
//                                                                    vinfos[2].maxsolutions = _nj8;
//                                                                    int vfree[0];
//                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if (false)//if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
//                                    bgotonextstatement=false;
//                                    continue; // branch miss [j6, j7, j8]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j6array[2], cj6array[2], sj6array[2];
                        bool j6valid[2]= {false};
                        _nj6 = 2;
                        CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x134.valid)
                        {
//                            continue;
                        }
                        IkReal x133=x134.value;
                        j6array[0]=((-1.0)*x133);
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        j6array[1]=((3.14159265358979)+(((-1.0)*x133)));
                        sj6array[1]=IKsin(j6array[1]);
                        cj6array[1]=IKcos(j6array[1]);
                        if( j6array[0] > IKPI )
                        {
//                            j6array[0]-=IK2PI;
                        }
                        else if( j6array[0] < -IKPI )
                        {
//                            j6array[0]+=IK2PI;
                        }
                        j6valid[0] = true;
                        if( j6array[1] > IKPI )
                        {
                            j6array[1]-=IK2PI;
                        }
                        else if( j6array[1] < -IKPI )
                        {
//                            j6array[1]+=IK2PI;
                        }
                        j6valid[1] = true;
                        for(int ij6 = 0; ij6 < 2; ++ij6)
                        {
                            if( !j6valid[ij6] )
                            {
//                                continue;
                            }
                            _ij6[0] = ij6;
                            _ij6[1] = -1;
                            for(int iij6 = ij6+1; iij6 < 2; ++iij6)
                            {
                                if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                {
//                                    j6valid[iij6]=false;
//                                    _ij6[1] = iij6;
//                                    break;
                                }
                            }
                            j6 = j6array[ij6];
                            cj6 = cj6array[ij6];
                            sj6 = sj6array[ij6];

                            {
                                IkReal j8array[2], cj8array[2], sj8array[2];
                                bool j8valid[2]= {false};
                                _nj8 = 2;
                                cj8array[0]=((-0.458333333333333)+(((-3.03030303030303)*cj6*px))+(((4.20875420875421)*(pz*pz)))+(((-3.03030303030303)*py*sj6))+(((4.20875420875421)*(py*py)))+(((4.20875420875421)*(px*px))));
                                if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j8valid[0] = j8valid[1] = true;
                                    j8array[0] = IKacos(cj8array[0]);
                                    sj8array[0] = IKsin(j8array[0]);
                                    cj8array[1] = cj8array[0];
                                    j8array[1] = -j8array[0];
                                    sj8array[1] = -sj8array[0];
                                }
                                else if( isnan(cj8array[0]) )
                                {
                                    // probably any value will work
//                                    j8valid[0] = true;
//                                    cj8array[0] = 1;
//                                    sj8array[0] = 0;
//                                    j8array[0] = 0;
                                }
                                for(int ij8 = 0; ij8 < 2; ++ij8)
                                {
                                    if( !j8valid[ij8] )
                                    {
                                        continue;
                                    }
                                    _ij8[0] = ij8;
                                    _ij8[1] = -1;
                                    for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                                    {
                                        if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j8valid[iij8]=false;
//                                            _ij8[1] = iij8;
//                                            break;
                                        }
                                    }
                                    j8 = j8array[ij8];
                                    cj8 = cj8array[ij8];
                                    sj8 = sj8array[ij8];

                                    {
                                        IkReal j7eval[3];
                                        IkReal x135=(cj6*px);
                                        IkReal x136=((3300.0)*pz);
                                        IkReal x137=((3300.0)*py*sj6);
                                        j7eval[0]=((1.00378787878788)+cj8);
                                        j7eval[1]=((IKabs(((-1296.0)+((cj8*x137))+(((-1188.0)*cj8))+(((3600.0)*x135))+(((3300.0)*cj8*x135))+(((3600.0)*py*sj6))+((sj8*x136)))))+(IKabs(((((-1.0)*cj8*x136))+(((-3600.0)*pz))+(((-1188.0)*sj8))+(((3300.0)*sj8*x135))+((sj8*x137))))));
                                        j7eval[2]=IKsign(((2385.0)+(((2376.0)*cj8))));
                                        if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j7eval[3];
//                                                IkReal x138=(py*sj6);
//                                                IkReal x139=((100.0)*pz);
//                                                IkReal x140=(cj6*px);
//                                                IkReal x141=(pz*sj8);
//                                                IkReal x142=((2.77777777777778)*cj8);
//                                                IkReal x143=((33.0)*cj8);
//                                                j7eval[0]=((1.09090909090909)+(((-1.0)*x138*x142))+(((-1.0)*x140*x142))+(((-3.03030303030303)*x138))+cj8+(((-3.03030303030303)*x140))+(((2.77777777777778)*x141)));
//                                                j7eval[1]=((IKabs((((x138*x139))+(((-10.89)*cj8*sj8))+(((-11.88)*sj8))+(((-36.0)*pz))+((x139*x140)))))+(IKabs(((-12.96)+((pz*x139))+(((-10.89)*(cj8*cj8)))+(((-23.76)*cj8))))));
//                                                j7eval[2]=IKsign(((12.96)+(((33.0)*x141))+(((-1.0)*x138*x143))+(((-1.0)*x140*x143))+(((11.88)*cj8))+(((-36.0)*x140))+(((-36.0)*x138))));
                                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j7eval[1];
//                                                        IkReal x144=((2.77777777777778)*sj8);
//                                                        j7eval[0]=(sj8+(((-2.77777777777778)*cj8*pz))+(((-1.0)*py*sj6*x144))+(((-1.0)*cj6*px*x144))+(((-3.03030303030303)*pz)));
                                                        if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j7]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                bool j7valid[1]= {false};
//                                                                _nj7 = 1;
//                                                                IkReal x145=((11.88)*sj8);
//                                                                IkReal x146=((36.0)*pz);
//                                                                IkReal x147=(py*sj6);
//                                                                IkReal x148=((3300.0)*sj8);
//                                                                IkReal x149=(cj8*pz);
//                                                                IkReal x150=((100.0)*pz);
//                                                                IkReal x151=(cj6*px);
//                                                                IkReal x152=((33.0)*sj8);
//                                                                CheckValue<IkReal> x153=IKPowWithIntegerCheck<IKFAST_REAL>(((((-1.0)*x147*x148))+(((-3600.0)*pz))+(((-1.0)*x148*x151))+(((-3300.0)*x149))+(((1188.0)*sj8))),-1);
                                                                if (false)//if(!x153.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x154=IKPowWithIntegerCheck<IKFAST_REAL>(((((-1.0)*x146))+(((-33.0)*x149))+(((-1.0)*x151*x152))+x145+(((-1.0)*x147*x152))),-1);
                                                                if (false)//if(!x154.valid)
                                                                {
//                                                                    continue;
                                                                }
                                                                if (false)//if( IKabs(((x153.value)*(((-1089.0)+(((1089.0)*(cj8*cj8)))+(((10000.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x154.value)*(((((-10.89)*cj8*sj8))+(((-1.0)*x145))+(((-1.0)*x150*x151))+x146+(((-1.0)*x147*x150)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x153.value)*(((-1089.0)+(((1089.0)*(cj8*cj8)))+(((10000.0)*(pz*pz)))))))+IKsqr(((x154.value)*(((((-10.89)*cj8*sj8))+(((-1.0)*x145))+(((-1.0)*x150*x151))+x146+(((-1.0)*x147*x150))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                {
//                                                                    continue;
                                                                }
//                                                                j7array[0]=IKatan2(((x153.value)*(((-1089.0)+(((1089.0)*(cj8*cj8)))+(((10000.0)*(pz*pz)))))), ((x154.value)*(((((-10.89)*cj8*sj8))+(((-1.0)*x145))+(((-1.0)*x150*x151))+x146+(((-1.0)*x147*x150))))));
//                                                                sj7array[0]=IKsin(j7array[0]);
//                                                                cj7array[0]=IKcos(j7array[0]);
                                                                if (false)//if( j7array[0] > IKPI )
                                                                {
//                                                                    j7array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j7array[0] < -IKPI )
                                                                {
//                                                                    j7array[0]+=IK2PI;
                                                                }
//                                                                j7valid[0] = true;
//                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                {
                                                                    if (false)//if( !j7valid[ij7] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij7[0] = ij7;
//                                                                    _ij7[1] = -1;
//                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                    {
                                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j7valid[iij7]=false;
//                                                                            _ij7[1] = iij7;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j7 = j7array[ij7];
//                                                                    cj7 = cj7array[ij7];
//                                                                    sj7 = sj7array[ij7];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x155=IKsin(j7);
//                                                                        IkReal x156=IKcos(j7);
//                                                                        IkReal x157=((0.33)*cj8);
//                                                                        IkReal x158=(py*sj6);
//                                                                        IkReal x159=(cj6*px);
//                                                                        IkReal x160=((0.33)*sj8);
//                                                                        IkReal x161=((0.36)*x155);
//                                                                        IkReal x162=((0.36)*x156);
//                                                                        IkReal x163=((0.33)*x156);
//                                                                        IkReal x164=(pz*x155);
//                                                                        IkReal x165=((0.72)*x159);
//                                                                        evalcond[0]=((((-1.0)*x161))+((x156*x160))+(((-1.0)*pz))+(((-1.0)*x155*x157)));
//                                                                        evalcond[1]=((-0.36)+(((-1.0)*x162))+x159+x158+(((-1.0)*x156*x157))+(((-1.0)*x155*x160)));
//                                                                        evalcond[2]=((((-1.0)*x161))+(((-1.0)*x160))+((x155*x158))+((x155*x159))+((pz*x156)));
//                                                                        evalcond[3]=((-0.36)+(((-1.0)*x157))+(((-1.0)*x162))+(((-1.0)*x164))+((x156*x158))+((x156*x159)));
//                                                                        evalcond[4]=((-0.1503)+(((-0.2592)*x156))+(((-1.0)*(px*px)))+(((0.72)*x156*x158))+(((0.72)*x158))+(((-0.72)*x164))+x165+((x156*x165))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j6;
//                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j7;
//                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j8;
//                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                        bool j7valid[1]= {false};
//                                                        _nj7 = 1;
//                                                        IkReal x166=((100.0)*pz);
//                                                        IkReal x167=(py*sj6);
//                                                        IkReal x168=(cj6*px);
//                                                        IkReal x169=((33.0)*cj8);
//                                                        CheckValue<IkReal> x170=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((12.96)+(((-36.0)*x167))+(((-36.0)*x168))+(((11.88)*cj8))+(((-1.0)*x168*x169))+(((-1.0)*x167*x169))+(((33.0)*pz*sj8)))),-1);
                                                        if (false)//if(!x170.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x171 = IKatan2WithCheck(IkReal(((((-10.89)*cj8*sj8))+(((-11.88)*sj8))+((x166*x167))+((x166*x168))+(((-36.0)*pz)))),IkReal(((-12.96)+((pz*x166))+(((-10.89)*(cj8*cj8)))+(((-23.76)*cj8)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x171.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x170.value)))+(x171.value));
//                                                        sj7array[0]=IKsin(j7array[0]);
//                                                        cj7array[0]=IKcos(j7array[0]);
                                                        if (false)//if( j7array[0] > IKPI )
                                                        {
//                                                            j7array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                        {
//                                                            j7array[0]+=IK2PI;
                                                        }
//                                                        j7valid[0] = true;
//                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                        {
                                                            if (false)//if( !j7valid[ij7] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij7[0] = ij7;
//                                                            _ij7[1] = -1;
//                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                            {
                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j7valid[iij7]=false;
//                                                                    _ij7[1] = iij7;
//                                                                    break;
                                                                }
                                                            }
//                                                            j7 = j7array[ij7];
//                                                            cj7 = cj7array[ij7];
//                                                            sj7 = sj7array[ij7];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x172=IKsin(j7);
//                                                                IkReal x173=IKcos(j7);
//                                                                IkReal x174=((0.33)*cj8);
//                                                                IkReal x175=(py*sj6);
//                                                                IkReal x176=(cj6*px);
//                                                                IkReal x177=((0.33)*sj8);
//                                                                IkReal x178=((0.36)*x172);
//                                                                IkReal x179=((0.36)*x173);
//                                                                IkReal x180=((0.33)*x173);
//                                                                IkReal x181=(pz*x172);
//                                                                IkReal x182=((0.72)*x176);
//                                                                evalcond[0]=((((-1.0)*x178))+((x173*x177))+(((-1.0)*pz))+(((-1.0)*x172*x174)));
//                                                                evalcond[1]=((-0.36)+(((-1.0)*x179))+x175+x176+(((-1.0)*x172*x177))+(((-1.0)*x173*x174)));
//                                                                evalcond[2]=(((pz*x173))+(((-1.0)*x178))+(((-1.0)*x177))+((x172*x175))+((x172*x176)));
//                                                                evalcond[3]=((-0.36)+(((-1.0)*x179))+(((-1.0)*x174))+((x173*x175))+((x173*x176))+(((-1.0)*x181)));
//                                                                evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+((x173*x182))+(((-0.72)*x181))+x182+(((0.72)*x175))+(((-1.0)*(pz*pz)))+(((0.72)*x173*x175))+(((-0.2592)*x173))+(((-1.0)*(py*py))));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j6;
//                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                vinfos[0].maxsolutions = _nj6;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j7;
//                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                vinfos[1].maxsolutions = _nj7;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j8;
//                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                vinfos[2].maxsolutions = _nj8;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                bool j7valid[1]= {false};
                                                _nj7 = 1;
                                                IkReal x183=(cj6*px);
                                                IkReal x184=((3300.0)*pz);
                                                IkReal x185=((3300.0)*py*sj6);
                                                CheckValue<IkReal> x186 = IKatan2WithCheck(IkReal(((((3300.0)*sj8*x183))+((sj8*x185))+(((-3600.0)*pz))+(((-1188.0)*sj8))+(((-1.0)*cj8*x184)))),IkReal(((-1296.0)+((sj8*x184))+(((3600.0)*x183))+(((-1188.0)*cj8))+(((3300.0)*cj8*x183))+((cj8*x185))+(((3600.0)*py*sj6)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x186.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x187=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((2385.0)+(((2376.0)*cj8)))),-1);
                                                if(!x187.valid)
                                                {
//                                                    continue;
                                                }
                                                j7array[0]=((-1.5707963267949)+(x186.value)+(((1.5707963267949)*(x187.value))));
                                                sj7array[0]=IKsin(j7array[0]);
                                                cj7array[0]=IKcos(j7array[0]);
                                                if( j7array[0] > IKPI )
                                                {
//                                                    j7array[0]-=IK2PI;
                                                }
                                                else if( j7array[0] < -IKPI )
                                                {
//                                                    j7array[0]+=IK2PI;
                                                }
                                                j7valid[0] = true;
                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                {
                                                    if( !j7valid[ij7] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij7[0] = ij7;
                                                    _ij7[1] = -1;
                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                    {
                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j7valid[iij7]=false;
//                                                            _ij7[1] = iij7;
//                                                            break;
                                                        }
                                                    }
                                                    j7 = j7array[ij7];
                                                    cj7 = cj7array[ij7];
                                                    sj7 = sj7array[ij7];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x188=IKsin(j7);
                                                        IkReal x189=IKcos(j7);
                                                        IkReal x190=((0.33)*cj8);
                                                        IkReal x191=(py*sj6);
                                                        IkReal x192=(cj6*px);
                                                        IkReal x193=((0.33)*sj8);
                                                        IkReal x194=((0.36)*x188);
                                                        IkReal x195=((0.36)*x189);
                                                        IkReal x196=((0.33)*x189);
                                                        IkReal x197=(pz*x188);
                                                        IkReal x198=((0.72)*x192);
                                                        evalcond[0]=((((-1.0)*x188*x190))+(((-1.0)*x194))+((x189*x193))+(((-1.0)*pz)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x188*x193))+(((-1.0)*x189*x190))+(((-1.0)*x195))+x192+x191);
                                                        evalcond[2]=(((pz*x189))+((x188*x191))+((x188*x192))+(((-1.0)*x193))+(((-1.0)*x194)));
                                                        evalcond[3]=((-0.36)+(((-1.0)*x197))+(((-1.0)*x195))+(((-1.0)*x190))+((x189*x191))+((x189*x192)));
                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.72)*x197))+(((0.72)*x189*x191))+((x189*x198))+x198+(((0.72)*x191))+(((-1.0)*(pz*pz)))+(((-0.2592)*x189))+(((-1.0)*(py*py))));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j6;
                                                        vinfos[0].indices[0] = _ij6[0];
                                                        vinfos[0].indices[1] = _ij6[1];
                                                        vinfos[0].maxsolutions = _nj6;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j7;
                                                        vinfos[1].indices[0] = _ij7[0];
                                                        vinfos[1].indices[1] = _ij7[1];
                                                        vinfos[1].maxsolutions = _nj7;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j8;
                                                        vinfos[2].indices[0] = _ij8[0];
                                                        vinfos[2].indices[1] = _ij8[1];
                                                        vinfos[2].maxsolutions = _nj8;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Hunker (f7071dcf5459c249fade087ece139e54)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
