#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_backLeftFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-17 21:08:57.577200
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return -IKPI_2;
    }
    else if( f >= 1 )
    {
        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if( f < 0 )
    {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 )
    {
        ret.value = f*f;
    }
    else if( num == 3 )
    {
        ret.value = f*f*f;
    }
    else
    {
        ret.value = 1.0;
        while(num>0)
        {
            if( num & 1 )
            {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 )
    {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[1]);
    x1=IKsin(j[0]);
    x2=IKcos(j[2]);
    x3=IKcos(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x3);
    x8=((0.33)*x2);
    x9=(x0*x1);
    eetrans[0]=((((-0.36)*x1))+(((-0.36)*x9))+(((-1.0)*x1*x4*x6))+(((-1.0)*x8*x9)));
    eetrans[1]=((0.36)+((x0*x7))+((x0*x3*x8))+x7+((x3*x4*x6)));
    eetrans[2]=((0.15)+(((-1.0)*x0*x6))+((x4*x8))+(((0.36)*x4)));
}

IKFAST_API int GetNumFreeParameters()
{
    return 0;
}
IKFAST_API int* GetFreeParameters()
{
    return NULL;
}
IKFAST_API int GetNumJoints()
{
    return 3;
}

IKFAST_API int GetIkRealSize()
{
    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j0=numeric_limits<IkReal>::quiet_NaN();
        _ij0[0] = -1;
        _ij0[1] = -1;
        _nj0 = -1;
        j1=numeric_limits<IkReal>::quiet_NaN();
        _ij1[0] = -1;
        _ij1[1] = -1;
        _nj1 = -1;
        j2=numeric_limits<IkReal>::quiet_NaN();
        _ij2[0] = -1;
        _ij2[1] = -1;
        _nj2 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=px;
            new_py=((-0.36)+py);
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j0eval[1];
                j0eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j0eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
                                bgotonextstatement=false;
                                {
                                    IkReal j2array[2], cj2array[2], sj2array[2];
                                    bool j2valid[2]= {false};
                                    _nj2 = 2;
                                    cj2array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz))));
                                    if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
                                        j2valid[0] = j2valid[1] = true;
                                        j2array[0] = IKacos(cj2array[0]);
                                        sj2array[0] = IKsin(j2array[0]);
                                        cj2array[1] = cj2array[0];
                                        j2array[1] = -j2array[0];
                                        sj2array[1] = -sj2array[0];
                                    }
                                    else if( isnan(cj2array[0]) )
                                    {
                                        // probably any value will work
                                        j2valid[0] = true;
                                        cj2array[0] = 1;
                                        sj2array[0] = 0;
                                        j2array[0] = 0;
                                    }
                                    for(int ij2 = 0; ij2 < 2; ++ij2)
                                    {
                                        if( !j2valid[ij2] )
                                        {
                                            continue;
                                        }
                                        _ij2[0] = ij2;
                                        _ij2[1] = -1;
                                        for(int iij2 = ij2+1; iij2 < 2; ++iij2)
                                        {
                                            if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
                                            {
                                                j2valid[iij2]=false;
                                                _ij2[1] = iij2;
                                                break;
                                            }
                                        }
                                        j2 = j2array[ij2];
                                        cj2 = cj2array[ij2];
                                        sj2 = sj2array[ij2];

                                        {
                                            IkReal j1eval[3];
                                            px=0;
                                            py=0;
                                            pp=pz*pz;
                                            IkReal x10=pz*pz;
                                            IkReal x11=((825.0)*pz);
                                            j1eval[0]=((-1.0)+(((-7.71604938271605)*x10)));
                                            j1eval[1]=IKsign(((-324.0)+(((-2500.0)*x10))));
                                            j1eval[2]=((IKabs(((324.0)+((sj2*x11))+(((297.0)*cj2)))))+(IKabs(((((-1.0)*cj2*x11))+(((297.0)*sj2))+(((-900.0)*pz))))));
                                            if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j1eval[1];
                                                    px=0;
                                                    py=0;
                                                    pp=pz*pz;
                                                    j1eval[0]=((1.09090909090909)+cj2+(((-2.77777777777778)*pz*sj2)));
                                                    if( IKabs(j1eval[0]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j1eval[1];
                                                            px=0;
                                                            py=0;
                                                            pp=pz*pz;
                                                            j1eval[0]=((((-1.0)*sj2))+(((-2.77777777777778)*cj2*pz))+(((-3.03030303030303)*pz)));
                                                            if( IKabs(j1eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        IkReal x12=pz*pz;
                                                                        IkReal x13=((1.0)+(((7.71604938271605)*x12)));
                                                                        if((x13) < -0.00001)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x14=IKabs(IKsqrt(x13));
                                                                        IkReal x20 = x13;
                                                                        if(IKabs(x20)==0)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x15=pow(x20,-0.5);
                                                                        CheckValue<IkReal> x21=IKPowWithIntegerCheck<IkReal>(x14,-1);
                                                                        if(!x21.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x16=x21.value;
                                                                        IkReal x17=((3.03030303030303)*pz*x16);
                                                                        if((((1.0)+(((-9.18273645546373)*x12*(x16*x16))))) < -0.00001)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x18=IKsqrt(((1.0)+(((-9.18273645546373)*x12*(x16*x16)))));
                                                                        IkReal x19=(x15*x18);
                                                                        if( (x17) < -1-IKFAST_SINCOS_THRESH || (x17) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x22 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                        if(!x22.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal gconst0=((IKasin(x17))+(((-1.0)*(x22.value))));
                                                                        IkReal gconst1=((((2.77777777777778)*pz*x19))+(((-1.0)*x15*x17)));
                                                                        IkReal gconst2=((((-1.0)*x19))+(((-8.41750841750842)*x12*x15*x16)));
                                                                        CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                        if(!x23.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x24=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if(!x24.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if( (((3.03030303030303)*pz*(x24.value))) < -1-IKFAST_SINCOS_THRESH || (((3.03030303030303)*pz*(x24.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x23.value)+(((-1.0)*(IKasin(((3.03030303030303)*pz*(x24.value))))))+j2)))), 6.28318530717959)));
                                                                        if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j1eval[2];
                                                                                IkReal x25=pz*pz;
                                                                                IkReal x26=x13;
                                                                                if((x26) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x27=IKabs(IKsqrt(x26));
                                                                                IkReal x34 = x26;
                                                                                if(IKabs(x34)==0)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x28=pow(x34,-0.5);
                                                                                CheckValue<IkReal> x35=IKPowWithIntegerCheck<IkReal>(x27,-1);
                                                                                if(!x35.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x29=x35.value;
                                                                                IkReal x30=((3.03030303030303)*pz*x29);
                                                                                if( (x30) < -1-IKFAST_SINCOS_THRESH || (x30) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x36 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if(!x36.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x31=((IKasin(x30))+(((-1.0)*(x36.value))));
                                                                                if((((1.0)+(((-9.18273645546373)*x25*(x29*x29))))) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x32=IKsqrt(((1.0)+(((-9.18273645546373)*x25*(x29*x29)))));
                                                                                IkReal x33=(x28*x32);
                                                                                px=0;
                                                                                py=0;
                                                                                pp=x25;
                                                                                sj2=gconst1;
                                                                                cj2=gconst2;
                                                                                j2=x31;
                                                                                IkReal gconst0=x31;
                                                                                IkReal gconst1=((((2.77777777777778)*pz*x33))+(((-1.0)*x28*x30)));
                                                                                IkReal gconst2=((((-1.0)*x33))+(((-8.41750841750842)*x25*x28*x29)));
                                                                                IkReal x37=pz*pz;
                                                                                j1eval[0]=((-1.0)+(((-7.71604938271605)*x37)));
                                                                                j1eval[1]=IKsign(((-324.0)+(((-2500.0)*x37))));
                                                                                if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]= {false};
                                                                                        _nj1 = 1;
                                                                                        IkReal x38=(gconst1*pz);
                                                                                        CheckValue<IkReal> x39=IKPowWithIntegerCheck<IkReal>(((4.32)+(((3.96)*gconst2))+(((-11.0)*x38))),-1);
                                                                                        if(!x39.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x40=IKPowWithIntegerCheck<IkReal>(((-432.0)+(((-396.0)*gconst2))+(((1100.0)*x38))),-1);
                                                                                        if(!x40.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        if( IKabs(((x39.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x40.value)*(((432.0)+(((-363.0)*(gconst1*gconst1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x39.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2))))))+IKsqr(((x40.value)*(((432.0)+(((-363.0)*(gconst1*gconst1)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j1array[0]=IKatan2(((x39.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2))))), ((x40.value)*(((432.0)+(((-363.0)*(gconst1*gconst1)))))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                        {
                                                                                            j1array[0]-=IK2PI;
                                                                                        }
                                                                                        else if( j1array[0] < -IKPI )
                                                                                        {
                                                                                            j1array[0]+=IK2PI;
                                                                                        }
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if( !j1valid[ij1] )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij1[0] = ij1;
                                                                                            _ij1[1] = -1;
                                                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
                                                                                                    j1valid[iij1]=false;
                                                                                                    _ij1[1] = iij1;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j1 = j1array[ij1];
                                                                                            cj1 = cj1array[ij1];
                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[5];
                                                                                                IkReal x41=IKcos(j1);
                                                                                                IkReal x42=IKsin(j1);
                                                                                                IkReal x43=((0.33)*gconst1);
                                                                                                IkReal x44=((0.33)*gconst2);
                                                                                                IkReal x45=((0.36)*x42);
                                                                                                IkReal x46=((0.36)*x41);
                                                                                                IkReal x47=((0.33)*x42);
                                                                                                IkReal x48=(pz*x42);
                                                                                                evalcond[0]=((-0.36)+(((-1.0)*x44))+(((-1.0)*x46))+x48);
                                                                                                evalcond[1]=((((-1.0)*x45))+(((-1.0)*x43))+(((-1.0)*pz*x41)));
                                                                                                evalcond[2]=((-0.1503)+(((-0.2592)*x41))+(((0.72)*x48))+(((-1.0)*(pz*pz))));
                                                                                                evalcond[3]=(((x41*x43))+(((-1.0)*x42*x44))+(((-1.0)*x45))+pz);
                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x42*x43))+(((-1.0)*x46))+(((-1.0)*x41*x44)));
                                                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                bool j0valid[1]= {false};
                                                                                                _nj0 = 1;
                                                                                                j0array[0]=0;
                                                                                                sj0array[0]=IKsin(j0array[0]);
                                                                                                cj0array[0]=IKcos(j0array[0]);
                                                                                                if( j0array[0] > IKPI )
                                                                                                {
                                                                                                    j0array[0]-=IK2PI;
                                                                                                }
                                                                                                else if( j0array[0] < -IKPI )
                                                                                                {
                                                                                                    j0array[0]+=IK2PI;
                                                                                                }
                                                                                                j0valid[0] = true;
                                                                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                {
                                                                                                    if( !j0valid[ij0] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij0[0] = ij0;
                                                                                                    _ij0[1] = -1;
                                                                                                    for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                    {
                                                                                                        if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j0valid[iij0]=false;
                                                                                                            _ij0[1] = iij0;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j0 = j0array[ij0];
                                                                                                    cj0 = cj0array[ij0];
                                                                                                    sj0 = sj0array[ij0];

                                                                                                    {
                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        int vfree[0];
                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]= {false};
                                                                                        _nj1 = 1;
                                                                                        IkReal x49=((825.0)*pz);
                                                                                        CheckValue<IkReal> x50=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                        if(!x50.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x51 = IKatan2WithCheck(IkReal(((((297.0)*gconst1))+(((-1.0)*gconst2*x49))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst2))+((gconst1*x49)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if(!x51.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x50.value)))+(x51.value));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                        {
                                                                                            j1array[0]-=IK2PI;
                                                                                        }
                                                                                        else if( j1array[0] < -IKPI )
                                                                                        {
                                                                                            j1array[0]+=IK2PI;
                                                                                        }
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if( !j1valid[ij1] )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij1[0] = ij1;
                                                                                            _ij1[1] = -1;
                                                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
                                                                                                    j1valid[iij1]=false;
                                                                                                    _ij1[1] = iij1;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j1 = j1array[ij1];
                                                                                            cj1 = cj1array[ij1];
                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[5];
                                                                                                IkReal x52=IKcos(j1);
                                                                                                IkReal x53=IKsin(j1);
                                                                                                IkReal x54=((0.33)*gconst1);
                                                                                                IkReal x55=((0.33)*gconst2);
                                                                                                IkReal x56=((0.36)*x53);
                                                                                                IkReal x57=((0.36)*x52);
                                                                                                IkReal x58=((0.33)*x53);
                                                                                                IkReal x59=(pz*x53);
                                                                                                evalcond[0]=((-0.36)+x59+(((-1.0)*x57))+(((-1.0)*x55)));
                                                                                                evalcond[1]=((((-1.0)*x56))+(((-1.0)*x54))+(((-1.0)*pz*x52)));
                                                                                                evalcond[2]=((-0.1503)+(((0.72)*x59))+(((-0.2592)*x52))+(((-1.0)*(pz*pz))));
                                                                                                evalcond[3]=((((-1.0)*x53*x55))+pz+((x52*x54))+(((-1.0)*x56)));
                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x53*x54))+(((-1.0)*x52*x55))+(((-1.0)*x57)));
                                                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                bool j0valid[1]= {false};
                                                                                                _nj0 = 1;
                                                                                                j0array[0]=0;
                                                                                                sj0array[0]=IKsin(j0array[0]);
                                                                                                cj0array[0]=IKcos(j0array[0]);
                                                                                                if( j0array[0] > IKPI )
                                                                                                {
                                                                                                    j0array[0]-=IK2PI;
                                                                                                }
                                                                                                else if( j0array[0] < -IKPI )
                                                                                                {
                                                                                                    j0array[0]+=IK2PI;
                                                                                                }
                                                                                                j0valid[0] = true;
                                                                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                {
                                                                                                    if( !j0valid[ij0] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij0[0] = ij0;
                                                                                                    _ij0[1] = -1;
                                                                                                    for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                    {
                                                                                                        if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j0valid[iij0]=false;
                                                                                                            _ij0[1] = iij0;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j0 = j0array[ij0];
                                                                                                    cj0 = cj0array[ij0];
                                                                                                    sj0 = sj0array[ij0];

                                                                                                    {
                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        int vfree[0];
                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            IkReal x60=pz*pz;
                                                                            IkReal x61=((1.0)+(((7.71604938271605)*x60)));
                                                                            IkReal x68 = x61;
                                                                            if(IKabs(x68)==0)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x62=pow(x68,-0.5);
                                                                            if((x61) < -0.00001)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x63=IKabs(IKsqrt(x61));
                                                                            CheckValue<IkReal> x69=IKPowWithIntegerCheck<IkReal>(x63,-1);
                                                                            if(!x69.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x64=x69.value;
                                                                            IkReal x65=((3.03030303030303)*pz*x64);
                                                                            if((((1.0)+(((-9.18273645546373)*x60*(x64*x64))))) < -0.00001)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x66=IKsqrt(((1.0)+(((-9.18273645546373)*x60*(x64*x64)))));
                                                                            IkReal x67=(x62*x66);
                                                                            if( (x65) < -1-IKFAST_SINCOS_THRESH || (x65) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                            if(!x70.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(IKasin(x65))))+(((-1.0)*(x70.value))));
                                                                            IkReal gconst4=((((-2.77777777777778)*pz*x67))+(((-1.0)*x62*x65)));
                                                                            IkReal gconst5=((((-8.41750841750842)*x60*x62*x64))+(((1.0)*x67)));
                                                                            CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                            if(!x71.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x72=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if(!x72.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if( (((3.03030303030303)*pz*(x72.value))) < -1-IKFAST_SINCOS_THRESH || (((3.03030303030303)*pz*(x72.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x71.value)+(IKasin(((3.03030303030303)*pz*(x72.value))))+j2)))), 6.28318530717959)));
                                                                            if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j1eval[2];
                                                                                    IkReal x73=pz*pz;
                                                                                    IkReal x74=x61;
                                                                                    IkReal x82 = x74;
                                                                                    if(IKabs(x82)==0)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x75=pow(x82,-0.5);
                                                                                    if((x74) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x76=IKabs(IKsqrt(x74));
                                                                                    CheckValue<IkReal> x83=IKPowWithIntegerCheck<IkReal>(x76,-1);
                                                                                    if(!x83.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x77=x83.value;
                                                                                    IkReal x78=((3.03030303030303)*pz*x77);
                                                                                    if((((1.0)+(((-9.18273645546373)*x73*(x77*x77))))) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x79=IKsqrt(((1.0)+(((-9.18273645546373)*x73*(x77*x77)))));
                                                                                    CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if(!x84.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if( (x78) < -1-IKFAST_SINCOS_THRESH || (x78) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x80=((((1.0)*(x84.value)))+(((1.0)*(IKasin(x78)))));
                                                                                    IkReal x81=(x75*x79);
                                                                                    px=0;
                                                                                    py=0;
                                                                                    pp=x73;
                                                                                    sj2=gconst4;
                                                                                    cj2=gconst5;
                                                                                    j2=((3.14159265)+(((-1.0)*x80)));
                                                                                    IkReal gconst3=((3.14159265358979)+(((-1.0)*x80)));
                                                                                    IkReal gconst4=((((-2.77777777777778)*pz*x81))+(((-1.0)*x75*x78)));
                                                                                    IkReal gconst5=((((-8.41750841750842)*x73*x75*x77))+(((1.0)*x81)));
                                                                                    IkReal x85=pz*pz;
                                                                                    j1eval[0]=((-1.0)+(((-7.71604938271605)*x85)));
                                                                                    j1eval[1]=IKsign(((-324.0)+(((-2500.0)*x85))));
                                                                                    if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1]= {false};
                                                                                            _nj1 = 1;
                                                                                            IkReal x86=(gconst4*pz);
                                                                                            CheckValue<IkReal> x87=IKPowWithIntegerCheck<IkReal>(((4.32)+(((3.96)*gconst5))+(((-11.0)*x86))),-1);
                                                                                            if(!x87.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x88=IKPowWithIntegerCheck<IkReal>(((-432.0)+(((1100.0)*x86))+(((-396.0)*gconst5))),-1);
                                                                                            if(!x88.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            if( IKabs(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5))))))+IKsqr(((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j1array[0]=IKatan2(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5))))), ((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))));
                                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                            if( j1array[0] > IKPI )
                                                                                            {
                                                                                                j1array[0]-=IK2PI;
                                                                                            }
                                                                                            else if( j1array[0] < -IKPI )
                                                                                            {
                                                                                                j1array[0]+=IK2PI;
                                                                                            }
                                                                                            j1valid[0] = true;
                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if( !j1valid[ij1] )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij1[0] = ij1;
                                                                                                _ij1[1] = -1;
                                                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
                                                                                                        j1valid[iij1]=false;
                                                                                                        _ij1[1] = iij1;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j1 = j1array[ij1];
                                                                                                cj1 = cj1array[ij1];
                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[5];
                                                                                                    IkReal x89=IKcos(j1);
                                                                                                    IkReal x90=IKsin(j1);
                                                                                                    IkReal x91=((0.33)*gconst5);
                                                                                                    IkReal x92=((0.33)*gconst4);
                                                                                                    IkReal x93=((0.36)*x90);
                                                                                                    IkReal x94=((0.36)*x89);
                                                                                                    IkReal x95=(pz*x90);
                                                                                                    evalcond[0]=((-0.36)+x95+(((-1.0)*x91))+(((-1.0)*x94)));
                                                                                                    evalcond[1]=((((-1.0)*pz*x89))+(((-1.0)*x93))+(((-1.0)*x92)));
                                                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x89))+(((-1.0)*(pz*pz)))+(((0.72)*x95)));
                                                                                                    evalcond[3]=(((x89*x92))+(((-1.0)*x90*x91))+pz+(((-1.0)*x93)));
                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x90*x92))+(((-1.0)*x94))+(((-1.0)*x89*x91)));
                                                                                                    if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                    bool j0valid[1]= {false};
                                                                                                    _nj0 = 1;
                                                                                                    j0array[0]=0;
                                                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                                    if( j0array[0] > IKPI )
                                                                                                    {
                                                                                                        j0array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if( j0array[0] < -IKPI )
                                                                                                    {
                                                                                                        j0array[0]+=IK2PI;
                                                                                                    }
                                                                                                    j0valid[0] = true;
                                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                    {
                                                                                                        if( !j0valid[ij0] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij0[0] = ij0;
                                                                                                        _ij0[1] = -1;
                                                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                        {
                                                                                                            if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j0valid[iij0]=false;
                                                                                                                _ij0[1] = iij0;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j0 = j0array[ij0];
                                                                                                        cj0 = cj0array[ij0];
                                                                                                        sj0 = sj0array[ij0];

                                                                                                        {
                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            int vfree[0];
                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1]= {false};
                                                                                            _nj1 = 1;
                                                                                            IkReal x96=((825.0)*pz);
                                                                                            CheckValue<IkReal> x97 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x96))+(((297.0)*gconst4))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst5))+((gconst4*x96)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if(!x97.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x98=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                            if(!x98.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j1array[0]=((-1.5707963267949)+(x97.value)+(((1.5707963267949)*(x98.value))));
                                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                            if( j1array[0] > IKPI )
                                                                                            {
                                                                                                j1array[0]-=IK2PI;
                                                                                            }
                                                                                            else if( j1array[0] < -IKPI )
                                                                                            {
                                                                                                j1array[0]+=IK2PI;
                                                                                            }
                                                                                            j1valid[0] = true;
                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if( !j1valid[ij1] )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij1[0] = ij1;
                                                                                                _ij1[1] = -1;
                                                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
                                                                                                        j1valid[iij1]=false;
                                                                                                        _ij1[1] = iij1;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j1 = j1array[ij1];
                                                                                                cj1 = cj1array[ij1];
                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[5];
                                                                                                    IkReal x99=IKcos(j1);
                                                                                                    IkReal x100=IKsin(j1);
                                                                                                    IkReal x101=((0.33)*gconst5);
                                                                                                    IkReal x102=((0.33)*gconst4);
                                                                                                    IkReal x103=((0.36)*x100);
                                                                                                    IkReal x104=((0.36)*x99);
                                                                                                    IkReal x105=(pz*x100);
                                                                                                    evalcond[0]=((-0.36)+(((-1.0)*x101))+(((-1.0)*x104))+x105);
                                                                                                    evalcond[1]=((((-1.0)*pz*x99))+(((-1.0)*x103))+(((-1.0)*x102)));
                                                                                                    evalcond[2]=((-0.1503)+(((0.72)*x105))+(((-0.2592)*x99))+(((-1.0)*(pz*pz))));
                                                                                                    evalcond[3]=((((-1.0)*x100*x101))+((x102*x99))+(((-1.0)*x103))+pz);
                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x100*x102))+(((-1.0)*x104))+(((-1.0)*x101*x99)));
                                                                                                    if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                    bool j0valid[1]= {false};
                                                                                                    _nj0 = 1;
                                                                                                    j0array[0]=0;
                                                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                                    if( j0array[0] > IKPI )
                                                                                                    {
                                                                                                        j0array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if( j0array[0] < -IKPI )
                                                                                                    {
                                                                                                        j0array[0]+=IK2PI;
                                                                                                    }
                                                                                                    j0valid[0] = true;
                                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                    {
                                                                                                        if( !j0valid[ij0] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij0[0] = ij0;
                                                                                                        _ij0[1] = -1;
                                                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                        {
                                                                                                            if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j0valid[iij0]=false;
                                                                                                                _ij0[1] = iij0;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j0 = j0array[ij0];
                                                                                                        cj0 = cj0array[ij0];
                                                                                                        sj0 = sj0array[ij0];

                                                                                                        {
                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            int vfree[0];
                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                IkReal x106=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                                IkReal x113 = x106;
                                                                                if(IKabs(x113)==0)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x107=pow(x113,-0.5);
                                                                                if((x106) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x108=IKabs(IKsqrt(x106));
                                                                                IkReal x109=(pz*x107);
                                                                                CheckValue<IkReal> x114=IKPowWithIntegerCheck<IkReal>(x108,-1);
                                                                                if(!x114.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x110=x114.value;
                                                                                IkReal x111=((1.09090909090909)*x110);
                                                                                if((((1.0)+(((-1.1900826446281)*(x110*x110))))) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x112=IKsqrt(((1.0)+(((-1.1900826446281)*(x110*x110)))));
                                                                                CheckValue<IkReal> x115 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if(!x115.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if( (x111) < -1-IKFAST_SINCOS_THRESH || (x111) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal gconst6=((((-1.0)*(x115.value)))+(((-1.0)*(IKasin(x111)))));
                                                                                IkReal gconst7=((((-1.0)*x107*x112))+(((3.03030303030303)*x109*x110)));
                                                                                IkReal gconst8=((((-2.77777777777778)*x109*x112))+(((-1.0)*x107*x111)));
                                                                                CheckValue<IkReal> x116 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if(!x116.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x117=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                if(!x117.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if( (((1.09090909090909)*(x117.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x117.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x116.value)+(IKasin(((1.09090909090909)*(x117.value))))+j2)))), 6.28318530717959)));
                                                                                if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j1eval[2];
                                                                                        IkReal x118=pz*pz;
                                                                                        CheckValue<IkReal> x127 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if(!x127.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x119=((1.0)*(x127.value));
                                                                                        IkReal x120=x106;
                                                                                        IkReal x128 = x120;
                                                                                        if(IKabs(x128)==0)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x121=pow(x128,-0.5);
                                                                                        if((x120) < -0.00001)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x122=IKabs(IKsqrt(x120));
                                                                                        CheckValue<IkReal> x129=IKPowWithIntegerCheck<IkReal>(x122,-1);
                                                                                        if(!x129.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x123=x129.value;
                                                                                        if((((1.0)+(((-1.1900826446281)*(x123*x123))))) < -0.00001)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x124=IKsqrt(((1.0)+(((-1.1900826446281)*(x123*x123)))));
                                                                                        IkReal x125=(x121*x123);
                                                                                        IkReal x126=(x121*x124);
                                                                                        px=0;
                                                                                        py=0;
                                                                                        pp=x118;
                                                                                        sj2=gconst7;
                                                                                        cj2=gconst8;
                                                                                        if( (((1.09090908694215)*x123)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x123)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j2=((((-1.0)*x119))+(((-1.0)*(IKasin(((1.09090908694215)*x123))))));
                                                                                        if( (((1.09090909090909)*x123)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x123)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal gconst6=((((-1.0)*x119))+(((-1.0)*(IKasin(((1.09090909090909)*x123))))));
                                                                                        IkReal gconst7=((((3.03030303030303)*pz*x125))+(((-1.0)*x126)));
                                                                                        IkReal gconst8=((((-1.09090909090909)*x125))+(((-2.77777777777778)*pz*x126)));
                                                                                        IkReal x130=pz*pz;
                                                                                        j1eval[0]=((-1.0)+(((-7.71604938271605)*x130)));
                                                                                        j1eval[1]=IKsign(((-324.0)+(((-2500.0)*x130))));
                                                                                        if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]= {false};
                                                                                                _nj1 = 1;
                                                                                                IkReal x131=((297.0)*gconst7);
                                                                                                IkReal x132=((900.0)*pz);
                                                                                                IkReal x133=(x131+x132);
                                                                                                CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((((-594.0)*gconst8))+(((-272.25)*(gconst8*gconst8))))),IkReal((x133+(((272.25)*gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if(!x134.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x135=IKPowWithIntegerCheck<IkReal>(IKsign(((((-1.0)*x133))+(((-825.0)*gconst8*pz)))),-1);
                                                                                                if(!x135.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                j1array[0]=((-1.5707963267949)+(x134.value)+(((1.5707963267949)*(x135.value))));
                                                                                                sj1array[0]=IKsin(j1array[0]);
                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if( j1array[0] > IKPI )
                                                                                                {
                                                                                                    j1array[0]-=IK2PI;
                                                                                                }
                                                                                                else if( j1array[0] < -IKPI )
                                                                                                {
                                                                                                    j1array[0]+=IK2PI;
                                                                                                }
                                                                                                j1valid[0] = true;
                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                    if( !j1valid[ij1] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij1[0] = ij1;
                                                                                                    _ij1[1] = -1;
                                                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                    {
                                                                                                        if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j1valid[iij1]=false;
                                                                                                            _ij1[1] = iij1;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j1 = j1array[ij1];
                                                                                                    cj1 = cj1array[ij1];
                                                                                                    sj1 = sj1array[ij1];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
                                                                                                        IkReal x136=IKcos(j1);
                                                                                                        IkReal x137=IKsin(j1);
                                                                                                        IkReal x138=((0.33)*gconst7);
                                                                                                        IkReal x139=((0.33)*gconst8);
                                                                                                        IkReal x140=((0.36)*x137);
                                                                                                        IkReal x141=((0.36)*x136);
                                                                                                        IkReal x142=(pz*x137);
                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x141))+x142+(((-1.0)*x139)));
                                                                                                        evalcond[1]=((((-1.0)*x140))+(((-1.0)*x138))+(((-1.0)*pz*x136)));
                                                                                                        evalcond[2]=((-0.1503)+(((-0.2592)*x136))+(((0.72)*x142))+(((-1.0)*(pz*pz))));
                                                                                                        evalcond[3]=((((-1.0)*x140))+(((-1.0)*x137*x139))+((x136*x138))+pz);
                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x141))+(((-1.0)*x137*x138))+(((-1.0)*x136*x139)));
                                                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                        bool j0valid[1]= {false};
                                                                                                        _nj0 = 1;
                                                                                                        j0array[0]=0;
                                                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                                                        if( j0array[0] > IKPI )
                                                                                                        {
                                                                                                            j0array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if( j0array[0] < -IKPI )
                                                                                                        {
                                                                                                            j0array[0]+=IK2PI;
                                                                                                        }
                                                                                                        j0valid[0] = true;
                                                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                        {
                                                                                                            if( !j0valid[ij0] )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij0[0] = ij0;
                                                                                                            _ij0[1] = -1;
                                                                                                            for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                            {
                                                                                                                if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
                                                                                                                    j0valid[iij0]=false;
                                                                                                                    _ij0[1] = iij0;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j0 = j0array[ij0];
                                                                                                            cj0 = cj0array[ij0];
                                                                                                            sj0 = sj0array[ij0];

                                                                                                            {
                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                int vfree[0];
                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]= {false};
                                                                                                _nj1 = 1;
                                                                                                IkReal x143=((825.0)*pz);
                                                                                                CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal(((((297.0)*gconst7))+(((-1.0)*gconst8*x143))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst8))+((gconst7*x143)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if(!x144.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x145=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                                if(!x145.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                j1array[0]=((-1.5707963267949)+(x144.value)+(((1.5707963267949)*(x145.value))));
                                                                                                sj1array[0]=IKsin(j1array[0]);
                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if( j1array[0] > IKPI )
                                                                                                {
                                                                                                    j1array[0]-=IK2PI;
                                                                                                }
                                                                                                else if( j1array[0] < -IKPI )
                                                                                                {
                                                                                                    j1array[0]+=IK2PI;
                                                                                                }
                                                                                                j1valid[0] = true;
                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                    if( !j1valid[ij1] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij1[0] = ij1;
                                                                                                    _ij1[1] = -1;
                                                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                    {
                                                                                                        if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j1valid[iij1]=false;
                                                                                                            _ij1[1] = iij1;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j1 = j1array[ij1];
                                                                                                    cj1 = cj1array[ij1];
                                                                                                    sj1 = sj1array[ij1];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
                                                                                                        IkReal x146=IKcos(j1);
                                                                                                        IkReal x147=IKsin(j1);
                                                                                                        IkReal x148=((0.33)*gconst7);
                                                                                                        IkReal x149=((0.33)*gconst8);
                                                                                                        IkReal x150=((0.36)*x147);
                                                                                                        IkReal x151=((0.36)*x146);
                                                                                                        IkReal x152=(pz*x147);
                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x149))+(((-1.0)*x151))+x152);
                                                                                                        evalcond[1]=((((-1.0)*x148))+(((-1.0)*x150))+(((-1.0)*pz*x146)));
                                                                                                        evalcond[2]=((-0.1503)+(((-0.2592)*x146))+(((0.72)*x152))+(((-1.0)*(pz*pz))));
                                                                                                        evalcond[3]=((((-1.0)*x150))+(((-1.0)*x147*x149))+pz+((x146*x148)));
                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x151))+(((-1.0)*x147*x148))+(((-1.0)*x146*x149)));
                                                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                        bool j0valid[1]= {false};
                                                                                                        _nj0 = 1;
                                                                                                        j0array[0]=0;
                                                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                                                        if( j0array[0] > IKPI )
                                                                                                        {
                                                                                                            j0array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if( j0array[0] < -IKPI )
                                                                                                        {
                                                                                                            j0array[0]+=IK2PI;
                                                                                                        }
                                                                                                        j0valid[0] = true;
                                                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                        {
                                                                                                            if( !j0valid[ij0] )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij0[0] = ij0;
                                                                                                            _ij0[1] = -1;
                                                                                                            for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                            {
                                                                                                                if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
                                                                                                                    j0valid[iij0]=false;
                                                                                                                    _ij0[1] = iij0;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j0 = j0array[ij0];
                                                                                                            cj0 = cj0array[ij0];
                                                                                                            sj0 = sj0array[ij0];

                                                                                                            {
                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                int vfree[0];
                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    IkReal x153=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                                    if((x153) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x154=IKabs(IKsqrt(x153));
                                                                                    IkReal x160 = x153;
                                                                                    if(IKabs(x160)==0)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x155=pow(x160,-0.5);
                                                                                    IkReal x156=(pz*x155);
                                                                                    CheckValue<IkReal> x161=IKPowWithIntegerCheck<IkReal>(x154,-1);
                                                                                    if(!x161.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x157=x161.value;
                                                                                    IkReal x158=((1.09090909090909)*x157);
                                                                                    if((((1.0)+(((-1.1900826446281)*(x157*x157))))) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x159=IKsqrt(((1.0)+(((-1.1900826446281)*(x157*x157)))));
                                                                                    CheckValue<IkReal> x162 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if(!x162.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if( (x158) < -1-IKFAST_SINCOS_THRESH || (x158) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal gconst9=((3.14159265358979)+(((-1.0)*(x162.value)))+(IKasin(x158)));
                                                                                    IkReal gconst10=((((1.0)*x155*x159))+(((3.03030303030303)*x156*x157)));
                                                                                    IkReal gconst11=((((2.77777777777778)*x156*x159))+(((-1.0)*x155*x158)));
                                                                                    CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if(!x163.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x164=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                    if(!x164.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if( (((1.09090909090909)*(x164.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x164.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x163.value)+(((-1.0)*(IKasin(((1.09090909090909)*(x164.value))))))+j2)))), 6.28318530717959)));
                                                                                    if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j1eval[2];
                                                                                            IkReal x165=pz*pz;
                                                                                            CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if(!x174.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x166=((1.0)*(x174.value));
                                                                                            IkReal x167=x153;
                                                                                            if((x167) < -0.00001)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x168=IKabs(IKsqrt(x167));
                                                                                            IkReal x175 = x167;
                                                                                            if(IKabs(x175)==0)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x169=pow(x175,-0.5);
                                                                                            CheckValue<IkReal> x176=IKPowWithIntegerCheck<IkReal>(x168,-1);
                                                                                            if(!x176.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x170=x176.value;
                                                                                            if((((1.0)+(((-1.1900826446281)*(x170*x170))))) < -0.00001)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x171=IKsqrt(((1.0)+(((-1.1900826446281)*(x170*x170)))));
                                                                                            IkReal x172=(x169*x170);
                                                                                            IkReal x173=(x169*x171);
                                                                                            px=0;
                                                                                            py=0;
                                                                                            pp=x165;
                                                                                            sj2=gconst10;
                                                                                            cj2=gconst11;
                                                                                            if( (((1.09090908694215)*x170)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x170)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j2=((3.14159265)+(((-1.0)*x166))+(IKasin(((1.09090908694215)*x170))));
                                                                                            if( (((1.09090909090909)*x170)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x170)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal gconst9=((3.14159265358979)+(((-1.0)*x166))+(IKasin(((1.09090909090909)*x170))));
                                                                                            IkReal gconst10=((((3.03030303030303)*pz*x172))+(((1.0)*x173)));
                                                                                            IkReal gconst11=((((2.77777777777778)*pz*x173))+(((-1.09090909090909)*x172)));
                                                                                            IkReal x177=pz*pz;
                                                                                            j1eval[0]=((-1.0)+(((-7.71604938271605)*x177)));
                                                                                            j1eval[1]=IKsign(((-324.0)+(((-2500.0)*x177))));
                                                                                            if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                    bool j1valid[1]= {false};
                                                                                                    _nj1 = 1;
                                                                                                    IkReal x178=(gconst10*pz);
                                                                                                    CheckValue<IkReal> x179=IKPowWithIntegerCheck<IkReal>(((4.32)+(((3.96)*gconst11))+(((-11.0)*x178))),-1);
                                                                                                    if(!x179.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x180=IKPowWithIntegerCheck<IkReal>(((-432.0)+(((1100.0)*x178))+(((-396.0)*gconst11))),-1);
                                                                                                    if(!x180.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    if( IKabs(((x179.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x180.value)*(((432.0)+(((-363.0)*(gconst10*gconst10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x179.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11))))))+IKsqr(((x180.value)*(((432.0)+(((-363.0)*(gconst10*gconst10)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j1array[0]=IKatan2(((x179.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11))))), ((x180.value)*(((432.0)+(((-363.0)*(gconst10*gconst10)))))));
                                                                                                    sj1array[0]=IKsin(j1array[0]);
                                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                                    if( j1array[0] > IKPI )
                                                                                                    {
                                                                                                        j1array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if( j1array[0] < -IKPI )
                                                                                                    {
                                                                                                        j1array[0]+=IK2PI;
                                                                                                    }
                                                                                                    j1valid[0] = true;
                                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                    {
                                                                                                        if( !j1valid[ij1] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij1[0] = ij1;
                                                                                                        _ij1[1] = -1;
                                                                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                        {
                                                                                                            if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j1valid[iij1]=false;
                                                                                                                _ij1[1] = iij1;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j1 = j1array[ij1];
                                                                                                        cj1 = cj1array[ij1];
                                                                                                        sj1 = sj1array[ij1];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
                                                                                                            IkReal x181=IKcos(j1);
                                                                                                            IkReal x182=IKsin(j1);
                                                                                                            IkReal x183=((0.33)*gconst10);
                                                                                                            IkReal x184=((0.33)*gconst11);
                                                                                                            IkReal x185=((0.36)*x182);
                                                                                                            IkReal x186=((0.36)*x181);
                                                                                                            IkReal x187=(pz*x182);
                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x186))+(((-1.0)*x184))+x187);
                                                                                                            evalcond[1]=((((-1.0)*x185))+(((-1.0)*x183))+(((-1.0)*pz*x181)));
                                                                                                            evalcond[2]=((-0.1503)+(((0.72)*x187))+(((-1.0)*(pz*pz)))+(((-0.2592)*x181)));
                                                                                                            evalcond[3]=((((-1.0)*x185))+pz+(((-1.0)*x182*x184))+((x181*x183)));
                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x186))+(((-1.0)*x182*x183))+(((-1.0)*x181*x184)));
                                                                                                            if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                            bool j0valid[1]= {false};
                                                                                                            _nj0 = 1;
                                                                                                            j0array[0]=0;
                                                                                                            sj0array[0]=IKsin(j0array[0]);
                                                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                                                            if( j0array[0] > IKPI )
                                                                                                            {
                                                                                                                j0array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if( j0array[0] < -IKPI )
                                                                                                            {
                                                                                                                j0array[0]+=IK2PI;
                                                                                                            }
                                                                                                            j0valid[0] = true;
                                                                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                            {
                                                                                                                if( !j0valid[ij0] )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij0[0] = ij0;
                                                                                                                _ij0[1] = -1;
                                                                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                                {
                                                                                                                    if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
                                                                                                                        j0valid[iij0]=false;
                                                                                                                        _ij0[1] = iij0;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j0 = j0array[ij0];
                                                                                                                cj0 = cj0array[ij0];
                                                                                                                sj0 = sj0array[ij0];

                                                                                                                {
                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    int vfree[0];
                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                    bool j1valid[1]= {false};
                                                                                                    _nj1 = 1;
                                                                                                    IkReal x188=((825.0)*pz);
                                                                                                    CheckValue<IkReal> x189 = IKatan2WithCheck(IkReal(((((297.0)*gconst10))+(((-1.0)*gconst11*x188))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst11))+((gconst10*x188)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if(!x189.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x190=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                                    if(!x190.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j1array[0]=((-1.5707963267949)+(x189.value)+(((1.5707963267949)*(x190.value))));
                                                                                                    sj1array[0]=IKsin(j1array[0]);
                                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                                    if( j1array[0] > IKPI )
                                                                                                    {
                                                                                                        j1array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if( j1array[0] < -IKPI )
                                                                                                    {
                                                                                                        j1array[0]+=IK2PI;
                                                                                                    }
                                                                                                    j1valid[0] = true;
                                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                    {
                                                                                                        if( !j1valid[ij1] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij1[0] = ij1;
                                                                                                        _ij1[1] = -1;
                                                                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                        {
                                                                                                            if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j1valid[iij1]=false;
                                                                                                                _ij1[1] = iij1;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j1 = j1array[ij1];
                                                                                                        cj1 = cj1array[ij1];
                                                                                                        sj1 = sj1array[ij1];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
                                                                                                            IkReal x191=IKcos(j1);
                                                                                                            IkReal x192=IKsin(j1);
                                                                                                            IkReal x193=((0.33)*gconst10);
                                                                                                            IkReal x194=((0.33)*gconst11);
                                                                                                            IkReal x195=((0.36)*x192);
                                                                                                            IkReal x196=((0.36)*x191);
                                                                                                            IkReal x197=(pz*x192);
                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x194))+(((-1.0)*x196))+x197);
                                                                                                            evalcond[1]=((((-1.0)*x193))+(((-1.0)*x195))+(((-1.0)*pz*x191)));
                                                                                                            evalcond[2]=((-0.1503)+(((0.72)*x197))+(((-1.0)*(pz*pz)))+(((-0.2592)*x191)));
                                                                                                            evalcond[3]=((((-1.0)*x192*x194))+(((-1.0)*x195))+pz+((x191*x193)));
                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x192*x193))+(((-1.0)*x191*x194))+(((-1.0)*x196)));
                                                                                                            if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                            bool j0valid[1]= {false};
                                                                                                            _nj0 = 1;
                                                                                                            j0array[0]=0;
                                                                                                            sj0array[0]=IKsin(j0array[0]);
                                                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                                                            if( j0array[0] > IKPI )
                                                                                                            {
                                                                                                                j0array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if( j0array[0] < -IKPI )
                                                                                                            {
                                                                                                                j0array[0]+=IK2PI;
                                                                                                            }
                                                                                                            j0valid[0] = true;
                                                                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                            {
                                                                                                                if( !j0valid[ij0] )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij0[0] = ij0;
                                                                                                                _ij0[1] = -1;
                                                                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                                {
                                                                                                                    if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
                                                                                                                        j0valid[iij0]=false;
                                                                                                                        _ij0[1] = iij0;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j0 = j0array[ij0];
                                                                                                                cj0 = cj0array[ij0];
                                                                                                                sj0 = sj0array[ij0];

                                                                                                                {
                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    int vfree[0];
                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                            bgotonextstatement=false;
                                                                                            continue; // branch miss [j0, j1]

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if( bgotonextstatement )
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                    bool j1valid[1]= {false};
                                                                    _nj1 = 1;
                                                                    IkReal x198=((297.0)*sj2);
                                                                    IkReal x199=((900.0)*pz);
                                                                    IkReal x200=(cj2*pz);
                                                                    IkReal x201=(x199+x198);
                                                                    CheckValue<IkReal> x202=IKPowWithIntegerCheck<IkReal>(((((-3300.0)*x200))+(((-3600.0)*pz))+(((-1188.0)*sj2))),-1);
                                                                    if(!x202.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x203=IKPowWithIntegerCheck<IkReal>(((((-1.0)*x201))+(((-825.0)*x200))),-1);
                                                                    if(!x203.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if( IKabs(((x202.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x203.value)*(((((272.25)*cj2*sj2))+x201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x202.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj2*cj2)))))))+IKsqr(((x203.value)*(((((272.25)*cj2*sj2))+x201))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j1array[0]=IKatan2(((x202.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj2*cj2)))))), ((x203.value)*(((((272.25)*cj2*sj2))+x201))));
                                                                    sj1array[0]=IKsin(j1array[0]);
                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                    if( j1array[0] > IKPI )
                                                                    {
                                                                        j1array[0]-=IK2PI;
                                                                    }
                                                                    else if( j1array[0] < -IKPI )
                                                                    {
                                                                        j1array[0]+=IK2PI;
                                                                    }
                                                                    j1valid[0] = true;
                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                    {
                                                                        if( !j1valid[ij1] )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij1[0] = ij1;
                                                                        _ij1[1] = -1;
                                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                        {
                                                                            if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                            {
                                                                                j1valid[iij1]=false;
                                                                                _ij1[1] = iij1;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j1 = j1array[ij1];
                                                                        cj1 = cj1array[ij1];
                                                                        sj1 = sj1array[ij1];
                                                                        {
                                                                            IkReal evalcond[5];
                                                                            IkReal x204=IKcos(j1);
                                                                            IkReal x205=IKsin(j1);
                                                                            IkReal x206=((0.33)*cj2);
                                                                            IkReal x207=((0.33)*sj2);
                                                                            IkReal x208=((0.36)*x205);
                                                                            IkReal x209=((0.36)*x204);
                                                                            IkReal x210=(pz*x205);
                                                                            evalcond[0]=((-0.36)+(((-1.0)*x206))+(((-1.0)*x209))+x210);
                                                                            evalcond[1]=((((-1.0)*x207))+(((-1.0)*x208))+(((-1.0)*pz*x204)));
                                                                            evalcond[2]=((-0.1503)+(((-0.2592)*x204))+(((0.72)*x210))+(((-1.0)*(pz*pz))));
                                                                            evalcond[3]=((((-1.0)*x208))+((x204*x207))+pz+(((-1.0)*x205*x206)));
                                                                            evalcond[4]=((-0.36)+(((-1.0)*x204*x206))+(((-1.0)*x209))+(((-1.0)*x205*x207)));
                                                                            if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                            bool j0valid[1]= {false};
                                                                            _nj0 = 1;
                                                                            j0array[0]=0;
                                                                            sj0array[0]=IKsin(j0array[0]);
                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                            if( j0array[0] > IKPI )
                                                                            {
                                                                                j0array[0]-=IK2PI;
                                                                            }
                                                                            else if( j0array[0] < -IKPI )
                                                                            {
                                                                                j0array[0]+=IK2PI;
                                                                            }
                                                                            j0valid[0] = true;
                                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                            {
                                                                                if( !j0valid[ij0] )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij0[0] = ij0;
                                                                                _ij0[1] = -1;
                                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                {
                                                                                    if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
                                                                                        j0valid[iij0]=false;
                                                                                        _ij0[1] = iij0;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j0 = j0array[ij0];
                                                                                cj0 = cj0array[ij0];
                                                                                sj0 = sj0array[ij0];

                                                                                {
                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    int vfree[0];
                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                            bool j1valid[1]= {false};
                                                            _nj1 = 1;
                                                            IkReal x211=(pz*sj2);
                                                            CheckValue<IkReal> x212=IKPowWithIntegerCheck<IkReal>(((4.32)+(((3.96)*cj2))+(((-11.0)*x211))),-1);
                                                            if(!x212.valid)
                                                            {
                                                                continue;
                                                            }
                                                            CheckValue<IkReal> x213=IKPowWithIntegerCheck<IkReal>(((-432.0)+(((-396.0)*cj2))+(((1100.0)*x211))),-1);
                                                            if(!x213.valid)
                                                            {
                                                                continue;
                                                            }
                                                            if( IKabs(((x212.value)*(((((12.0)*pz))+(((-3.96)*sj2))+(((-3.63)*cj2*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x213.value)*(((69.0)+(((363.0)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x212.value)*(((((12.0)*pz))+(((-3.96)*sj2))+(((-3.63)*cj2*sj2))))))+IKsqr(((x213.value)*(((69.0)+(((363.0)*(cj2*cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                            {
                                                                continue;
                                                            }
                                                            j1array[0]=IKatan2(((x212.value)*(((((12.0)*pz))+(((-3.96)*sj2))+(((-3.63)*cj2*sj2))))), ((x213.value)*(((69.0)+(((363.0)*(cj2*cj2)))))));
                                                            sj1array[0]=IKsin(j1array[0]);
                                                            cj1array[0]=IKcos(j1array[0]);
                                                            if( j1array[0] > IKPI )
                                                            {
                                                                j1array[0]-=IK2PI;
                                                            }
                                                            else if( j1array[0] < -IKPI )
                                                            {
                                                                j1array[0]+=IK2PI;
                                                            }
                                                            j1valid[0] = true;
                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                            {
                                                                if( !j1valid[ij1] )
                                                                {
                                                                    continue;
                                                                }
                                                                _ij1[0] = ij1;
                                                                _ij1[1] = -1;
                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                {
                                                                    if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                    {
                                                                        j1valid[iij1]=false;
                                                                        _ij1[1] = iij1;
                                                                        break;
                                                                    }
                                                                }
                                                                j1 = j1array[ij1];
                                                                cj1 = cj1array[ij1];
                                                                sj1 = sj1array[ij1];
                                                                {
                                                                    IkReal evalcond[5];
                                                                    IkReal x214=IKcos(j1);
                                                                    IkReal x215=IKsin(j1);
                                                                    IkReal x216=((0.33)*cj2);
                                                                    IkReal x217=((0.33)*sj2);
                                                                    IkReal x218=((0.36)*x215);
                                                                    IkReal x219=((0.36)*x214);
                                                                    IkReal x220=(pz*x215);
                                                                    evalcond[0]=((-0.36)+x220+(((-1.0)*x219))+(((-1.0)*x216)));
                                                                    evalcond[1]=((((-1.0)*pz*x214))+(((-1.0)*x218))+(((-1.0)*x217)));
                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x214))+(((0.72)*x220))+(((-1.0)*(pz*pz))));
                                                                    evalcond[3]=(((x214*x217))+pz+(((-1.0)*x218))+(((-1.0)*x215*x216)));
                                                                    evalcond[4]=((-0.36)+(((-1.0)*x214*x216))+(((-1.0)*x219))+(((-1.0)*x215*x217)));
                                                                    if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                    bool j0valid[1]= {false};
                                                                    _nj0 = 1;
                                                                    j0array[0]=0;
                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                    if( j0array[0] > IKPI )
                                                                    {
                                                                        j0array[0]-=IK2PI;
                                                                    }
                                                                    else if( j0array[0] < -IKPI )
                                                                    {
                                                                        j0array[0]+=IK2PI;
                                                                    }
                                                                    j0valid[0] = true;
                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                    {
                                                                        if( !j0valid[ij0] )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij0[0] = ij0;
                                                                        _ij0[1] = -1;
                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                        {
                                                                            if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                            {
                                                                                j0valid[iij0]=false;
                                                                                _ij0[1] = iij0;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j0 = j0array[ij0];
                                                                        cj0 = cj0array[ij0];
                                                                        sj0 = sj0array[ij0];

                                                                        {
                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            int vfree[0];
                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]= {false};
                                                    _nj1 = 1;
                                                    IkReal x221=((825.0)*pz);
                                                    CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(((((297.0)*sj2))+(((-1.0)*cj2*x221))+(((-900.0)*pz)))),IkReal(((324.0)+((sj2*x221))+(((297.0)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if(!x222.valid)
                                                    {
                                                        continue;
                                                    }
                                                    CheckValue<IkReal> x223=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                    if(!x223.valid)
                                                    {
                                                        continue;
                                                    }
                                                    j1array[0]=((-1.5707963267949)+(x222.value)+(((1.5707963267949)*(x223.value))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                    {
                                                        j1array[0]-=IK2PI;
                                                    }
                                                    else if( j1array[0] < -IKPI )
                                                    {
                                                        j1array[0]+=IK2PI;
                                                    }
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                        if( !j1valid[ij1] )
                                                        {
                                                            continue;
                                                        }
                                                        _ij1[0] = ij1;
                                                        _ij1[1] = -1;
                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                        {
                                                            if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                            {
                                                                j1valid[iij1]=false;
                                                                _ij1[1] = iij1;
                                                                break;
                                                            }
                                                        }
                                                        j1 = j1array[ij1];
                                                        cj1 = cj1array[ij1];
                                                        sj1 = sj1array[ij1];
                                                        {
                                                            IkReal evalcond[5];
                                                            IkReal x224=IKcos(j1);
                                                            IkReal x225=IKsin(j1);
                                                            IkReal x226=((0.33)*cj2);
                                                            IkReal x227=((0.33)*sj2);
                                                            IkReal x228=((0.36)*x225);
                                                            IkReal x229=((0.36)*x224);
                                                            IkReal x230=(pz*x225);
                                                            evalcond[0]=((-0.36)+x230+(((-1.0)*x229))+(((-1.0)*x226)));
                                                            evalcond[1]=((((-1.0)*pz*x224))+(((-1.0)*x228))+(((-1.0)*x227)));
                                                            evalcond[2]=((-0.1503)+(((0.72)*x230))+(((-0.2592)*x224))+(((-1.0)*(pz*pz))));
                                                            evalcond[3]=(((x224*x227))+(((-1.0)*x225*x226))+pz+(((-1.0)*x228)));
                                                            evalcond[4]=((-0.36)+(((-1.0)*x224*x226))+(((-1.0)*x225*x227))+(((-1.0)*x229)));
                                                            if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]= {false};
                                                            _nj0 = 1;
                                                            j0array[0]=0;
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                            {
                                                                j0array[0]-=IK2PI;
                                                            }
                                                            else if( j0array[0] < -IKPI )
                                                            {
                                                                j0array[0]+=IK2PI;
                                                            }
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                                if( !j0valid[ij0] )
                                                                {
                                                                    continue;
                                                                }
                                                                _ij0[0] = ij0;
                                                                _ij0[1] = -1;
                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                {
                                                                    if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                    {
                                                                        j0valid[iij0]=false;
                                                                        _ij0[1] = iij0;
                                                                        break;
                                                                    }
                                                                }
                                                                j0 = j0array[ij0];
                                                                cj0 = cj0array[ij0];
                                                                sj0 = sj0array[ij0];

                                                                {
                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    int vfree[0];
                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
                                    bgotonextstatement=false;
                                    continue; // branch miss [j0, j1, j2]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j0array[2], cj0array[2], sj0array[2];
                        bool j0valid[2]= {false};
                        _nj0 = 2;
                        CheckValue<IkReal> x232 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
                        if(!x232.valid)
                        {
                            continue;
                        }
                        IkReal x231=x232.value;
                        j0array[0]=((-1.0)*x231);
                        sj0array[0]=IKsin(j0array[0]);
                        cj0array[0]=IKcos(j0array[0]);
                        j0array[1]=((3.14159265358979)+(((-1.0)*x231)));
                        sj0array[1]=IKsin(j0array[1]);
                        cj0array[1]=IKcos(j0array[1]);
                        if( j0array[0] > IKPI )
                        {
                            j0array[0]-=IK2PI;
                        }
                        else if( j0array[0] < -IKPI )
                        {
                            j0array[0]+=IK2PI;
                        }
                        j0valid[0] = true;
                        if( j0array[1] > IKPI )
                        {
                            j0array[1]-=IK2PI;
                        }
                        else if( j0array[1] < -IKPI )
                        {
                            j0array[1]+=IK2PI;
                        }
                        j0valid[1] = true;
                        for(int ij0 = 0; ij0 < 2; ++ij0)
                        {
                            if( !j0valid[ij0] )
                            {
                                continue;
                            }
                            _ij0[0] = ij0;
                            _ij0[1] = -1;
                            for(int iij0 = ij0+1; iij0 < 2; ++iij0)
                            {
                                if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                {
                                    j0valid[iij0]=false;
                                    _ij0[1] = iij0;
                                    break;
                                }
                            }
                            j0 = j0array[ij0];
                            cj0 = cj0array[ij0];
                            sj0 = sj0array[ij0];

                            {
                                IkReal j2array[2], cj2array[2], sj2array[2];
                                bool j2valid[2]= {false};
                                _nj2 = 2;
                                cj2array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz)))+(((3.03030303030303)*px*sj0))+(((4.20875420875421)*(py*py)))+(((4.20875420875421)*(px*px)))+(((-3.03030303030303)*cj0*py)));
                                if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j2valid[0] = j2valid[1] = true;
                                    j2array[0] = IKacos(cj2array[0]);
                                    sj2array[0] = IKsin(j2array[0]);
                                    cj2array[1] = cj2array[0];
                                    j2array[1] = -j2array[0];
                                    sj2array[1] = -sj2array[0];
                                }
                                else if( isnan(cj2array[0]) )
                                {
                                    // probably any value will work
                                    j2valid[0] = true;
                                    cj2array[0] = 1;
                                    sj2array[0] = 0;
                                    j2array[0] = 0;
                                }
                                for(int ij2 = 0; ij2 < 2; ++ij2)
                                {
                                    if( !j2valid[ij2] )
                                    {
                                        continue;
                                    }
                                    _ij2[0] = ij2;
                                    _ij2[1] = -1;
                                    for(int iij2 = ij2+1; iij2 < 2; ++iij2)
                                    {
                                        if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
                                        {
                                            j2valid[iij2]=false;
                                            _ij2[1] = iij2;
                                            break;
                                        }
                                    }
                                    j2 = j2array[ij2];
                                    cj2 = cj2array[ij2];
                                    sj2 = sj2array[ij2];

                                    {
                                        IkReal j1eval[3];
                                        IkReal x233=(px*sj0);
                                        IkReal x234=((3300.0)*sj2);
                                        IkReal x235=(cj0*py);
                                        IkReal x236=((3300.0)*cj2);
                                        j1eval[0]=((1.00378787878788)+cj2);
                                        j1eval[1]=((IKabs(((-1296.0)+(((-1.0)*x233*x236))+(((3600.0)*x235))+(((-1.0)*pz*x234))+(((-3600.0)*x233))+(((-1188.0)*cj2))+((x235*x236)))))+(IKabs((((x234*x235))+(((-1.0)*x233*x234))+(((3600.0)*pz))+((pz*x236))+(((-1188.0)*sj2))))));
                                        j1eval[2]=IKsign(((2385.0)+(((2376.0)*cj2))));
                                        if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j1eval[3];
                                                IkReal x237=(px*sj0);
                                                IkReal x238=((100.0)*pz);
                                                IkReal x239=(cj0*py);
                                                IkReal x240=((2.77777777777778)*cj2);
                                                IkReal x241=((33.0)*cj2);
                                                IkReal x242=(pz*sj2);
                                                j1eval[0]=((1.09090909090909)+cj2+((x237*x240))+(((-2.77777777777778)*x242))+(((-3.03030303030303)*x239))+(((-1.0)*x239*x240))+(((3.03030303030303)*x237)));
                                                j1eval[1]=((IKabs((((x237*x238))+(((-11.88)*sj2))+(((-10.89)*cj2*sj2))+(((-1.0)*x238*x239))+(((36.0)*pz)))))+(IKabs(((-12.96)+((pz*x238))+(((-23.76)*cj2))+(((-10.89)*(cj2*cj2)))))));
                                                j1eval[2]=IKsign(((12.96)+(((11.88)*cj2))+(((-36.0)*x239))+((x237*x241))+(((-33.0)*x242))+(((36.0)*x237))+(((-1.0)*x239*x241))));
                                                if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j1eval[3];
                                                        IkReal x243=cj0*cj0;
                                                        IkReal x244=px*px;
                                                        IkReal x245=pz*pz;
                                                        IkReal x246=py*py;
                                                        IkReal x247=((33.0)*cj2);
                                                        IkReal x248=(cj0*py);
                                                        IkReal x249=((33.0)*sj2);
                                                        IkReal x250=(px*sj0);
                                                        IkReal x251=(x243*x244);
                                                        IkReal x252=(x243*x246);
                                                        j1eval[0]=((1.0)+(((-7.71604938271605)*x251))+(((7.71604938271605)*x245))+(((7.71604938271605)*x244))+(((5.55555555555556)*x250))+(((-5.55555555555556)*x248))+(((-15.4320987654321)*x248*x250))+(((7.71604938271605)*x252)));
                                                        j1eval[1]=((IKabs(((((-11.88)*sj2))+((x248*x249))+(((-1.0)*x249*x250))+(((36.0)*pz))+((pz*x247)))))+(IKabs(((-12.96)+(((-1.0)*pz*x249))+(((36.0)*x248))+(((-1.0)*x247*x250))+(((-36.0)*x250))+(((-11.88)*cj2))+((x247*x248))))));
                                                        j1eval[2]=IKsign(((12.96)+(((-72.0)*x248))+(((100.0)*x252))+(((-100.0)*x251))+(((100.0)*x244))+(((100.0)*x245))+(((-200.0)*x248*x250))+(((72.0)*x250))));
                                                        if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                                        {
                                                            continue; // no branches [j1]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]= {false};
                                                                _nj1 = 1;
                                                                IkReal x253=cj0*cj0;
                                                                IkReal x254=px*px;
                                                                IkReal x255=(px*sj0);
                                                                IkReal x256=((33.0)*cj2);
                                                                IkReal x257=(cj0*py);
                                                                IkReal x258=((33.0)*sj2);
                                                                IkReal x259=((100.0)*x254);
                                                                CheckValue<IkReal> x260=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+(((100.0)*(pz*pz)))+x259+(((-200.0)*x255*x257))+(((100.0)*x253*(py*py)))+(((-72.0)*x257))+(((-1.0)*x253*x259))+(((72.0)*x255)))),-1);
                                                                if(!x260.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x261 = IKatan2WithCheck(IkReal(((((-11.88)*sj2))+(((-1.0)*x255*x258))+((pz*x256))+((x257*x258))+(((36.0)*pz)))),IkReal(((-12.96)+(((-1.0)*x255*x256))+((x256*x257))+(((-1.0)*pz*x258))+(((-36.0)*x255))+(((-11.88)*cj2))+(((36.0)*x257)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if(!x261.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x260.value)))+(x261.value));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                {
                                                                    j1array[0]-=IK2PI;
                                                                }
                                                                else if( j1array[0] < -IKPI )
                                                                {
                                                                    j1array[0]+=IK2PI;
                                                                }
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                    if( !j1valid[ij1] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij1[0] = ij1;
                                                                    _ij1[1] = -1;
                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                    {
                                                                        if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                        {
                                                                            j1valid[iij1]=false;
                                                                            _ij1[1] = iij1;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j1 = j1array[ij1];
                                                                    cj1 = cj1array[ij1];
                                                                    sj1 = sj1array[ij1];
                                                                    {
                                                                        IkReal evalcond[5];
                                                                        IkReal x262=IKsin(j1);
                                                                        IkReal x263=IKcos(j1);
                                                                        IkReal x264=(cj0*py);
                                                                        IkReal x265=((0.33)*sj2);
                                                                        IkReal x266=((0.33)*cj2);
                                                                        IkReal x267=(px*sj0);
                                                                        IkReal x268=((0.36)*x263);
                                                                        IkReal x269=((0.36)*x262);
                                                                        IkReal x270=((0.33)*x263);
                                                                        IkReal x271=((1.0)*x263);
                                                                        IkReal x272=((1.0)*x267);
                                                                        IkReal x273=(pz*x262);
                                                                        IkReal x274=((0.72)*x263);
                                                                        evalcond[0]=((((-1.0)*x262*x266))+((x263*x265))+pz+(((-1.0)*x269)));
                                                                        evalcond[1]=((-0.36)+(((-1.0)*x262*x265))+(((-1.0)*x263*x266))+x264+(((-1.0)*x272))+(((-1.0)*x268)));
                                                                        evalcond[2]=((-0.36)+((x263*x264))+x273+(((-1.0)*x266))+(((-1.0)*x268))+(((-1.0)*x267*x271)));
                                                                        evalcond[3]=((((-1.0)*pz*x271))+(((-1.0)*x262*x272))+((x262*x264))+(((-1.0)*x265))+(((-1.0)*x269)));
                                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.72)*x267))+((x264*x274))+(((-1.0)*(pz*pz)))+(((-0.2592)*x263))+(((-1.0)*x267*x274))+(((-1.0)*(py*py)))+(((0.72)*x273))+(((0.72)*x264)));
                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        int vfree[0];
                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                        bool j1valid[1]= {false};
                                                        _nj1 = 1;
                                                        IkReal x275=(px*sj0);
                                                        IkReal x276=((100.0)*pz);
                                                        IkReal x277=((33.0)*cj2);
                                                        IkReal x278=(cj0*py);
                                                        CheckValue<IkReal> x279=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+((x275*x277))+(((-1.0)*x277*x278))+(((36.0)*x275))+(((11.88)*cj2))+(((-33.0)*pz*sj2))+(((-36.0)*x278)))),-1);
                                                        if(!x279.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x280 = IKatan2WithCheck(IkReal((((x275*x276))+(((-11.88)*sj2))+(((-10.89)*cj2*sj2))+(((36.0)*pz))+(((-1.0)*x276*x278)))),IkReal(((-12.96)+(((-23.76)*cj2))+((pz*x276))+(((-10.89)*(cj2*cj2))))),IKFAST_ATAN2_MAGTHRESH);
                                                        if(!x280.valid)
                                                        {
                                                            continue;
                                                        }
                                                        j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x279.value)))+(x280.value));
                                                        sj1array[0]=IKsin(j1array[0]);
                                                        cj1array[0]=IKcos(j1array[0]);
                                                        if( j1array[0] > IKPI )
                                                        {
                                                            j1array[0]-=IK2PI;
                                                        }
                                                        else if( j1array[0] < -IKPI )
                                                        {
                                                            j1array[0]+=IK2PI;
                                                        }
                                                        j1valid[0] = true;
                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                        {
                                                            if( !j1valid[ij1] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij1[0] = ij1;
                                                            _ij1[1] = -1;
                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                            {
                                                                if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j1valid[iij1]=false;
                                                                    _ij1[1] = iij1;
                                                                    break;
                                                                }
                                                            }
                                                            j1 = j1array[ij1];
                                                            cj1 = cj1array[ij1];
                                                            sj1 = sj1array[ij1];
                                                            {
                                                                IkReal evalcond[5];
                                                                IkReal x281=IKsin(j1);
                                                                IkReal x282=IKcos(j1);
                                                                IkReal x283=(cj0*py);
                                                                IkReal x284=((0.33)*sj2);
                                                                IkReal x285=((0.33)*cj2);
                                                                IkReal x286=(px*sj0);
                                                                IkReal x287=((0.36)*x282);
                                                                IkReal x288=((0.36)*x281);
                                                                IkReal x289=((0.33)*x282);
                                                                IkReal x290=((1.0)*x282);
                                                                IkReal x291=((1.0)*x286);
                                                                IkReal x292=(pz*x281);
                                                                IkReal x293=((0.72)*x282);
                                                                evalcond[0]=((((-1.0)*x281*x285))+pz+(((-1.0)*x288))+((x282*x284)));
                                                                evalcond[1]=((-0.36)+(((-1.0)*x291))+(((-1.0)*x281*x284))+x283+(((-1.0)*x282*x285))+(((-1.0)*x287)));
                                                                evalcond[2]=((-0.36)+(((-1.0)*x286*x290))+x292+(((-1.0)*x285))+(((-1.0)*x287))+((x282*x283)));
                                                                evalcond[3]=((((-1.0)*pz*x290))+(((-1.0)*x284))+(((-1.0)*x288))+((x281*x283))+(((-1.0)*x281*x291)));
                                                                evalcond[4]=((-0.1503)+(((-0.2592)*x282))+(((0.72)*x292))+(((-1.0)*(px*px)))+(((-0.72)*x286))+(((-1.0)*x286*x293))+((x283*x293))+(((0.72)*x283))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                int vfree[0];
                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                bool j1valid[1]= {false};
                                                _nj1 = 1;
                                                IkReal x294=(px*sj0);
                                                IkReal x295=((3300.0)*sj2);
                                                IkReal x296=(cj0*py);
                                                IkReal x297=((3300.0)*cj2);
                                                CheckValue<IkReal> x298 = IKatan2WithCheck(IkReal(((((3600.0)*pz))+((pz*x297))+((x295*x296))+(((-1188.0)*sj2))+(((-1.0)*x294*x295)))),IkReal(((-1296.0)+(((3600.0)*x296))+(((-1.0)*pz*x295))+(((-1188.0)*cj2))+(((-3600.0)*x294))+((x296*x297))+(((-1.0)*x294*x297)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x298.valid)
                                                {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x299=IKPowWithIntegerCheck<IkReal>(IKsign(((2385.0)+(((2376.0)*cj2)))),-1);
                                                if(!x299.valid)
                                                {
                                                    continue;
                                                }
                                                j1array[0]=((-1.5707963267949)+(x298.value)+(((1.5707963267949)*(x299.value))));
                                                sj1array[0]=IKsin(j1array[0]);
                                                cj1array[0]=IKcos(j1array[0]);
                                                if( j1array[0] > IKPI )
                                                {
                                                    j1array[0]-=IK2PI;
                                                }
                                                else if( j1array[0] < -IKPI )
                                                {
                                                    j1array[0]+=IK2PI;
                                                }
                                                j1valid[0] = true;
                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                {
                                                    if( !j1valid[ij1] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij1[0] = ij1;
                                                    _ij1[1] = -1;
                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                    {
                                                        if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j1valid[iij1]=false;
                                                            _ij1[1] = iij1;
                                                            break;
                                                        }
                                                    }
                                                    j1 = j1array[ij1];
                                                    cj1 = cj1array[ij1];
                                                    sj1 = sj1array[ij1];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x300=IKsin(j1);
                                                        IkReal x301=IKcos(j1);
                                                        IkReal x302=(cj0*py);
                                                        IkReal x303=((0.33)*sj2);
                                                        IkReal x304=((0.33)*cj2);
                                                        IkReal x305=(px*sj0);
                                                        IkReal x306=((0.36)*x301);
                                                        IkReal x307=((0.36)*x300);
                                                        IkReal x308=((0.33)*x301);
                                                        IkReal x309=((1.0)*x301);
                                                        IkReal x310=((1.0)*x305);
                                                        IkReal x311=(pz*x300);
                                                        IkReal x312=((0.72)*x301);
                                                        evalcond[0]=(((x301*x303))+pz+(((-1.0)*x300*x304))+(((-1.0)*x307)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x301*x304))+x302+(((-1.0)*x310))+(((-1.0)*x300*x303))+(((-1.0)*x306)));
                                                        evalcond[2]=((-0.36)+((x301*x302))+x311+(((-1.0)*x305*x309))+(((-1.0)*x306))+(((-1.0)*x304)));
                                                        evalcond[3]=((((-1.0)*x300*x310))+(((-1.0)*pz*x309))+((x300*x302))+(((-1.0)*x307))+(((-1.0)*x303)));
                                                        evalcond[4]=((-0.1503)+((x302*x312))+(((0.72)*x302))+(((-1.0)*(px*px)))+(((-1.0)*x305*x312))+(((-0.2592)*x301))+(((-1.0)*(pz*pz)))+(((0.72)*x311))+(((-1.0)*(py*py)))+(((-0.72)*x305)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
    return "<robot:GenericRobot - Hunker (9a2ab31e56b7c896fa8ed10d7389ec5f)>";
}

IKFAST_API const char* GetIkFastVersion()
{
    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
