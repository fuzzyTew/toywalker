#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_backLeftFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-19 12:37:09.922401
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return -IKPI_2;
    }
    else if( f >= 1 )
    {
        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if( f < 0 )
    {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 )
    {
        ret.value = f*f;
    }
    else if( num == 3 )
    {
        ret.value = f*f*f;
    }
    else
    {
        ret.value = 1.0;
        while(num>0)
        {
            if( num & 1 )
            {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 )
    {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[1]);
    x1=IKsin(j[0]);
    x2=IKcos(j[2]);
    x3=IKcos(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x3);
    x8=((0.33)*x2);
    x9=(x0*x1);
    eetrans[0]=((((-0.36)*x1))+(((-0.36)*x9))+(((-1.0)*x1*x4*x6))+(((-1.0)*x8*x9)));
    eetrans[1]=((0.36)+((x0*x7))+((x0*x3*x8))+x7+((x3*x4*x6)));
    eetrans[2]=((0.15)+(((-0.36)*x4))+((x0*x6))+(((-1.0)*x4*x8)));
}

IKFAST_API int GetNumFreeParameters()
{
    return 0;
}
IKFAST_API int* GetFreeParameters()
{
    return NULL;
}
IKFAST_API int GetNumJoints()
{
    return 3;
}

IKFAST_API int GetIkRealSize()
{
    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j0=numeric_limits<IkReal>::quiet_NaN();
        _ij0[0] = -1;
        _ij0[1] = -1;
        _nj0 = -1;
        j1=numeric_limits<IkReal>::quiet_NaN();
        _ij1[0] = -1;
        _ij1[1] = -1;
        _nj1 = -1;
        j2=numeric_limits<IkReal>::quiet_NaN();
        _ij2[0] = -1;
        _ij2[1] = -1;
        _nj2 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=px;
            new_py=((-0.36)+py);
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j0eval[1];
                j0eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j0eval[0]) < 0.0000010000000000  )
                {
                    continue; // 0 cases reached

                }
                else
                {
                    {
                        IkReal j0array[2], cj0array[2], sj0array[2];
                        bool j0valid[2]= {false};
                        _nj0 = 2;
                        CheckValue<IkReal> x11 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x11.valid)
                        {
                            continue;
                        }
                        IkReal x10=x11.value;
                        j0array[0]=((-1.0)*x10);
                        sj0array[0]=IKsin(j0array[0]);
                        cj0array[0]=IKcos(j0array[0]);
                        j0array[1]=((3.14159265358979)+(((-1.0)*x10)));
                        sj0array[1]=IKsin(j0array[1]);
                        cj0array[1]=IKcos(j0array[1]);
                        if( j0array[0] > IKPI )
                        {
                            j0array[0]-=IK2PI;
                        }
                        else if( j0array[0] < -IKPI )
                        {
                            j0array[0]+=IK2PI;
                        }
                        j0valid[0] = true;
                        if( j0array[1] > IKPI )
                        {
                            j0array[1]-=IK2PI;
                        }
                        else if( j0array[1] < -IKPI )
                        {
                            j0array[1]+=IK2PI;
                        }
                        j0valid[1] = true;
                        for(int ij0 = 0; ij0 < 2; ++ij0)
                        {
                            if( !j0valid[ij0] )
                            {
                                continue;
                            }
                            _ij0[0] = ij0;
                            _ij0[1] = -1;
                            for(int iij0 = ij0+1; iij0 < 2; ++iij0)
                            {
                                if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                {
                                    j0valid[iij0]=false;
                                    _ij0[1] = iij0;
                                    break;
                                }
                            }
                            j0 = j0array[ij0];
                            cj0 = cj0array[ij0];
                            sj0 = sj0array[ij0];

                            {
                                IkReal j2array[2], cj2array[2], sj2array[2];
                                bool j2valid[2]= {false};
                                _nj2 = 2;
                                cj2array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz)))+(((3.03030303030303)*px*sj0))+(((4.20875420875421)*(py*py)))+(((4.20875420875421)*(px*px)))+(((-3.03030303030303)*cj0*py)));
                                if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j2valid[0] = j2valid[1] = true;
                                    j2array[0] = IKacos(cj2array[0]);
                                    sj2array[0] = IKsin(j2array[0]);
                                    cj2array[1] = cj2array[0];
                                    j2array[1] = -j2array[0];
                                    sj2array[1] = -sj2array[0];
                                }
                                else if( isnan(cj2array[0]) )
                                {
                                    // probably any value will work
                                    j2valid[0] = true;
                                    cj2array[0] = 1;
                                    sj2array[0] = 0;
                                    j2array[0] = 0;
                                }
                                for(int ij2 = 0; ij2 < 2; ++ij2)
                                {
                                    if( !j2valid[ij2] )
                                    {
                                        continue;
                                    }
                                    _ij2[0] = ij2;
                                    _ij2[1] = -1;
                                    for(int iij2 = ij2+1; iij2 < 2; ++iij2)
                                    {
                                        if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
                                        {
                                            j2valid[iij2]=false;
                                            _ij2[1] = iij2;
                                            break;
                                        }
                                    }
                                    j2 = j2array[ij2];
                                    cj2 = cj2array[ij2];
                                    sj2 = sj2array[ij2];

                                    {
                                        IkReal j1eval[3];
                                        IkReal x12=(px*sj0);
                                        IkReal x13=((3300.0)*sj2);
                                        IkReal x14=(cj0*py);
                                        IkReal x15=((3300.0)*cj2);
                                        j1eval[0]=((1.00378787878788)+cj2);
                                        j1eval[1]=IKsign(((2385.0)+(((2376.0)*cj2))));
                                        j1eval[2]=((IKabs(((((-1.0)*pz*x15))+(((-3600.0)*pz))+(((-1188.0)*sj2))+((x13*x14))+(((-1.0)*x12*x13)))))+(IKabs(((-1296.0)+((pz*x13))+(((3600.0)*x14))+(((-3600.0)*x12))+((x14*x15))+(((-1188.0)*cj2))+(((-1.0)*x12*x15))))));
                                        if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j1eval[3];
                                                IkReal x16=(px*sj0);
                                                IkReal x17=((100.0)*pz);
                                                IkReal x18=(pz*sj2);
                                                IkReal x19=(cj0*py);
                                                IkReal x20=((2.77777777777778)*cj2);
                                                IkReal x21=((33.0)*cj2);
                                                j1eval[0]=((1.09090909090909)+(((-1.0)*x19*x20))+cj2+(((-3.03030303030303)*x19))+(((2.77777777777778)*x18))+((x16*x20))+(((3.03030303030303)*x16)));
                                                j1eval[1]=((IKabs(((((-11.88)*sj2))+(((-10.89)*cj2*sj2))+(((-1.0)*x16*x17))+((x17*x19))+(((-36.0)*pz)))))+(IKabs(((-12.96)+((pz*x17))+(((-23.76)*cj2))+(((-10.89)*(cj2*cj2)))))));
                                                j1eval[2]=IKsign(((12.96)+(((-1.0)*x19*x21))+(((11.88)*cj2))+(((33.0)*x18))+((x16*x21))+(((-36.0)*x19))+(((36.0)*x16))));
                                                if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j1eval[1];
                                                        IkReal x22=((2.77777777777778)*sj2);
                                                        j1eval[0]=(((px*sj0*x22))+sj2+(((-2.77777777777778)*cj2*pz))+(((-1.0)*cj0*py*x22))+(((-3.03030303030303)*pz)));
                                                        if( IKabs(j1eval[0]) < 0.0000010000000000  )
                                                        {
                                                            continue; // 0 cases reached

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]= {false};
                                                                _nj1 = 1;
                                                                IkReal x23=((11.88)*sj2);
                                                                IkReal x24=((36.0)*pz);
                                                                IkReal x25=((100.0)*pz);
                                                                IkReal x26=(px*sj0);
                                                                IkReal x27=(cj2*pz);
                                                                IkReal x28=(cj0*py);
                                                                IkReal x29=((3300.0)*sj2);
                                                                IkReal x30=((33.0)*sj2);
                                                                CheckValue<IkReal> x31=IKPowWithIntegerCheck<IkReal>(((((-3300.0)*x27))+(((-3600.0)*pz))+((x26*x29))+(((-1.0)*x28*x29))+(((1188.0)*sj2))),-1);
                                                                if(!x31.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x32=IKPowWithIntegerCheck<IkReal>(((((-1.0)*x24))+(((-33.0)*x27))+((x26*x30))+(((-1.0)*x28*x30))+x23),-1);
                                                                if(!x32.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                if( IKabs(((x31.value)*(((-1089.0)+(((10000.0)*(pz*pz)))+(((1089.0)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x32.value)*(((((-1.0)*x23))+(((-10.89)*cj2*sj2))+(((-1.0)*x25*x28))+x24+((x25*x26)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x31.value)*(((-1089.0)+(((10000.0)*(pz*pz)))+(((1089.0)*(cj2*cj2)))))))+IKsqr(((x32.value)*(((((-1.0)*x23))+(((-10.89)*cj2*sj2))+(((-1.0)*x25*x28))+x24+((x25*x26))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                {
                                                                    continue;
                                                                }
                                                                j1array[0]=IKatan2(((x31.value)*(((-1089.0)+(((10000.0)*(pz*pz)))+(((1089.0)*(cj2*cj2)))))), ((x32.value)*(((((-1.0)*x23))+(((-10.89)*cj2*sj2))+(((-1.0)*x25*x28))+x24+((x25*x26))))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                {
                                                                    j1array[0]-=IK2PI;
                                                                }
                                                                else if( j1array[0] < -IKPI )
                                                                {
                                                                    j1array[0]+=IK2PI;
                                                                }
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                    if( !j1valid[ij1] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij1[0] = ij1;
                                                                    _ij1[1] = -1;
                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                    {
                                                                        if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                        {
                                                                            j1valid[iij1]=false;
                                                                            _ij1[1] = iij1;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j1 = j1array[ij1];
                                                                    cj1 = cj1array[ij1];
                                                                    sj1 = sj1array[ij1];
                                                                    {
                                                                        IkReal evalcond[5];
                                                                        IkReal x33=IKsin(j1);
                                                                        IkReal x34=IKcos(j1);
                                                                        IkReal x35=(cj0*py);
                                                                        IkReal x36=((1.0)*pz);
                                                                        IkReal x37=((0.33)*sj2);
                                                                        IkReal x38=((0.33)*cj2);
                                                                        IkReal x39=(px*sj0);
                                                                        IkReal x40=((0.36)*x33);
                                                                        IkReal x41=((0.36)*x34);
                                                                        IkReal x42=((0.33)*x34);
                                                                        IkReal x43=((1.0)*x39);
                                                                        IkReal x44=((0.72)*x34);
                                                                        evalcond[0]=(((x34*x37))+(((-1.0)*x40))+(((-1.0)*x36))+(((-1.0)*x33*x38)));
                                                                        evalcond[1]=((-0.36)+(((-1.0)*x41))+(((-1.0)*x43))+(((-1.0)*x33*x37))+x35+(((-1.0)*x34*x38)));
                                                                        evalcond[2]=(((pz*x34))+(((-1.0)*x40))+(((-1.0)*x37))+(((-1.0)*x33*x43))+((x33*x35)));
                                                                        evalcond[3]=((-0.36)+((x34*x35))+(((-1.0)*x41))+(((-1.0)*x38))+(((-1.0)*x33*x36))+(((-1.0)*x34*x43)));
                                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.2592)*x34))+((x35*x44))+(((-1.0)*pz*x36))+(((-1.0)*x39*x44))+(((-0.72)*x39))+(((0.72)*x35))+(((-1.0)*(py*py)))+(((-0.72)*pz*x33)));
                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        int vfree[0];
                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                        bool j1valid[1]= {false};
                                                        _nj1 = 1;
                                                        IkReal x45=(px*sj0);
                                                        IkReal x46=((100.0)*pz);
                                                        IkReal x47=(cj0*py);
                                                        IkReal x48=((33.0)*cj2);
                                                        CheckValue<IkReal> x49=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+(((36.0)*x45))+(((11.88)*cj2))+((x45*x48))+(((-36.0)*x47))+(((-1.0)*x47*x48))+(((33.0)*pz*sj2)))),-1);
                                                        if(!x49.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(((((-11.88)*sj2))+(((-10.89)*cj2*sj2))+((x46*x47))+(((-1.0)*x45*x46))+(((-36.0)*pz)))),IkReal(((-12.96)+((pz*x46))+(((-23.76)*cj2))+(((-10.89)*(cj2*cj2))))),IKFAST_ATAN2_MAGTHRESH);
                                                        if(!x50.valid)
                                                        {
                                                            continue;
                                                        }
                                                        j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x49.value)))+(x50.value));
                                                        sj1array[0]=IKsin(j1array[0]);
                                                        cj1array[0]=IKcos(j1array[0]);
                                                        if( j1array[0] > IKPI )
                                                        {
                                                            j1array[0]-=IK2PI;
                                                        }
                                                        else if( j1array[0] < -IKPI )
                                                        {
                                                            j1array[0]+=IK2PI;
                                                        }
                                                        j1valid[0] = true;
                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                        {
                                                            if( !j1valid[ij1] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij1[0] = ij1;
                                                            _ij1[1] = -1;
                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                            {
                                                                if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j1valid[iij1]=false;
                                                                    _ij1[1] = iij1;
                                                                    break;
                                                                }
                                                            }
                                                            j1 = j1array[ij1];
                                                            cj1 = cj1array[ij1];
                                                            sj1 = sj1array[ij1];
                                                            {
                                                                IkReal evalcond[5];
                                                                IkReal x51=IKsin(j1);
                                                                IkReal x52=IKcos(j1);
                                                                IkReal x53=(cj0*py);
                                                                IkReal x54=((1.0)*pz);
                                                                IkReal x55=((0.33)*sj2);
                                                                IkReal x56=((0.33)*cj2);
                                                                IkReal x57=(px*sj0);
                                                                IkReal x58=((0.36)*x51);
                                                                IkReal x59=((0.36)*x52);
                                                                IkReal x60=((0.33)*x52);
                                                                IkReal x61=((1.0)*x57);
                                                                IkReal x62=((0.72)*x52);
                                                                evalcond[0]=((((-1.0)*x51*x56))+((x52*x55))+(((-1.0)*x58))+(((-1.0)*x54)));
                                                                evalcond[1]=((-0.36)+(((-1.0)*x52*x56))+(((-1.0)*x51*x55))+x53+(((-1.0)*x61))+(((-1.0)*x59)));
                                                                evalcond[2]=((((-1.0)*x51*x61))+((x51*x53))+((pz*x52))+(((-1.0)*x58))+(((-1.0)*x55)));
                                                                evalcond[3]=((-0.36)+(((-1.0)*x52*x61))+(((-1.0)*x51*x54))+((x52*x53))+(((-1.0)*x59))+(((-1.0)*x56)));
                                                                evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.72)*pz*x51))+(((0.72)*x53))+(((-0.2592)*x52))+((x53*x62))+(((-1.0)*pz*x54))+(((-1.0)*x57*x62))+(((-1.0)*(py*py)))+(((-0.72)*x57)));
                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                int vfree[0];
                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                bool j1valid[1]= {false};
                                                _nj1 = 1;
                                                IkReal x63=(px*sj0);
                                                IkReal x64=((3300.0)*sj2);
                                                IkReal x65=(cj0*py);
                                                IkReal x66=((3300.0)*cj2);
                                                CheckValue<IkReal> x67 = IKatan2WithCheck(IkReal(((((-3600.0)*pz))+(((-1.0)*pz*x66))+(((-1188.0)*sj2))+((x64*x65))+(((-1.0)*x63*x64)))),IkReal(((-1296.0)+(((3600.0)*x65))+(((-3600.0)*x63))+(((-1188.0)*cj2))+((pz*x64))+(((-1.0)*x63*x66))+((x65*x66)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x67.valid)
                                                {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x68=IKPowWithIntegerCheck<IkReal>(IKsign(((2385.0)+(((2376.0)*cj2)))),-1);
                                                if(!x68.valid)
                                                {
                                                    continue;
                                                }
                                                j1array[0]=((-1.5707963267949)+(x67.value)+(((1.5707963267949)*(x68.value))));
                                                sj1array[0]=IKsin(j1array[0]);
                                                cj1array[0]=IKcos(j1array[0]);
                                                if( j1array[0] > IKPI )
                                                {
                                                    j1array[0]-=IK2PI;
                                                }
                                                else if( j1array[0] < -IKPI )
                                                {
                                                    j1array[0]+=IK2PI;
                                                }
                                                j1valid[0] = true;
                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                {
                                                    if( !j1valid[ij1] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij1[0] = ij1;
                                                    _ij1[1] = -1;
                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                    {
                                                        if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j1valid[iij1]=false;
                                                            _ij1[1] = iij1;
                                                            break;
                                                        }
                                                    }
                                                    j1 = j1array[ij1];
                                                    cj1 = cj1array[ij1];
                                                    sj1 = sj1array[ij1];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x69=IKsin(j1);
                                                        IkReal x70=IKcos(j1);
                                                        IkReal x71=(cj0*py);
                                                        IkReal x72=((1.0)*pz);
                                                        IkReal x73=((0.33)*sj2);
                                                        IkReal x74=((0.33)*cj2);
                                                        IkReal x75=(px*sj0);
                                                        IkReal x76=((0.36)*x69);
                                                        IkReal x77=((0.36)*x70);
                                                        IkReal x78=((0.33)*x70);
                                                        IkReal x79=((1.0)*x75);
                                                        IkReal x80=((0.72)*x70);
                                                        evalcond[0]=((((-1.0)*x72))+(((-1.0)*x76))+((x70*x73))+(((-1.0)*x69*x74)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x77))+(((-1.0)*x79))+(((-1.0)*x70*x74))+x71+(((-1.0)*x69*x73)));
                                                        evalcond[2]=(((pz*x70))+(((-1.0)*x73))+(((-1.0)*x76))+((x69*x71))+(((-1.0)*x69*x79)));
                                                        evalcond[3]=((-0.36)+(((-1.0)*x74))+(((-1.0)*x77))+(((-1.0)*x70*x79))+((x70*x71))+(((-1.0)*x69*x72)));
                                                        evalcond[4]=((-0.1503)+(((-0.72)*pz*x69))+(((-1.0)*(px*px)))+(((-0.72)*x75))+(((-0.2592)*x70))+(((-1.0)*(py*py)))+(((-1.0)*pz*x72))+(((-1.0)*x75*x80))+(((0.72)*x71))+((x71*x80)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
    return "<robot:GenericRobot - Hunker (f7071dcf5459c249fade087ece139e54)>";
}

IKFAST_API const char* GetIkFastVersion()
{
    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
