#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL float
#define IKFAST_NAMESPACE kinematics_ikfast_frontRightFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-26 16:19:12.227832
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return float(-IKPI_2);
    }
    else if (false)//else if( f >= 1 )
    {
//        return float(IKPI_2);
    }
//    return asinf(f);
}
inline double IKasin(double f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if (false)//else if( f >= 1 )
    {
//        return IKPI_2;
    }
//    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return float(IKPI);
    }
    else if( f >= 1 )
    {
//        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if (false)//if( f <= 0.0f )
    {
//        return 0.0f;
    }
//    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if (false)//if( f <= 0.0 )
    {
//        return 0.0;
    }
//    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKsin(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKcos(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.24)*x5);
    x7=((0.36)*x3);
    x8=((0.36)*x0);
    x9=((0.24)*x1*x2);
    eetrans[0]=(((x0*x9))+((x1*x8))+x8+((x0*x4*x6)));
    IkReal x10=((1.0)*x7);
    IkReal x11=((1.0)*x3);
    eetrans[1]=((-0.36)+(((-1.0)*x11*x4*x6))+(((-1.0)*x10))+(((-1.0)*x1*x10))+(((-1.0)*x11*x9)));
    eetrans[2]=((0.15)+(((-1.0)*x1*x6))+(((0.24)*x2*x4))+(((0.36)*x4)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j9=numeric_limits<IkReal>::quiet_NaN();
        _ij9[0] = -1;
        _ij9[1] = -1;
        _nj9 = -1;
        j10=numeric_limits<IkReal>::quiet_NaN();
        _ij10[0] = -1;
        _ij10[1] = -1;
        _nj10 = -1;
        j11=numeric_limits<IkReal>::quiet_NaN();
        _ij11[0] = -1;
        _ij11[1] = -1;
        _nj11 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=px;
            new_py=((0.36)+py);
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j9eval[1];
                j9eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j9eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
//                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
//                                bgotonextstatement=false;
                                {
                                    IkReal j11array[2], cj11array[2], sj11array[2];
                                    bool j11valid[2]= {false};
//                                    _nj11 = 2;
//                                    cj11array[0]=((-0.333333333333333)+(((5.78703703703704)*(pz*pz))));
                                    if (false)//if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
//                                        j11valid[0] = j11valid[1] = true;
//                                        j11array[0] = IKacos(cj11array[0]);
//                                        sj11array[0] = IKsin(j11array[0]);
//                                        cj11array[1] = cj11array[0];
//                                        j11array[1] = -j11array[0];
//                                        sj11array[1] = -sj11array[0];
                                    }
                                    else if (false)//else if( isnan(cj11array[0]) )
                                    {
                                        // probably any value will work
//                                        j11valid[0] = true;
//                                        cj11array[0] = 1;
//                                        sj11array[0] = 0;
//                                        j11array[0] = 0;
                                    }
//                                    for(int ij11 = 0; ij11 < 2; ++ij11)
                                    {
                                        if (false)//if( !j11valid[ij11] )
                                        {
//                                            continue;
                                        }
//                                        _ij11[0] = ij11;
//                                        _ij11[1] = -1;
//                                        for(int iij11 = ij11+1; iij11 < 2; ++iij11)
                                        {
                                            if (false)//if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
                                            {
//                                                j11valid[iij11]=false;
//                                                _ij11[1] = iij11;
//                                                break;
                                            }
                                        }
//                                        j11 = j11array[ij11];
//                                        cj11 = cj11array[ij11];
//                                        sj11 = sj11array[ij11];

                                        {
                                            IkReal j10eval[3];
//                                            px=0;
//                                            py=0;
//                                            pp=pz*pz;
//                                            IkReal x12=pz*pz;
//                                            IkReal x13=((150.0)*pz);
//                                            j10eval[0]=((-1.0)+(((-7.71604938271605)*x12)));
//                                            j10eval[1]=IKsign(((-81.0)+(((-625.0)*x12))));
//                                            j10eval[2]=((IKabs(((((-1.0)*cj11*x13))+(((54.0)*sj11))+(((-225.0)*pz)))))+(IKabs(((81.0)+(((54.0)*cj11))+((sj11*x13))))));
                                            if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j10eval[3];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    IkReal x14=((225.0)*pz);
//                                                    IkReal x15=((54.0)*sj11);
//                                                    IkReal x16=(cj11*pz);
//                                                    IkReal x17=(x15+x14);
//                                                    j10eval[0]=((((-4.16666666666667)*pz))+(((-1.0)*sj11))+(((-2.77777777777778)*x16)));
//                                                    j10eval[1]=((IKabs(((((36.0)*cj11*sj11))+x17)))+(IKabs(((36.0)+(((-36.0)*(cj11*cj11)))+(((-625.0)*(pz*pz)))))));
//                                                    j10eval[2]=IKsign(((((-1.0)*x17))+(((-150.0)*x16))));
                                                    if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j10eval[1];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j10eval[0]=((1.5)+cj11+(((-2.77777777777778)*pz*sj11)));
                                                            if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
//                                                                        IkReal x18=((1.0)+(((7.71604938271605)*(pz*pz))));
//                                                                        IkReal x25 = x18;
                                                                        if (false)//if(IKabs(x25)==0)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x19=pow(x25,-0.5);
                                                                        if (false)//if((x18) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x20=IKabs(IKsqrt(x18));
//                                                                        IkReal x21=(pz*x19);
//                                                                        CheckValue<IkReal> x26=IKPowWithIntegerCheck<IKFAST_REAL>(x20,-1);
                                                                        if (false)//if(!x26.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x22=x26.value;
//                                                                        IkReal x23=((1.5)*x22);
                                                                        if (false)//if((((1.0)+(((-2.25)*(x22*x22))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x24=IKsqrt(((1.0)+(((-2.25)*(x22*x22)))));
//                                                                        CheckValue<IkReal> x27 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x27.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (x23) < -1-IKFAST_SINCOS_THRESH || (x23) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal gconst0=((((-1.0)*(x27.value)))+(((-1.0)*(IKasin(x23)))));
//                                                                        IkReal gconst1=((((-1.0)*x19*x24))+(((4.16666666666667)*x21*x22)));
//                                                                        IkReal gconst2=((((-1.0)*x19*x23))+(((-2.77777777777778)*x21*x24)));
//                                                                        CheckValue<IkReal> x28 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x28.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x29=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if (false)//if(!x29.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((1.5)*(x29.value))) < -1-IKFAST_SINCOS_THRESH || (((1.5)*(x29.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x28.value)+j11+(IKasin(((1.5)*(x29.value)))))))), 6.28318530717959)));
                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
//                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j10eval[2];
//                                                                                IkReal x30=pz*pz;
//                                                                                IkReal x31=x18;
//                                                                                IkReal x39 = x31;
                                                                                if (false)//if(IKabs(x39)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x32=pow(x39,-0.5);
                                                                                if (false)//if((x31) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x33=IKabs(IKsqrt(x31));
//                                                                                IkReal x34=(pz*x32);
//                                                                                CheckValue<IkReal> x40=IKPowWithIntegerCheck<IKFAST_REAL>(x33,-1);
                                                                                if (false)//if(!x40.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x35=x40.value;
//                                                                                IkReal x36=((1.5)*x35);
                                                                                if (false)//if((((1.0)+(((-2.25)*(x35*x35))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x37=IKsqrt(((1.0)+(((-2.25)*(x35*x35)))));
//                                                                                CheckValue<IkReal> x41 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x41.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (x36) < -1-IKFAST_SINCOS_THRESH || (x36) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x38=((((-1.0)*(x41.value)))+(((-1.0)*(IKasin(x36)))));
//                                                                                px=0;
//                                                                                py=0;
//                                                                                pp=x30;
//                                                                                sj11=gconst1;
//                                                                                cj11=gconst2;
//                                                                                j11=x38;
//                                                                                IkReal gconst0=x38;
//                                                                                IkReal gconst1=((((4.16666666666667)*x34*x35))+(((-1.0)*x32*x37)));
//                                                                                IkReal gconst2=((((-1.0)*x32*x36))+(((-2.77777777777778)*x34*x37)));
//                                                                                IkReal x42=pz*pz;
//                                                                                j10eval[0]=((-1.0)+(((-7.71604938271605)*x42)));
//                                                                                j10eval[1]=IKsign(((-81.0)+(((-625.0)*x42))));
                                                                                if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                        bool j10valid[1]= {false};
//                                                                                        _nj10 = 1;
//                                                                                        IkReal x43=((225.0)*pz);
//                                                                                        IkReal x44=((54.0)*gconst1);
//                                                                                        IkReal x45=(x44+x43);
//                                                                                        CheckValue<IkReal> x46=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-1.0)*x45))+(((-150.0)*gconst2*pz)))),-1);
                                                                                        if (false)//if(!x46.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x47 = IKatan2WithCheck(IkReal(((((-108.0)*gconst2))+(((-36.0)*(gconst2*gconst2))))),IkReal((x45+(((36.0)*gconst1*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x47.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x46.value)))+(x47.value));
//                                                                                        sj10array[0]=IKsin(j10array[0]);
//                                                                                        cj10array[0]=IKcos(j10array[0]);
                                                                                        if (false)//if( j10array[0] > IKPI )
                                                                                        {
//                                                                                            j10array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j10array[0] < -IKPI )
                                                                                        {
//                                                                                            j10array[0]+=IK2PI;
                                                                                        }
//                                                                                        j10valid[0] = true;
//                                                                                        for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                        {
                                                                                            if (false)//if( !j10valid[ij10] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij10[0] = ij10;
//                                                                                            _ij10[1] = -1;
//                                                                                            for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                            {
                                                                                                if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j10valid[iij10]=false;
//                                                                                                    _ij10[1] = iij10;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j10 = j10array[ij10];
//                                                                                            cj10 = cj10array[ij10];
//                                                                                            sj10 = sj10array[ij10];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x48=IKsin(j10);
//                                                                                                IkReal x49=IKcos(j10);
//                                                                                                IkReal x50=((0.24)*gconst1);
//                                                                                                IkReal x51=((0.24)*gconst2);
//                                                                                                IkReal x52=((0.36)*x48);
//                                                                                                IkReal x53=((0.36)*x49);
//                                                                                                IkReal x54=((0.24)*x49);
//                                                                                                IkReal x55=(pz*x48);
//                                                                                                evalcond[0]=((-0.36)+x55+(((-1.0)*x51))+(((-1.0)*x53)));
//                                                                                                evalcond[1]=((((-1.0)*pz*x49))+(((-1.0)*x52))+(((-1.0)*x50)));
//                                                                                                evalcond[2]=((-0.2016)+(((-0.2592)*x49))+(((0.72)*x55))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=((((-1.0)*x48*x51))+pz+((x49*x50))+(((-1.0)*x52)));
//                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x48*x50))+(((-1.0)*x49*x51))+(((-1.0)*x53)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                bool j9valid[1]= {false};
//                                                                                                _nj9 = 1;
//                                                                                                j9array[0]=0;
//                                                                                                sj9array[0]=IKsin(j9array[0]);
//                                                                                                cj9array[0]=IKcos(j9array[0]);
                                                                                                if (false)//if( j9array[0] > IKPI )
                                                                                                {
//                                                                                                    j9array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j9array[0] < -IKPI )
                                                                                                {
//                                                                                                    j9array[0]+=IK2PI;
                                                                                                }
//                                                                                                j9valid[0] = true;
//                                                                                                for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                {
                                                                                                    if (false)//if( !j9valid[ij9] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij9[0] = ij9;
//                                                                                                    _ij9[1] = -1;
//                                                                                                    for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                    {
                                                                                                        if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j9valid[iij9]=false;
//                                                                                                            _ij9[1] = iij9;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j9 = j9array[ij9];
//                                                                                                    cj9 = cj9array[ij9];
//                                                                                                    sj9 = sj9array[ij9];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j9;
//                                                                                                        vinfos[0].indices[0] = _ij9[0];
//                                                                                                        vinfos[0].indices[1] = _ij9[1];
//                                                                                                        vinfos[0].maxsolutions = _nj9;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j10;
//                                                                                                        vinfos[1].indices[0] = _ij10[0];
//                                                                                                        vinfos[1].indices[1] = _ij10[1];
//                                                                                                        vinfos[1].maxsolutions = _nj10;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j11;
//                                                                                                        vinfos[2].indices[0] = _ij11[0];
//                                                                                                        vinfos[2].indices[1] = _ij11[1];
//                                                                                                        vinfos[2].maxsolutions = _nj11;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                        bool j10valid[1]= {false};
//                                                                                        _nj10 = 1;
//                                                                                        IkReal x56=((150.0)*pz);
//                                                                                        CheckValue<IkReal> x57=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                                                        if (false)//if(!x57.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x58 = IKatan2WithCheck(IkReal(((((54.0)*gconst1))+(((-1.0)*gconst2*x56))+(((-225.0)*pz)))),IkReal(((81.0)+(((54.0)*gconst2))+((gconst1*x56)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x58.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x57.value)))+(x58.value));
//                                                                                        sj10array[0]=IKsin(j10array[0]);
//                                                                                        cj10array[0]=IKcos(j10array[0]);
                                                                                        if (false)//if( j10array[0] > IKPI )
                                                                                        {
//                                                                                            j10array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j10array[0] < -IKPI )
                                                                                        {
//                                                                                            j10array[0]+=IK2PI;
                                                                                        }
//                                                                                        j10valid[0] = true;
//                                                                                        for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                        {
                                                                                            if (false)//if( !j10valid[ij10] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij10[0] = ij10;
//                                                                                            _ij10[1] = -1;
//                                                                                            for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                            {
                                                                                                if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j10valid[iij10]=false;
//                                                                                                    _ij10[1] = iij10;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j10 = j10array[ij10];
//                                                                                            cj10 = cj10array[ij10];
//                                                                                            sj10 = sj10array[ij10];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x59=IKsin(j10);
//                                                                                                IkReal x60=IKcos(j10);
//                                                                                                IkReal x61=((0.24)*gconst1);
//                                                                                                IkReal x62=((0.24)*gconst2);
//                                                                                                IkReal x63=((0.36)*x59);
//                                                                                                IkReal x64=((0.36)*x60);
//                                                                                                IkReal x65=((0.24)*x60);
//                                                                                                IkReal x66=(pz*x59);
//                                                                                                evalcond[0]=((-0.36)+x66+(((-1.0)*x62))+(((-1.0)*x64)));
//                                                                                                evalcond[1]=((((-1.0)*pz*x60))+(((-1.0)*x63))+(((-1.0)*x61)));
//                                                                                                evalcond[2]=((-0.2016)+(((0.72)*x66))+(((-0.2592)*x60))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=(((x60*x61))+(((-1.0)*x59*x62))+pz+(((-1.0)*x63)));
//                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x59*x61))+(((-1.0)*x64))+(((-1.0)*x60*x62)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                bool j9valid[1]= {false};
//                                                                                                _nj9 = 1;
//                                                                                                j9array[0]=0;
//                                                                                                sj9array[0]=IKsin(j9array[0]);
//                                                                                                cj9array[0]=IKcos(j9array[0]);
                                                                                                if (false)//if( j9array[0] > IKPI )
                                                                                                {
//                                                                                                    j9array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j9array[0] < -IKPI )
                                                                                                {
//                                                                                                    j9array[0]+=IK2PI;
                                                                                                }
//                                                                                                j9valid[0] = true;
//                                                                                                for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                {
                                                                                                    if (false)//if( !j9valid[ij9] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij9[0] = ij9;
//                                                                                                    _ij9[1] = -1;
//                                                                                                    for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                    {
                                                                                                        if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j9valid[iij9]=false;
//                                                                                                            _ij9[1] = iij9;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j9 = j9array[ij9];
//                                                                                                    cj9 = cj9array[ij9];
//                                                                                                    sj9 = sj9array[ij9];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j9;
//                                                                                                        vinfos[0].indices[0] = _ij9[0];
//                                                                                                        vinfos[0].indices[1] = _ij9[1];
//                                                                                                        vinfos[0].maxsolutions = _nj9;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j10;
//                                                                                                        vinfos[1].indices[0] = _ij10[0];
//                                                                                                        vinfos[1].indices[1] = _ij10[1];
//                                                                                                        vinfos[1].maxsolutions = _nj10;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j11;
//                                                                                                        vinfos[2].indices[0] = _ij11[0];
//                                                                                                        vinfos[2].indices[1] = _ij11[1];
//                                                                                                        vinfos[2].maxsolutions = _nj11;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if (false)//if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            IkReal x67=((1.0)+(((7.71604938271605)*(pz*pz))));
//                                                                            IkReal x74 = x67;
                                                                            if (false)//if(IKabs(x74)==0)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x68=pow(x74,-0.5);
                                                                            if (false)//if((x67) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x69=IKabs(IKsqrt(x67));
//                                                                            CheckValue<IkReal> x75=IKPowWithIntegerCheck<IKFAST_REAL>(x69,-1);
                                                                            if (false)//if(!x75.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x70=x75.value;
//                                                                            IkReal x71=((1.5)*x70);
                                                                            if (false)//if((((1.0)+(((-2.25)*(x70*x70))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x72=IKsqrt(((1.0)+(((-2.25)*(x70*x70)))));
//                                                                            IkReal x73=(x68*x72);
//                                                                            CheckValue<IkReal> x76 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x76.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (x71) < -1-IKFAST_SINCOS_THRESH || (x71) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(x76.value)))+(IKasin(x71)));
//                                                                            IkReal gconst4=((((1.0)*x73))+(((4.16666666666667)*pz*x68*x70)));
//                                                                            IkReal gconst5=((((2.77777777777778)*pz*x73))+(((-1.0)*x68*x71)));
                                                                            if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x77=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if (false)//if(!x77.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (((1.5)*(x77.value))) < -1-IKFAST_SINCOS_THRESH || (((1.5)*(x77.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x78 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x78.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((1.5)*(x77.value))))))+(x78.value)+j11)))), 6.28318530717959)));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j10eval[2];
//                                                                                    IkReal x79=pz*pz;
//                                                                                    CheckValue<IkReal> x89 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x89.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x80=((1.0)*(x89.value));
//                                                                                    IkReal x81=x67;
//                                                                                    IkReal x90 = x81;
                                                                                    if (false)//if(IKabs(x90)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x82=pow(x90,-0.5);
                                                                                    if (false)//if((x81) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x83=IKabs(IKsqrt(x81));
//                                                                                    CheckValue<IkReal> x91=IKPowWithIntegerCheck<IKFAST_REAL>(x83,-1);
                                                                                    if (false)//if(!x91.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x84=x91.value;
//                                                                                    IkReal x85=((1.5)*x84);
                                                                                    if (false)//if( (x85) < -1-IKFAST_SINCOS_THRESH || (x85) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x86=IKasin(x85);
                                                                                    if (false)//if((((1.0)+(((-2.25)*(x84*x84))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x87=IKsqrt(((1.0)+(((-2.25)*(x84*x84)))));
//                                                                                    IkReal x88=(x82*x87);
//                                                                                    px=0;
//                                                                                    py=0;
//                                                                                    pp=x79;
//                                                                                    sj11=gconst4;
//                                                                                    cj11=gconst5;
//                                                                                    j11=((3.14159265)+x86+(((-1.0)*x80)));
//                                                                                    IkReal gconst3=((3.14159265358979)+x86+(((-1.0)*x80)));
//                                                                                    IkReal gconst4=((((4.16666666666667)*pz*x82*x84))+(((1.0)*x88)));
//                                                                                    IkReal gconst5=((((-1.0)*x82*x85))+(((2.77777777777778)*pz*x88)));
//                                                                                    IkReal x92=pz*pz;
//                                                                                    j10eval[0]=((-1.0)+(((-7.71604938271605)*x92)));
//                                                                                    j10eval[1]=IKsign(((-81.0)+(((-625.0)*x92))));
                                                                                    if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                            bool j10valid[1]= {false};
//                                                                                            _nj10 = 1;
//                                                                                            IkReal x93=((225.0)*pz);
//                                                                                            IkReal x94=((54.0)*gconst4);
//                                                                                            IkReal x95=(x93+x94);
//                                                                                            CheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(((((36.0)*(gconst4*gconst4)))+(((-625.0)*(pz*pz))))),IkReal((x95+(((36.0)*gconst4*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x96.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x97=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*gconst5*pz))+(((-1.0)*x95)))),-1);
                                                                                            if (false)//if(!x97.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j10array[0]=((-1.5707963267949)+(x96.value)+(((1.5707963267949)*(x97.value))));
//                                                                                            sj10array[0]=IKsin(j10array[0]);
//                                                                                            cj10array[0]=IKcos(j10array[0]);
                                                                                            if (false)//if( j10array[0] > IKPI )
                                                                                            {
//                                                                                                j10array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j10array[0] < -IKPI )
                                                                                            {
//                                                                                                j10array[0]+=IK2PI;
                                                                                            }
//                                                                                            j10valid[0] = true;
//                                                                                            for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                            {
                                                                                                if (false)//if( !j10valid[ij10] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij10[0] = ij10;
//                                                                                                _ij10[1] = -1;
//                                                                                                for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                {
                                                                                                    if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j10valid[iij10]=false;
//                                                                                                        _ij10[1] = iij10;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j10 = j10array[ij10];
//                                                                                                cj10 = cj10array[ij10];
//                                                                                                sj10 = sj10array[ij10];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x98=IKsin(j10);
//                                                                                                    IkReal x99=IKcos(j10);
//                                                                                                    IkReal x100=((0.24)*gconst5);
//                                                                                                    IkReal x101=((0.24)*gconst4);
//                                                                                                    IkReal x102=((0.36)*x98);
//                                                                                                    IkReal x103=((0.36)*x99);
//                                                                                                    IkReal x104=((0.24)*x99);
//                                                                                                    IkReal x105=(pz*x98);
//                                                                                                    evalcond[0]=((-0.36)+(((-1.0)*x100))+(((-1.0)*x103))+x105);
//                                                                                                    evalcond[1]=((((-1.0)*pz*x99))+(((-1.0)*x101))+(((-1.0)*x102)));
//                                                                                                    evalcond[2]=((-0.2016)+(((0.72)*x105))+(((-0.2592)*x99))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=(((x101*x99))+(((-1.0)*x102))+pz+(((-1.0)*x100*x98)));
//                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x103))+(((-1.0)*x101*x98))+(((-1.0)*x100*x99)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                    bool j9valid[1]= {false};
//                                                                                                    _nj9 = 1;
//                                                                                                    j9array[0]=0;
//                                                                                                    sj9array[0]=IKsin(j9array[0]);
//                                                                                                    cj9array[0]=IKcos(j9array[0]);
                                                                                                    if (false)//if( j9array[0] > IKPI )
                                                                                                    {
//                                                                                                        j9array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j9array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j9array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j9valid[0] = true;
//                                                                                                    for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                    {
                                                                                                        if (false)//if( !j9valid[ij9] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij9[0] = ij9;
//                                                                                                        _ij9[1] = -1;
//                                                                                                        for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                        {
                                                                                                            if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j9valid[iij9]=false;
//                                                                                                                _ij9[1] = iij9;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j9 = j9array[ij9];
//                                                                                                        cj9 = cj9array[ij9];
//                                                                                                        sj9 = sj9array[ij9];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j9;
//                                                                                                            vinfos[0].indices[0] = _ij9[0];
//                                                                                                            vinfos[0].indices[1] = _ij9[1];
//                                                                                                            vinfos[0].maxsolutions = _nj9;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j10;
//                                                                                                            vinfos[1].indices[0] = _ij10[0];
//                                                                                                            vinfos[1].indices[1] = _ij10[1];
//                                                                                                            vinfos[1].maxsolutions = _nj10;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j11;
//                                                                                                            vinfos[2].indices[0] = _ij11[0];
//                                                                                                            vinfos[2].indices[1] = _ij11[1];
//                                                                                                            vinfos[2].maxsolutions = _nj11;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                            bool j10valid[1]= {false};
//                                                                                            _nj10 = 1;
//                                                                                            IkReal x106=((150.0)*pz);
//                                                                                            CheckValue<IkReal> x107=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                                                            if (false)//if(!x107.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x108 = IKatan2WithCheck(IkReal(((((54.0)*gconst4))+(((-1.0)*gconst5*x106))+(((-225.0)*pz)))),IkReal(((81.0)+(((54.0)*gconst5))+((gconst4*x106)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x108.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x107.value)))+(x108.value));
//                                                                                            sj10array[0]=IKsin(j10array[0]);
//                                                                                            cj10array[0]=IKcos(j10array[0]);
                                                                                            if (false)//if( j10array[0] > IKPI )
                                                                                            {
//                                                                                                j10array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j10array[0] < -IKPI )
                                                                                            {
//                                                                                                j10array[0]+=IK2PI;
                                                                                            }
//                                                                                            j10valid[0] = true;
//                                                                                            for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                            {
                                                                                                if (false)//if( !j10valid[ij10] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij10[0] = ij10;
//                                                                                                _ij10[1] = -1;
//                                                                                                for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                {
                                                                                                    if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j10valid[iij10]=false;
//                                                                                                        _ij10[1] = iij10;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j10 = j10array[ij10];
//                                                                                                cj10 = cj10array[ij10];
//                                                                                                sj10 = sj10array[ij10];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x109=IKsin(j10);
//                                                                                                    IkReal x110=IKcos(j10);
//                                                                                                    IkReal x111=((0.24)*gconst5);
//                                                                                                    IkReal x112=((0.24)*gconst4);
//                                                                                                    IkReal x113=((0.36)*x109);
//                                                                                                    IkReal x114=((0.36)*x110);
//                                                                                                    IkReal x115=((0.24)*x110);
//                                                                                                    IkReal x116=(pz*x109);
//                                                                                                    evalcond[0]=((-0.36)+(((-1.0)*x111))+(((-1.0)*x114))+x116);
//                                                                                                    evalcond[1]=((((-1.0)*x112))+(((-1.0)*x113))+(((-1.0)*pz*x110)));
//                                                                                                    evalcond[2]=((-0.2016)+(((0.72)*x116))+(((-0.2592)*x110))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=(((x110*x112))+(((-1.0)*x113))+(((-1.0)*x109*x111))+pz);
//                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x114))+(((-1.0)*x110*x111))+(((-1.0)*x109*x112)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                    bool j9valid[1]= {false};
//                                                                                                    _nj9 = 1;
//                                                                                                    j9array[0]=0;
//                                                                                                    sj9array[0]=IKsin(j9array[0]);
//                                                                                                    cj9array[0]=IKcos(j9array[0]);
                                                                                                    if (false)//if( j9array[0] > IKPI )
                                                                                                    {
//                                                                                                        j9array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j9array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j9array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j9valid[0] = true;
//                                                                                                    for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                    {
                                                                                                        if (false)//if( !j9valid[ij9] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij9[0] = ij9;
//                                                                                                        _ij9[1] = -1;
//                                                                                                        for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                        {
                                                                                                            if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j9valid[iij9]=false;
//                                                                                                                _ij9[1] = iij9;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j9 = j9array[ij9];
//                                                                                                        cj9 = cj9array[ij9];
//                                                                                                        sj9 = sj9array[ij9];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j9;
//                                                                                                            vinfos[0].indices[0] = _ij9[0];
//                                                                                                            vinfos[0].indices[1] = _ij9[1];
//                                                                                                            vinfos[0].maxsolutions = _nj9;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j10;
//                                                                                                            vinfos[1].indices[0] = _ij10[0];
//                                                                                                            vinfos[1].indices[1] = _ij10[1];
//                                                                                                            vinfos[1].maxsolutions = _nj10;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j11;
//                                                                                                            vinfos[2].indices[0] = _ij11[0];
//                                                                                                            vinfos[2].indices[1] = _ij11[1];
//                                                                                                            vinfos[2].maxsolutions = _nj11;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
//                                                                                IkReal x117=pz*pz;
//                                                                                IkReal x118=((4.16666666666667)*pz);
//                                                                                IkReal x119=((1.0)+(((7.71604938271605)*x117)));
                                                                                if (false)//if((x119) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x120=IKabs(IKsqrt(x119));
//                                                                                IkReal x126 = x119;
                                                                                if (false)//if(IKabs(x126)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x121=pow(x126,-0.5);
//                                                                                CheckValue<IkReal> x127=IKPowWithIntegerCheck<IKFAST_REAL>(x120,-1);
                                                                                if (false)//if(!x127.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x122=x127.value;
                                                                                if (false)//if((((1.0)+(((-17.3611111111111)*x117*(x122*x122))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x123=IKsqrt(((1.0)+(((-17.3611111111111)*x117*(x122*x122)))));
//                                                                                IkReal x124=(x121*x122);
//                                                                                IkReal x125=(x121*x123);
                                                                                if (false)//if( ((x118*x122)) < -1-IKFAST_SINCOS_THRESH || ((x118*x122)) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x128 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x128.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal gconst6=((IKasin((x118*x122)))+(((-1.0)*(x128.value))));
//                                                                                IkReal gconst7=((((-1.0)*x118*x124))+(((2.77777777777778)*pz*x125)));
//                                                                                IkReal gconst8=((((-1.0)*x125))+(((-11.5740740740741)*x117*x124)));
//                                                                                CheckValue<IkReal> x129 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x129.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x130=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                if (false)//if(!x130.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (((4.16666666666667)*pz*(x130.value))) < -1-IKFAST_SINCOS_THRESH || (((4.16666666666667)*pz*(x130.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x129.value)+(((-1.0)*(IKasin(((4.16666666666667)*pz*(x130.value)))))))))), 6.28318530717959)));
                                                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
//                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j10eval[2];
//                                                                                        IkReal x131=pz*pz;
//                                                                                        IkReal x132=((4.16666666666667)*pz);
//                                                                                        IkReal x133=x119;
                                                                                        if (false)//if((x133) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x134=IKabs(IKsqrt(x133));
//                                                                                        IkReal x141 = x133;
                                                                                        if (false)//if(IKabs(x141)==0)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x135=pow(x141,-0.5);
//                                                                                        CheckValue<IkReal> x142=IKPowWithIntegerCheck<IKFAST_REAL>(x134,-1);
                                                                                        if (false)//if(!x142.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x136=x142.value;
//                                                                                        CheckValue<IkReal> x143 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x143.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
                                                                                        if (false)//if( ((x132*x136)) < -1-IKFAST_SINCOS_THRESH || ((x132*x136)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x137=((((-1.0)*(x143.value)))+(IKasin((x132*x136))));
                                                                                        if (false)//if((((1.0)+(((-17.3611111111111)*x131*(x136*x136))))) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x138=IKsqrt(((1.0)+(((-17.3611111111111)*x131*(x136*x136)))));
//                                                                                        IkReal x139=(x135*x136);
//                                                                                        IkReal x140=(x135*x138);
//                                                                                        px=0;
//                                                                                        py=0;
//                                                                                        pp=x131;
//                                                                                        sj11=gconst7;
//                                                                                        cj11=gconst8;
//                                                                                        j11=x137;
//                                                                                        IkReal gconst6=x137;
//                                                                                        IkReal gconst7=((((2.77777777777778)*pz*x140))+(((-1.0)*x132*x139)));
//                                                                                        IkReal gconst8=((((-11.5740740740741)*x131*x139))+(((-1.0)*x140)));
//                                                                                        IkReal x144=pz*pz;
//                                                                                        j10eval[0]=((-1.0)+(((-7.71604938271605)*x144)));
//                                                                                        j10eval[1]=IKsign(((-81.0)+(((-625.0)*x144))));
                                                                                        if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                                bool j10valid[1]= {false};
//                                                                                                _nj10 = 1;
//                                                                                                IkReal x145=(gconst7*pz);
//                                                                                                CheckValue<IkReal> x146=IKPowWithIntegerCheck<IKFAST_REAL>(((1.08)+(((0.72)*gconst8))+(((-2.0)*x145))),-1);
                                                                                                if (false)//if(!x146.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x147=IKPowWithIntegerCheck<IKFAST_REAL>(((-27.0)+(((-18.0)*gconst8))+(((50.0)*x145))),-1);
                                                                                                if (false)//if(!x147.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                                if (false)//if( IKabs(((x146.value)*(((((-0.72)*gconst7))+(((3.0)*pz))+(((-0.48)*gconst7*gconst8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x147.value)*(((27.0)+(((-12.0)*(gconst7*gconst7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x146.value)*(((((-0.72)*gconst7))+(((3.0)*pz))+(((-0.48)*gconst7*gconst8))))))+IKsqr(((x147.value)*(((27.0)+(((-12.0)*(gconst7*gconst7)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j10array[0]=IKatan2(((x146.value)*(((((-0.72)*gconst7))+(((3.0)*pz))+(((-0.48)*gconst7*gconst8))))), ((x147.value)*(((27.0)+(((-12.0)*(gconst7*gconst7)))))));
//                                                                                                sj10array[0]=IKsin(j10array[0]);
//                                                                                                cj10array[0]=IKcos(j10array[0]);
                                                                                                if (false)//if( j10array[0] > IKPI )
                                                                                                {
//                                                                                                    j10array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j10array[0] < -IKPI )
                                                                                                {
//                                                                                                    j10array[0]+=IK2PI;
                                                                                                }
//                                                                                                j10valid[0] = true;
//                                                                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                                {
                                                                                                    if (false)//if( !j10valid[ij10] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij10[0] = ij10;
//                                                                                                    _ij10[1] = -1;
//                                                                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                    {
                                                                                                        if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j10valid[iij10]=false;
//                                                                                                            _ij10[1] = iij10;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j10 = j10array[ij10];
//                                                                                                    cj10 = cj10array[ij10];
//                                                                                                    sj10 = sj10array[ij10];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x148=IKsin(j10);
//                                                                                                        IkReal x149=IKcos(j10);
//                                                                                                        IkReal x150=((0.24)*gconst8);
//                                                                                                        IkReal x151=((0.24)*gconst7);
//                                                                                                        IkReal x152=((0.36)*x148);
//                                                                                                        IkReal x153=((0.36)*x149);
//                                                                                                        IkReal x154=(pz*x148);
//                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x150))+(((-1.0)*x153))+x154);
//                                                                                                        evalcond[1]=((((-1.0)*x151))+(((-1.0)*x152))+(((-1.0)*pz*x149)));
//                                                                                                        evalcond[2]=((-0.2016)+(((-0.2592)*x149))+(((0.72)*x154))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=(((x149*x151))+(((-1.0)*x152))+pz+(((-1.0)*x148*x150)));
//                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x153))+(((-1.0)*x148*x151))+(((-1.0)*x149*x150)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                        bool j9valid[1]= {false};
//                                                                                                        _nj9 = 1;
//                                                                                                        j9array[0]=0;
//                                                                                                        sj9array[0]=IKsin(j9array[0]);
//                                                                                                        cj9array[0]=IKcos(j9array[0]);
                                                                                                        if (false)//if( j9array[0] > IKPI )
                                                                                                        {
//                                                                                                            j9array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j9array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j9array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j9valid[0] = true;
//                                                                                                        for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                        {
                                                                                                            if (false)//if( !j9valid[ij9] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij9[0] = ij9;
//                                                                                                            _ij9[1] = -1;
//                                                                                                            for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                            {
                                                                                                                if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j9valid[iij9]=false;
//                                                                                                                    _ij9[1] = iij9;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j9 = j9array[ij9];
//                                                                                                            cj9 = cj9array[ij9];
//                                                                                                            sj9 = sj9array[ij9];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j9;
//                                                                                                                vinfos[0].indices[0] = _ij9[0];
//                                                                                                                vinfos[0].indices[1] = _ij9[1];
//                                                                                                                vinfos[0].maxsolutions = _nj9;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j10;
//                                                                                                                vinfos[1].indices[0] = _ij10[0];
//                                                                                                                vinfos[1].indices[1] = _ij10[1];
//                                                                                                                vinfos[1].maxsolutions = _nj10;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j11;
//                                                                                                                vinfos[2].indices[0] = _ij11[0];
//                                                                                                                vinfos[2].indices[1] = _ij11[1];
//                                                                                                                vinfos[2].maxsolutions = _nj11;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                                bool j10valid[1]= {false};
//                                                                                                _nj10 = 1;
//                                                                                                IkReal x155=((150.0)*pz);
//                                                                                                CheckValue<IkReal> x156=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                                                                if (false)//if(!x156.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x157 = IKatan2WithCheck(IkReal(((((54.0)*gconst7))+(((-1.0)*gconst8*x155))+(((-225.0)*pz)))),IkReal(((81.0)+(((54.0)*gconst8))+((gconst7*x155)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x157.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x156.value)))+(x157.value));
//                                                                                                sj10array[0]=IKsin(j10array[0]);
//                                                                                                cj10array[0]=IKcos(j10array[0]);
                                                                                                if (false)//if( j10array[0] > IKPI )
                                                                                                {
//                                                                                                    j10array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j10array[0] < -IKPI )
                                                                                                {
//                                                                                                    j10array[0]+=IK2PI;
                                                                                                }
//                                                                                                j10valid[0] = true;
//                                                                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                                {
                                                                                                    if (false)//if( !j10valid[ij10] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij10[0] = ij10;
//                                                                                                    _ij10[1] = -1;
//                                                                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                    {
                                                                                                        if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j10valid[iij10]=false;
//                                                                                                            _ij10[1] = iij10;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j10 = j10array[ij10];
//                                                                                                    cj10 = cj10array[ij10];
//                                                                                                    sj10 = sj10array[ij10];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x158=IKsin(j10);
//                                                                                                        IkReal x159=IKcos(j10);
//                                                                                                        IkReal x160=((0.24)*gconst8);
//                                                                                                        IkReal x161=((0.24)*gconst7);
//                                                                                                        IkReal x162=((0.36)*x158);
//                                                                                                        IkReal x163=((0.36)*x159);
//                                                                                                        IkReal x164=(pz*x158);
//                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x160))+(((-1.0)*x163))+x164);
//                                                                                                        evalcond[1]=((((-1.0)*x162))+(((-1.0)*x161))+(((-1.0)*pz*x159)));
//                                                                                                        evalcond[2]=((-0.2016)+(((-0.2592)*x159))+(((0.72)*x164))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((((-1.0)*x158*x160))+(((-1.0)*x162))+pz+((x159*x161)));
//                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x158*x161))+(((-1.0)*x163))+(((-1.0)*x159*x160)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                        bool j9valid[1]= {false};
//                                                                                                        _nj9 = 1;
//                                                                                                        j9array[0]=0;
//                                                                                                        sj9array[0]=IKsin(j9array[0]);
//                                                                                                        cj9array[0]=IKcos(j9array[0]);
                                                                                                        if (false)//if( j9array[0] > IKPI )
                                                                                                        {
//                                                                                                            j9array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j9array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j9array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j9valid[0] = true;
//                                                                                                        for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                        {
                                                                                                            if (false)//if( !j9valid[ij9] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij9[0] = ij9;
//                                                                                                            _ij9[1] = -1;
//                                                                                                            for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                            {
                                                                                                                if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j9valid[iij9]=false;
//                                                                                                                    _ij9[1] = iij9;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j9 = j9array[ij9];
//                                                                                                            cj9 = cj9array[ij9];
//                                                                                                            sj9 = sj9array[ij9];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j9;
//                                                                                                                vinfos[0].indices[0] = _ij9[0];
//                                                                                                                vinfos[0].indices[1] = _ij9[1];
//                                                                                                                vinfos[0].maxsolutions = _nj9;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j10;
//                                                                                                                vinfos[1].indices[0] = _ij10[0];
//                                                                                                                vinfos[1].indices[1] = _ij10[1];
//                                                                                                                vinfos[1].maxsolutions = _nj10;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j11;
//                                                                                                                vinfos[2].indices[0] = _ij11[0];
//                                                                                                                vinfos[2].indices[1] = _ij11[1];
//                                                                                                                vinfos[2].maxsolutions = _nj11;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if (false)//if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
//                                                                                    IkReal x165=pz*pz;
//                                                                                    IkReal x166=((4.16666666666667)*pz);
//                                                                                    IkReal x167=((1.0)+(((7.71604938271605)*x165)));
//                                                                                    IkReal x174 = x167;
                                                                                    if (false)//if(IKabs(x174)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x168=pow(x174,-0.5);
                                                                                    if (false)//if((x167) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x169=IKabs(IKsqrt(x167));
//                                                                                    CheckValue<IkReal> x175=IKPowWithIntegerCheck<IKFAST_REAL>(x169,-1);
                                                                                    if (false)//if(!x175.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x170=x175.value;
                                                                                    if (false)//if((((1.0)+(((-17.3611111111111)*x165*(x170*x170))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x171=IKsqrt(((1.0)+(((-17.3611111111111)*x165*(x170*x170)))));
//                                                                                    IkReal x172=(x168*x170);
//                                                                                    IkReal x173=(x168*x171);
                                                                                    if (false)//if( ((x166*x170)) < -1-IKFAST_SINCOS_THRESH || ((x166*x170)) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x176 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x176.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin((x166*x170)))))+(((-1.0)*(x176.value))));
//                                                                                    IkReal gconst10=((((-2.77777777777778)*pz*x173))+(((-1.0)*x166*x172)));
//                                                                                    IkReal gconst11=((((1.0)*x173))+(((-11.5740740740741)*x165*x172)));
                                                                                    if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x177=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                    if (false)//if(!x177.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (((4.16666666666667)*pz*(x177.value))) < -1-IKFAST_SINCOS_THRESH || (((4.16666666666667)*pz*(x177.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x178.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((4.16666666666667)*pz*(x177.value))))+j11+(x178.value))))), 6.28318530717959)));
                                                                                    if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
//                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j10eval[2];
//                                                                                            IkReal x179=pz*pz;
//                                                                                            IkReal x180=((4.16666666666667)*pz);
//                                                                                            IkReal x181=x167;
//                                                                                            IkReal x189 = x181;
                                                                                            if (false)//if(IKabs(x189)==0)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x182=pow(x189,-0.5);
                                                                                            if (false)//if((x181) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x183=IKabs(IKsqrt(x181));
//                                                                                            CheckValue<IkReal> x190=IKPowWithIntegerCheck<IKFAST_REAL>(x183,-1);
                                                                                            if (false)//if(!x190.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x184=x190.value;
                                                                                            if (false)//if((((1.0)+(((-17.3611111111111)*x179*(x184*x184))))) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x185=IKsqrt(((1.0)+(((-17.3611111111111)*x179*(x184*x184)))));
//                                                                                            IkReal x186=(x182*x184);
                                                                                            if (false)//if( ((x180*x184)) < -1-IKFAST_SINCOS_THRESH || ((x180*x184)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x191 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x191.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x187=((((1.0)*(IKasin((x180*x184)))))+(((1.0)*(x191.value))));
//                                                                                            IkReal x188=(x182*x185);
//                                                                                            px=0;
//                                                                                            py=0;
//                                                                                            pp=x179;
//                                                                                            sj11=gconst10;
//                                                                                            cj11=gconst11;
//                                                                                            j11=((3.14159265)+(((-1.0)*x187)));
//                                                                                            IkReal gconst9=((3.14159265358979)+(((-1.0)*x187)));
//                                                                                            IkReal gconst10=((((-2.77777777777778)*pz*x188))+(((-1.0)*x180*x186)));
//                                                                                            IkReal gconst11=((((-11.5740740740741)*x179*x186))+(((1.0)*x188)));
//                                                                                            IkReal x192=pz*pz;
//                                                                                            j10eval[0]=((-1.0)+(((-7.71604938271605)*x192)));
//                                                                                            j10eval[1]=IKsign(((-81.0)+(((-625.0)*x192))));
                                                                                            if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                                    bool j10valid[1]= {false};
//                                                                                                    _nj10 = 1;
//                                                                                                    IkReal x193=((225.0)*pz);
//                                                                                                    IkReal x194=((54.0)*gconst10);
//                                                                                                    IkReal x195=(x193+x194);
//                                                                                                    CheckValue<IkReal> x196 = IKatan2WithCheck(IkReal(((((36.0)*(gconst10*gconst10)))+(((-625.0)*(pz*pz))))),IkReal(((((36.0)*gconst10*gconst11))+x195)),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x196.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x197=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*gconst11*pz))+(((-1.0)*x195)))),-1);
                                                                                                    if (false)//if(!x197.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j10array[0]=((-1.5707963267949)+(x196.value)+(((1.5707963267949)*(x197.value))));
//                                                                                                    sj10array[0]=IKsin(j10array[0]);
//                                                                                                    cj10array[0]=IKcos(j10array[0]);
                                                                                                    if (false)//if( j10array[0] > IKPI )
                                                                                                    {
//                                                                                                        j10array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j10array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j10array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j10valid[0] = true;
//                                                                                                    for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                                    {
                                                                                                        if (false)//if( !j10valid[ij10] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij10[0] = ij10;
//                                                                                                        _ij10[1] = -1;
//                                                                                                        for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                        {
                                                                                                            if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j10valid[iij10]=false;
//                                                                                                                _ij10[1] = iij10;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j10 = j10array[ij10];
//                                                                                                        cj10 = cj10array[ij10];
//                                                                                                        sj10 = sj10array[ij10];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x198=IKsin(j10);
//                                                                                                            IkReal x199=IKcos(j10);
//                                                                                                            IkReal x200=((0.24)*gconst11);
//                                                                                                            IkReal x201=((0.24)*gconst10);
//                                                                                                            IkReal x202=((0.36)*x198);
//                                                                                                            IkReal x203=((0.36)*x199);
//                                                                                                            IkReal x204=(pz*x198);
//                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x200))+(((-1.0)*x203))+x204);
//                                                                                                            evalcond[1]=((((-1.0)*x201))+(((-1.0)*x202))+(((-1.0)*pz*x199)));
//                                                                                                            evalcond[2]=((-0.2016)+(((0.72)*x204))+(((-1.0)*(pz*pz)))+(((-0.2592)*x199)));
//                                                                                                            evalcond[3]=((((-1.0)*x202))+(((-1.0)*x198*x200))+pz+((x199*x201)));
//                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x203))+(((-1.0)*x198*x201))+(((-1.0)*x199*x200)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                            bool j9valid[1]= {false};
//                                                                                                            _nj9 = 1;
//                                                                                                            j9array[0]=0;
//                                                                                                            sj9array[0]=IKsin(j9array[0]);
//                                                                                                            cj9array[0]=IKcos(j9array[0]);
                                                                                                            if (false)//if( j9array[0] > IKPI )
                                                                                                            {
//                                                                                                                j9array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j9array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j9array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j9valid[0] = true;
//                                                                                                            for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                            {
                                                                                                                if (false)//if( !j9valid[ij9] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij9[0] = ij9;
//                                                                                                                _ij9[1] = -1;
//                                                                                                                for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                                {
                                                                                                                    if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j9valid[iij9]=false;
//                                                                                                                        _ij9[1] = iij9;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j9 = j9array[ij9];
//                                                                                                                cj9 = cj9array[ij9];
//                                                                                                                sj9 = sj9array[ij9];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j9;
//                                                                                                                    vinfos[0].indices[0] = _ij9[0];
//                                                                                                                    vinfos[0].indices[1] = _ij9[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj9;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j10;
//                                                                                                                    vinfos[1].indices[0] = _ij10[0];
//                                                                                                                    vinfos[1].indices[1] = _ij10[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj10;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j11;
//                                                                                                                    vinfos[2].indices[0] = _ij11[0];
//                                                                                                                    vinfos[2].indices[1] = _ij11[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj11;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                                    bool j10valid[1]= {false};
//                                                                                                    _nj10 = 1;
//                                                                                                    IkReal x205=((150.0)*pz);
//                                                                                                    CheckValue<IkReal> x206=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                                                                    if (false)//if(!x206.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x207 = IKatan2WithCheck(IkReal(((((54.0)*gconst10))+(((-225.0)*pz))+(((-1.0)*gconst11*x205)))),IkReal(((81.0)+(((54.0)*gconst11))+((gconst10*x205)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x207.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x206.value)))+(x207.value));
//                                                                                                    sj10array[0]=IKsin(j10array[0]);
//                                                                                                    cj10array[0]=IKcos(j10array[0]);
                                                                                                    if (false)//if( j10array[0] > IKPI )
                                                                                                    {
//                                                                                                        j10array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j10array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j10array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j10valid[0] = true;
//                                                                                                    for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                                    {
                                                                                                        if (false)//if( !j10valid[ij10] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij10[0] = ij10;
//                                                                                                        _ij10[1] = -1;
//                                                                                                        for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                        {
                                                                                                            if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j10valid[iij10]=false;
//                                                                                                                _ij10[1] = iij10;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j10 = j10array[ij10];
//                                                                                                        cj10 = cj10array[ij10];
//                                                                                                        sj10 = sj10array[ij10];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x208=IKsin(j10);
//                                                                                                            IkReal x209=IKcos(j10);
//                                                                                                            IkReal x210=((0.24)*gconst11);
//                                                                                                            IkReal x211=((0.24)*gconst10);
//                                                                                                            IkReal x212=((0.36)*x208);
//                                                                                                            IkReal x213=((0.36)*x209);
//                                                                                                            IkReal x214=(pz*x208);
//                                                                                                            evalcond[0]=((-0.36)+x214+(((-1.0)*x210))+(((-1.0)*x213)));
//                                                                                                            evalcond[1]=((((-1.0)*x212))+(((-1.0)*x211))+(((-1.0)*pz*x209)));
//                                                                                                            evalcond[2]=((-0.2016)+(((-0.2592)*x209))+(((0.72)*x214))+(((-1.0)*(pz*pz))));
//                                                                                                            evalcond[3]=(((x209*x211))+pz+(((-1.0)*x212))+(((-1.0)*x208*x210)));
//                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x213))+(((-1.0)*x208*x211))+(((-1.0)*x209*x210)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                            bool j9valid[1]= {false};
//                                                                                                            _nj9 = 1;
//                                                                                                            j9array[0]=0;
//                                                                                                            sj9array[0]=IKsin(j9array[0]);
//                                                                                                            cj9array[0]=IKcos(j9array[0]);
                                                                                                            if (false)//if( j9array[0] > IKPI )
                                                                                                            {
//                                                                                                                j9array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j9array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j9array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j9valid[0] = true;
//                                                                                                            for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                            {
                                                                                                                if (false)//if( !j9valid[ij9] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij9[0] = ij9;
//                                                                                                                _ij9[1] = -1;
//                                                                                                                for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                                {
                                                                                                                    if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j9valid[iij9]=false;
//                                                                                                                        _ij9[1] = iij9;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j9 = j9array[ij9];
//                                                                                                                cj9 = cj9array[ij9];
//                                                                                                                sj9 = sj9array[ij9];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j9;
//                                                                                                                    vinfos[0].indices[0] = _ij9[0];
//                                                                                                                    vinfos[0].indices[1] = _ij9[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj9;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j10;
//                                                                                                                    vinfos[1].indices[0] = _ij10[0];
//                                                                                                                    vinfos[1].indices[1] = _ij10[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj10;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j11;
//                                                                                                                    vinfos[2].indices[0] = _ij11[0];
//                                                                                                                    vinfos[2].indices[1] = _ij11[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj11;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if (false)//if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
//                                                                                            bgotonextstatement=false;
//                                                                                            continue; // branch miss [j9, j10]

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if( bgotonextstatement )
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                                    bool j10valid[1]= {false};
//                                                                    _nj10 = 1;
//                                                                    IkReal x215=(pz*sj11);
//                                                                    CheckValue<IkReal> x216=IKPowWithIntegerCheck<IKFAST_REAL>(((1.08)+(((-2.0)*x215))+(((0.72)*cj11))),-1);
                                                                    if (false)//if(!x216.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x217=IKPowWithIntegerCheck<IKFAST_REAL>(((-27.0)+(((50.0)*x215))+(((-18.0)*cj11))),-1);
                                                                    if (false)//if(!x217.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((x216.value)*(((((-0.72)*sj11))+(((3.0)*pz))+(((-0.48)*cj11*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x217.value)*(((15.0)+(((12.0)*(cj11*cj11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x216.value)*(((((-0.72)*sj11))+(((3.0)*pz))+(((-0.48)*cj11*sj11))))))+IKsqr(((x217.value)*(((15.0)+(((12.0)*(cj11*cj11)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j10array[0]=IKatan2(((x216.value)*(((((-0.72)*sj11))+(((3.0)*pz))+(((-0.48)*cj11*sj11))))), ((x217.value)*(((15.0)+(((12.0)*(cj11*cj11)))))));
//                                                                    sj10array[0]=IKsin(j10array[0]);
//                                                                    cj10array[0]=IKcos(j10array[0]);
                                                                    if (false)//if( j10array[0] > IKPI )
                                                                    {
//                                                                        j10array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j10array[0] < -IKPI )
                                                                    {
//                                                                        j10array[0]+=IK2PI;
                                                                    }
//                                                                    j10valid[0] = true;
//                                                                    for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                    {
                                                                        if (false)//if( !j10valid[ij10] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij10[0] = ij10;
//                                                                        _ij10[1] = -1;
//                                                                        for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                        {
                                                                            if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j10valid[iij10]=false;
//                                                                                _ij10[1] = iij10;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j10 = j10array[ij10];
//                                                                        cj10 = cj10array[ij10];
//                                                                        sj10 = sj10array[ij10];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x218=IKsin(j10);
//                                                                            IkReal x219=IKcos(j10);
//                                                                            IkReal x220=((0.24)*sj11);
//                                                                            IkReal x221=((0.24)*cj11);
//                                                                            IkReal x222=((0.36)*x218);
//                                                                            IkReal x223=((0.36)*x219);
//                                                                            IkReal x224=((0.24)*x218);
//                                                                            IkReal x225=(pz*x218);
//                                                                            evalcond[0]=((-0.36)+x225+(((-1.0)*x223))+(((-1.0)*x221)));
//                                                                            evalcond[1]=((((-1.0)*pz*x219))+(((-1.0)*x220))+(((-1.0)*x222)));
//                                                                            evalcond[2]=((-0.2016)+(((-0.2592)*x219))+(((0.72)*x225))+(((-1.0)*(pz*pz))));
//                                                                            evalcond[3]=(((x219*x220))+pz+(((-1.0)*x218*x221))+(((-1.0)*x222)));
//                                                                            evalcond[4]=((-0.36)+(((-1.0)*x219*x221))+(((-1.0)*x218*x220))+(((-1.0)*x223)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                            bool j9valid[1]= {false};
//                                                                            _nj9 = 1;
//                                                                            j9array[0]=0;
//                                                                            sj9array[0]=IKsin(j9array[0]);
//                                                                            cj9array[0]=IKcos(j9array[0]);
                                                                            if (false)//if( j9array[0] > IKPI )
                                                                            {
//                                                                                j9array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j9array[0] < -IKPI )
                                                                            {
//                                                                                j9array[0]+=IK2PI;
                                                                            }
//                                                                            j9valid[0] = true;
//                                                                            for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                            {
                                                                                if (false)//if( !j9valid[ij9] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij9[0] = ij9;
//                                                                                _ij9[1] = -1;
//                                                                                for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                {
                                                                                    if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j9valid[iij9]=false;
//                                                                                        _ij9[1] = iij9;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j9 = j9array[ij9];
//                                                                                cj9 = cj9array[ij9];
//                                                                                sj9 = sj9array[ij9];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j9;
//                                                                                    vinfos[0].indices[0] = _ij9[0];
//                                                                                    vinfos[0].indices[1] = _ij9[1];
//                                                                                    vinfos[0].maxsolutions = _nj9;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j10;
//                                                                                    vinfos[1].indices[0] = _ij10[0];
//                                                                                    vinfos[1].indices[1] = _ij10[1];
//                                                                                    vinfos[1].maxsolutions = _nj10;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j11;
//                                                                                    vinfos[2].indices[0] = _ij11[0];
//                                                                                    vinfos[2].indices[1] = _ij11[1];
//                                                                                    vinfos[2].maxsolutions = _nj11;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                                            bool j10valid[1]= {false};
//                                                            _nj10 = 1;
//                                                            IkReal x226=((225.0)*pz);
//                                                            IkReal x227=((54.0)*sj11);
//                                                            IkReal x228=(x227+x226);
//                                                            CheckValue<IkReal> x229=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*cj11*pz))+(((-1.0)*x228)))),-1);
                                                            if (false)//if(!x229.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            CheckValue<IkReal> x230 = IKatan2WithCheck(IkReal(((36.0)+(((-36.0)*(cj11*cj11)))+(((-625.0)*(pz*pz))))),IkReal((x228+(((36.0)*cj11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
                                                            if (false)//if(!x230.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x229.value)))+(x230.value));
//                                                            sj10array[0]=IKsin(j10array[0]);
//                                                            cj10array[0]=IKcos(j10array[0]);
                                                            if (false)//if( j10array[0] > IKPI )
                                                            {
//                                                                j10array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j10array[0] < -IKPI )
                                                            {
//                                                                j10array[0]+=IK2PI;
                                                            }
//                                                            j10valid[0] = true;
//                                                            for(int ij10 = 0; ij10 < 1; ++ij10)
                                                            {
                                                                if (false)//if( !j10valid[ij10] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij10[0] = ij10;
//                                                                _ij10[1] = -1;
//                                                                for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                {
                                                                    if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j10valid[iij10]=false;
//                                                                        _ij10[1] = iij10;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j10 = j10array[ij10];
//                                                                cj10 = cj10array[ij10];
//                                                                sj10 = sj10array[ij10];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x231=IKsin(j10);
//                                                                    IkReal x232=IKcos(j10);
//                                                                    IkReal x233=((0.24)*sj11);
//                                                                    IkReal x234=((0.24)*cj11);
//                                                                    IkReal x235=((0.36)*x231);
//                                                                    IkReal x236=((0.36)*x232);
//                                                                    IkReal x237=((0.24)*x231);
//                                                                    IkReal x238=(pz*x231);
//                                                                    evalcond[0]=((-0.36)+(((-1.0)*x234))+(((-1.0)*x236))+x238);
//                                                                    evalcond[1]=((((-1.0)*x233))+(((-1.0)*x235))+(((-1.0)*pz*x232)));
//                                                                    evalcond[2]=((-0.2016)+(((0.72)*x238))+(((-0.2592)*x232))+(((-1.0)*(pz*pz))));
//                                                                    evalcond[3]=(((x232*x233))+(((-1.0)*x235))+pz+(((-1.0)*x231*x234)));
//                                                                    evalcond[4]=((-0.36)+(((-1.0)*x236))+(((-1.0)*x231*x233))+(((-1.0)*x232*x234)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                    bool j9valid[1]= {false};
//                                                                    _nj9 = 1;
//                                                                    j9array[0]=0;
//                                                                    sj9array[0]=IKsin(j9array[0]);
//                                                                    cj9array[0]=IKcos(j9array[0]);
                                                                    if (false)//if( j9array[0] > IKPI )
                                                                    {
//                                                                        j9array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j9array[0] < -IKPI )
                                                                    {
//                                                                        j9array[0]+=IK2PI;
                                                                    }
//                                                                    j9valid[0] = true;
//                                                                    for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                    {
                                                                        if (false)//if( !j9valid[ij9] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij9[0] = ij9;
//                                                                        _ij9[1] = -1;
//                                                                        for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                        {
                                                                            if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j9valid[iij9]=false;
//                                                                                _ij9[1] = iij9;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j9 = j9array[ij9];
//                                                                        cj9 = cj9array[ij9];
//                                                                        sj9 = sj9array[ij9];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j9;
//                                                                            vinfos[0].indices[0] = _ij9[0];
//                                                                            vinfos[0].indices[1] = _ij9[1];
//                                                                            vinfos[0].maxsolutions = _nj9;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j10;
//                                                                            vinfos[1].indices[0] = _ij10[0];
//                                                                            vinfos[1].indices[1] = _ij10[1];
//                                                                            vinfos[1].maxsolutions = _nj10;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j11;
//                                                                            vinfos[2].indices[0] = _ij11[0];
//                                                                            vinfos[2].indices[1] = _ij11[1];
//                                                                            vinfos[2].maxsolutions = _nj11;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                    bool j10valid[1]= {false};
//                                                    _nj10 = 1;
//                                                    IkReal x239=((150.0)*pz);
//                                                    CheckValue<IkReal> x240=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-81.0)+(((-625.0)*(pz*pz))))),-1);
                                                    if (false)//if(!x240.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    CheckValue<IkReal> x241 = IKatan2WithCheck(IkReal(((((54.0)*sj11))+(((-225.0)*pz))+(((-1.0)*cj11*x239)))),IkReal(((81.0)+(((54.0)*cj11))+((sj11*x239)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if (false)//if(!x241.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x240.value)))+(x241.value));
//                                                    sj10array[0]=IKsin(j10array[0]);
//                                                    cj10array[0]=IKcos(j10array[0]);
                                                    if (false)//if( j10array[0] > IKPI )
                                                    {
//                                                        j10array[0]-=IK2PI;
                                                    }
                                                    else if (false)//else if( j10array[0] < -IKPI )
                                                    {
//                                                        j10array[0]+=IK2PI;
                                                    }
//                                                    j10valid[0] = true;
//                                                    for(int ij10 = 0; ij10 < 1; ++ij10)
                                                    {
                                                        if (false)//if( !j10valid[ij10] )
                                                        {
//                                                            continue;
                                                        }
//                                                        _ij10[0] = ij10;
//                                                        _ij10[1] = -1;
//                                                        for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                        {
                                                            if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                            {
//                                                                j10valid[iij10]=false;
//                                                                _ij10[1] = iij10;
//                                                                break;
                                                            }
                                                        }
//                                                        j10 = j10array[ij10];
//                                                        cj10 = cj10array[ij10];
//                                                        sj10 = sj10array[ij10];
                                                        {
                                                            IkReal evalcond[5];
//                                                            IkReal x242=IKsin(j10);
//                                                            IkReal x243=IKcos(j10);
//                                                            IkReal x244=((0.24)*sj11);
//                                                            IkReal x245=((0.24)*cj11);
//                                                            IkReal x246=((0.36)*x242);
//                                                            IkReal x247=((0.36)*x243);
//                                                            IkReal x248=((0.24)*x242);
//                                                            IkReal x249=(pz*x242);
//                                                            evalcond[0]=((-0.36)+x249+(((-1.0)*x245))+(((-1.0)*x247)));
//                                                            evalcond[1]=((((-1.0)*pz*x243))+(((-1.0)*x244))+(((-1.0)*x246)));
//                                                            evalcond[2]=((-0.2016)+(((-1.0)*(pz*pz)))+(((-0.2592)*x243))+(((0.72)*x249)));
//                                                            evalcond[3]=((((-1.0)*x242*x245))+pz+(((-1.0)*x246))+((x243*x244)));
//                                                            evalcond[4]=((-0.36)+(((-1.0)*x242*x244))+(((-1.0)*x243*x245))+(((-1.0)*x247)));
                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
//                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                            bool j9valid[1]= {false};
//                                                            _nj9 = 1;
//                                                            j9array[0]=0;
//                                                            sj9array[0]=IKsin(j9array[0]);
//                                                            cj9array[0]=IKcos(j9array[0]);
                                                            if (false)//if( j9array[0] > IKPI )
                                                            {
//                                                                j9array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j9array[0] < -IKPI )
                                                            {
//                                                                j9array[0]+=IK2PI;
                                                            }
//                                                            j9valid[0] = true;
//                                                            for(int ij9 = 0; ij9 < 1; ++ij9)
                                                            {
                                                                if (false)//if( !j9valid[ij9] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij9[0] = ij9;
//                                                                _ij9[1] = -1;
//                                                                for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                {
                                                                    if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j9valid[iij9]=false;
//                                                                        _ij9[1] = iij9;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j9 = j9array[ij9];
//                                                                cj9 = cj9array[ij9];
//                                                                sj9 = sj9array[ij9];

                                                                {
//                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                    vinfos[0].jointtype = 1;
//                                                                    vinfos[0].foffset = j9;
//                                                                    vinfos[0].indices[0] = _ij9[0];
//                                                                    vinfos[0].indices[1] = _ij9[1];
//                                                                    vinfos[0].maxsolutions = _nj9;
//                                                                    vinfos[1].jointtype = 1;
//                                                                    vinfos[1].foffset = j10;
//                                                                    vinfos[1].indices[0] = _ij10[0];
//                                                                    vinfos[1].indices[1] = _ij10[1];
//                                                                    vinfos[1].maxsolutions = _nj10;
//                                                                    vinfos[2].jointtype = 1;
//                                                                    vinfos[2].foffset = j11;
//                                                                    vinfos[2].indices[0] = _ij11[0];
//                                                                    vinfos[2].indices[1] = _ij11[1];
//                                                                    vinfos[2].maxsolutions = _nj11;
//                                                                    int vfree[0];
//                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if (false)//if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
//                                    bgotonextstatement=false;
//                                    continue; // branch miss [j9, j10, j11]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j9array[2], cj9array[2], sj9array[2];
                        bool j9valid[2]= {false};
                        _nj9 = 2;
                        CheckValue<IkReal> x251 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x251.valid)
                        {
//                            continue;
                        }
                        IkReal x250=x251.value;
                        j9array[0]=((-1.0)*x250);
                        sj9array[0]=IKsin(j9array[0]);
                        cj9array[0]=IKcos(j9array[0]);
                        j9array[1]=((3.14159265358979)+(((-1.0)*x250)));
                        sj9array[1]=IKsin(j9array[1]);
                        cj9array[1]=IKcos(j9array[1]);
                        if( j9array[0] > IKPI )
                        {
//                            j9array[0]-=IK2PI;
                        }
                        else if( j9array[0] < -IKPI )
                        {
//                            j9array[0]+=IK2PI;
                        }
                        j9valid[0] = true;
                        if( j9array[1] > IKPI )
                        {
                            j9array[1]-=IK2PI;
                        }
                        else if( j9array[1] < -IKPI )
                        {
//                            j9array[1]+=IK2PI;
                        }
                        j9valid[1] = true;
                        for(int ij9 = 0; ij9 < 2; ++ij9)
                        {
                            if( !j9valid[ij9] )
                            {
//                                continue;
                            }
                            _ij9[0] = ij9;
                            _ij9[1] = -1;
                            for(int iij9 = ij9+1; iij9 < 2; ++iij9)
                            {
                                if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                {
//                                    j9valid[iij9]=false;
//                                    _ij9[1] = iij9;
//                                    break;
                                }
                            }
                            j9 = j9array[ij9];
                            cj9 = cj9array[ij9];
                            sj9 = sj9array[ij9];

                            {
                                IkReal j11array[2], cj11array[2], sj11array[2];
                                bool j11valid[2]= {false};
                                _nj11 = 2;
                                cj11array[0]=((-0.333333333333333)+(((-4.16666666666667)*px*sj9))+(((5.78703703703704)*(py*py)))+(((5.78703703703704)*(pz*pz)))+(((5.78703703703704)*(px*px)))+(((4.16666666666667)*cj9*py)));
                                if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j11valid[0] = j11valid[1] = true;
                                    j11array[0] = IKacos(cj11array[0]);
                                    sj11array[0] = IKsin(j11array[0]);
                                    cj11array[1] = cj11array[0];
                                    j11array[1] = -j11array[0];
                                    sj11array[1] = -sj11array[0];
                                }
                                else if( isnan(cj11array[0]) )
                                {
                                    // probably any value will work
//                                    j11valid[0] = true;
//                                    cj11array[0] = 1;
//                                    sj11array[0] = 0;
//                                    j11array[0] = 0;
                                }
                                for(int ij11 = 0; ij11 < 2; ++ij11)
                                {
                                    if( !j11valid[ij11] )
                                    {
                                        continue;
                                    }
                                    _ij11[0] = ij11;
                                    _ij11[1] = -1;
                                    for(int iij11 = ij11+1; iij11 < 2; ++iij11)
                                    {
                                        if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j11valid[iij11]=false;
//                                            _ij11[1] = iij11;
//                                            break;
                                        }
                                    }
                                    j11 = j11array[ij11];
                                    cj11 = cj11array[ij11];
                                    sj11 = sj11array[ij11];

                                    {
                                        IkReal j10eval[3];
                                        IkReal x252=((150.0)*sj11);
                                        IkReal x253=(cj9*py);
                                        IkReal x254=(px*sj9);
                                        IkReal x255=((150.0)*cj11);
                                        j10eval[0]=((1.08333333333333)+cj11);
                                        j10eval[1]=((IKabs(((((-1.0)*x252*x253))+(((225.0)*pz))+((pz*x255))+(((-54.0)*sj11))+((x252*x254)))))+(IKabs(((-81.0)+(((225.0)*x254))+(((-225.0)*x253))+(((-1.0)*pz*x252))+((x254*x255))+(((-1.0)*x253*x255))+(((-54.0)*cj11))))));
                                        j10eval[2]=IKsign(((117.0)+(((108.0)*cj11))));
                                        if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j10eval[3];
//                                                IkReal x256=((6.0)*cj11);
//                                                IkReal x257=(px*sj9);
//                                                IkReal x258=(pz*sj11);
//                                                IkReal x259=(cj9*py);
//                                                IkReal x260=((25.0)*pz);
//                                                IkReal x261=((2.77777777777778)*cj11);
//                                                j10eval[0]=((1.5)+((x259*x261))+(((-4.16666666666667)*x257))+(((4.16666666666667)*x259))+cj11+(((-2.77777777777778)*x258))+(((-1.0)*x257*x261)));
//                                                j10eval[1]=((IKabs((((x259*x260))+(((9.0)*pz))+(((-2.16)*sj11))+(((-1.0)*x257*x260))+(((-1.44)*cj11*sj11)))))+(IKabs(((-3.24)+((pz*x260))+(((-4.32)*cj11))+(((-1.44)*(cj11*cj11)))))));
//                                                j10eval[2]=IKsign(((3.24)+(((2.16)*cj11))+(((-1.0)*x256*x257))+((x256*x259))+(((-9.0)*x257))+(((9.0)*x259))+(((-6.0)*x258))));
                                                if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j10eval[3];
//                                                        IkReal x262=cj9*cj9;
//                                                        IkReal x263=px*px;
//                                                        IkReal x264=pz*pz;
//                                                        IkReal x265=py*py;
//                                                        IkReal x266=((6.0)*pz);
//                                                        IkReal x267=(px*sj9);
//                                                        IkReal x268=(cj9*py);
//                                                        IkReal x269=((6.0)*cj11);
//                                                        IkReal x270=((6.0)*sj11);
//                                                        IkReal x271=((7.71604938271605)*x262);
//                                                        IkReal x272=((25.0)*x262);
//                                                        j10eval[0]=((1.0)+(((7.71604938271605)*x263))+(((7.71604938271605)*x264))+(((-1.0)*x263*x271))+(((-15.4320987654321)*x267*x268))+(((5.55555555555556)*x268))+((x265*x271))+(((-5.55555555555556)*x267)));
//                                                        j10eval[1]=IKsign(((3.24)+(((18.0)*x268))+(((-1.0)*x263*x272))+(((-50.0)*x267*x268))+(((-18.0)*x267))+(((25.0)*x263))+(((25.0)*x264))+((x265*x272))));
//                                                        j10eval[2]=((IKabs(((-3.24)+(((-2.16)*cj11))+((x267*x269))+(((-9.0)*x268))+(((9.0)*x267))+(((-1.0)*x268*x269))+(((-1.0)*sj11*x266)))))+(IKabs(((((9.0)*pz))+(((-2.16)*sj11))+((cj11*x266))+(((-1.0)*x268*x270))+((x267*x270))))));
                                                        if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j10]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                                bool j10valid[1]= {false};
//                                                                _nj10 = 1;
//                                                                IkReal x273=cj9*cj9;
//                                                                IkReal x274=px*px;
//                                                                IkReal x275=(px*sj9);
//                                                                IkReal x276=((6.0)*cj11);
//                                                                IkReal x277=(cj9*py);
//                                                                IkReal x278=((6.0)*sj11);
//                                                                IkReal x279=((25.0)*x274);
//                                                                CheckValue<IkReal> x280 = IKatan2WithCheck(IkReal((((x275*x278))+(((-1.0)*x277*x278))+(((9.0)*pz))+(((-2.16)*sj11))+((pz*x276)))),IkReal(((-3.24)+(((-2.16)*cj11))+(((-1.0)*pz*x278))+((x275*x276))+(((9.0)*x275))+(((-9.0)*x277))+(((-1.0)*x276*x277)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x280.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x281=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((3.24)+(((25.0)*(pz*pz)))+(((25.0)*x273*(py*py)))+(((-1.0)*x273*x279))+(((18.0)*x277))+x279+(((-18.0)*x275))+(((-50.0)*x275*x277)))),-1);
                                                                if (false)//if(!x281.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j10array[0]=((-1.5707963267949)+(x280.value)+(((1.5707963267949)*(x281.value))));
//                                                                sj10array[0]=IKsin(j10array[0]);
//                                                                cj10array[0]=IKcos(j10array[0]);
                                                                if (false)//if( j10array[0] > IKPI )
                                                                {
//                                                                    j10array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j10array[0] < -IKPI )
                                                                {
//                                                                    j10array[0]+=IK2PI;
                                                                }
//                                                                j10valid[0] = true;
//                                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                {
                                                                    if (false)//if( !j10valid[ij10] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij10[0] = ij10;
//                                                                    _ij10[1] = -1;
//                                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                    {
                                                                        if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j10valid[iij10]=false;
//                                                                            _ij10[1] = iij10;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j10 = j10array[ij10];
//                                                                    cj10 = cj10array[ij10];
//                                                                    sj10 = sj10array[ij10];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x282=IKsin(j10);
//                                                                        IkReal x283=IKcos(j10);
//                                                                        IkReal x284=((0.24)*cj11);
//                                                                        IkReal x285=((0.24)*sj11);
//                                                                        IkReal x286=(px*sj9);
//                                                                        IkReal x287=(cj9*py);
//                                                                        IkReal x288=((0.36)*x283);
//                                                                        IkReal x289=((0.36)*x282);
//                                                                        IkReal x290=(pz*x282);
//                                                                        IkReal x291=((1.0)*x283);
//                                                                        IkReal x292=((0.72)*x283);
//                                                                        evalcond[0]=((((-1.0)*x282*x284))+pz+(((-1.0)*x289))+((x283*x285)));
//                                                                        evalcond[1]=((-0.36)+x286+(((-1.0)*x282*x285))+(((-1.0)*x287))+(((-1.0)*x288))+(((-1.0)*x283*x284)));
//                                                                        evalcond[2]=((-0.36)+x290+(((-1.0)*x287*x291))+(((-1.0)*x284))+(((-1.0)*x288))+((x283*x286)));
//                                                                        evalcond[3]=((((-1.0)*x282*x287))+(((-1.0)*pz*x291))+(((-1.0)*x285))+(((-1.0)*x289))+((x282*x286)));
//                                                                        evalcond[4]=((-0.2016)+(((-0.2592)*x283))+(((0.72)*x290))+(((-1.0)*(px*px)))+(((-0.72)*x287))+(((0.72)*x286))+((x286*x292))+(((-1.0)*(pz*pz)))+(((-1.0)*x287*x292))+(((-1.0)*(py*py))));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j9;
//                                                                        vinfos[0].indices[0] = _ij9[0];
//                                                                        vinfos[0].indices[1] = _ij9[1];
//                                                                        vinfos[0].maxsolutions = _nj9;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j10;
//                                                                        vinfos[1].indices[0] = _ij10[0];
//                                                                        vinfos[1].indices[1] = _ij10[1];
//                                                                        vinfos[1].maxsolutions = _nj10;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j11;
//                                                                        vinfos[2].indices[0] = _ij11[0];
//                                                                        vinfos[2].indices[1] = _ij11[1];
//                                                                        vinfos[2].maxsolutions = _nj11;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                                        bool j10valid[1]= {false};
//                                                        _nj10 = 1;
//                                                        IkReal x293=((6.0)*cj11);
//                                                        IkReal x294=(cj9*py);
//                                                        IkReal x295=(px*sj9);
//                                                        IkReal x296=((25.0)*pz);
//                                                        CheckValue<IkReal> x297=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((3.24)+(((-9.0)*x295))+(((9.0)*x294))+(((2.16)*cj11))+(((-6.0)*pz*sj11))+(((-1.0)*x293*x295))+((x293*x294)))),-1);
                                                        if (false)//if(!x297.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x298 = IKatan2WithCheck(IkReal(((((9.0)*pz))+(((-2.16)*sj11))+(((-1.0)*x295*x296))+((x294*x296))+(((-1.44)*cj11*sj11)))),IkReal(((-3.24)+((pz*x296))+(((-4.32)*cj11))+(((-1.44)*(cj11*cj11))))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x298.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x297.value)))+(x298.value));
//                                                        sj10array[0]=IKsin(j10array[0]);
//                                                        cj10array[0]=IKcos(j10array[0]);
                                                        if (false)//if( j10array[0] > IKPI )
                                                        {
//                                                            j10array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j10array[0] < -IKPI )
                                                        {
//                                                            j10array[0]+=IK2PI;
                                                        }
//                                                        j10valid[0] = true;
//                                                        for(int ij10 = 0; ij10 < 1; ++ij10)
                                                        {
                                                            if (false)//if( !j10valid[ij10] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij10[0] = ij10;
//                                                            _ij10[1] = -1;
//                                                            for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                            {
                                                                if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j10valid[iij10]=false;
//                                                                    _ij10[1] = iij10;
//                                                                    break;
                                                                }
                                                            }
//                                                            j10 = j10array[ij10];
//                                                            cj10 = cj10array[ij10];
//                                                            sj10 = sj10array[ij10];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x299=IKsin(j10);
//                                                                IkReal x300=IKcos(j10);
//                                                                IkReal x301=((0.24)*cj11);
//                                                                IkReal x302=((0.24)*sj11);
//                                                                IkReal x303=(px*sj9);
//                                                                IkReal x304=(cj9*py);
//                                                                IkReal x305=((0.36)*x300);
//                                                                IkReal x306=((0.36)*x299);
//                                                                IkReal x307=(pz*x299);
//                                                                IkReal x308=((1.0)*x300);
//                                                                IkReal x309=((0.72)*x300);
//                                                                evalcond[0]=(pz+(((-1.0)*x299*x301))+((x300*x302))+(((-1.0)*x306)));
//                                                                evalcond[1]=((-0.36)+(((-1.0)*x304))+x303+(((-1.0)*x299*x302))+(((-1.0)*x300*x301))+(((-1.0)*x305)));
//                                                                evalcond[2]=((-0.36)+x307+(((-1.0)*x304*x308))+((x300*x303))+(((-1.0)*x301))+(((-1.0)*x305)));
//                                                                evalcond[3]=(((x299*x303))+(((-1.0)*x299*x304))+(((-1.0)*pz*x308))+(((-1.0)*x306))+(((-1.0)*x302)));
//                                                                evalcond[4]=((-0.2016)+(((0.72)*x303))+(((0.72)*x307))+(((-1.0)*(px*px)))+((x303*x309))+(((-0.2592)*x300))+(((-1.0)*(pz*pz)))+(((-1.0)*x304*x309))+(((-1.0)*(py*py)))+(((-0.72)*x304)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j9;
//                                                                vinfos[0].indices[0] = _ij9[0];
//                                                                vinfos[0].indices[1] = _ij9[1];
//                                                                vinfos[0].maxsolutions = _nj9;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j10;
//                                                                vinfos[1].indices[0] = _ij10[0];
//                                                                vinfos[1].indices[1] = _ij10[1];
//                                                                vinfos[1].maxsolutions = _nj10;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j11;
//                                                                vinfos[2].indices[0] = _ij11[0];
//                                                                vinfos[2].indices[1] = _ij11[1];
//                                                                vinfos[2].maxsolutions = _nj11;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                bool j10valid[1]= {false};
                                                _nj10 = 1;
                                                IkReal x310=((150.0)*sj11);
                                                IkReal x311=(cj9*py);
                                                IkReal x312=(px*sj9);
                                                IkReal x313=((150.0)*cj11);
                                                CheckValue<IkReal> x314=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((117.0)+(((108.0)*cj11)))),-1);
                                                if(!x314.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x315 = IKatan2WithCheck(IkReal((((x310*x312))+(((225.0)*pz))+(((-1.0)*x310*x311))+(((-54.0)*sj11))+((pz*x313)))),IkReal(((-81.0)+(((-225.0)*x311))+((x312*x313))+(((-1.0)*pz*x310))+(((225.0)*x312))+(((-54.0)*cj11))+(((-1.0)*x311*x313)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x315.valid)
                                                {
//                                                    continue;
                                                }
                                                j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x314.value)))+(x315.value));
                                                sj10array[0]=IKsin(j10array[0]);
                                                cj10array[0]=IKcos(j10array[0]);
                                                if( j10array[0] > IKPI )
                                                {
//                                                    j10array[0]-=IK2PI;
                                                }
                                                else if( j10array[0] < -IKPI )
                                                {
//                                                    j10array[0]+=IK2PI;
                                                }
                                                j10valid[0] = true;
                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                {
                                                    if( !j10valid[ij10] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij10[0] = ij10;
                                                    _ij10[1] = -1;
                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                    {
                                                        if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j10valid[iij10]=false;
//                                                            _ij10[1] = iij10;
//                                                            break;
                                                        }
                                                    }
                                                    j10 = j10array[ij10];
                                                    cj10 = cj10array[ij10];
                                                    sj10 = sj10array[ij10];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x316=IKsin(j10);
                                                        IkReal x317=IKcos(j10);
                                                        IkReal x318=((0.24)*cj11);
                                                        IkReal x319=((0.24)*sj11);
                                                        IkReal x320=(px*sj9);
                                                        IkReal x321=(cj9*py);
                                                        IkReal x322=((0.36)*x317);
                                                        IkReal x323=((0.36)*x316);
                                                        IkReal x324=(pz*x316);
                                                        IkReal x325=((1.0)*x317);
                                                        IkReal x326=((0.72)*x317);
                                                        evalcond[0]=(((x317*x319))+(((-1.0)*x323))+pz+(((-1.0)*x316*x318)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x322))+(((-1.0)*x321))+x320+(((-1.0)*x317*x318))+(((-1.0)*x316*x319)));
                                                        evalcond[2]=((-0.36)+(((-1.0)*x321*x325))+(((-1.0)*x322))+x324+(((-1.0)*x318))+((x317*x320)));
                                                        evalcond[3]=((((-1.0)*x323))+(((-1.0)*x319))+((x316*x320))+(((-1.0)*x316*x321))+(((-1.0)*pz*x325)));
                                                        evalcond[4]=((-0.2016)+(((0.72)*x320))+(((0.72)*x324))+(((-1.0)*(px*px)))+(((-1.0)*x321*x326))+((x320*x326))+(((-0.2592)*x317))+(((-0.72)*x321))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j9;
                                                        vinfos[0].indices[0] = _ij9[0];
                                                        vinfos[0].indices[1] = _ij9[1];
                                                        vinfos[0].maxsolutions = _nj9;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j10;
                                                        vinfos[1].indices[0] = _ij10[0];
                                                        vinfos[1].indices[1] = _ij10[1];
                                                        vinfos[1].maxsolutions = _nj10;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j11;
                                                        vinfos[2].indices[0] = _ij11[0];
                                                        vinfos[2].indices[1] = _ij11[1];
                                                        vinfos[2].maxsolutions = _nj11;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Hunker (478e384d3e70b2b7bae27b584cda0040)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
