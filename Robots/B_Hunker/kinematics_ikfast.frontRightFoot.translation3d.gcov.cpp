#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL float
#define IKFAST_NAMESPACE kinematics_ikfast_frontRightFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-20 01:59:54.734873
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return float(-IKPI_2);
    }
    else if (false)//else if( f >= 1 )
    {
//        return float(IKPI_2);
    }
//    return asinf(f);
}
inline double IKasin(double f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if (false)//else if( f >= 1 )
    {
//        return IKPI_2;
    }
//    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return float(IKPI);
    }
    else if( f >= 1 )
    {
//        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if (false)//if( f <= 0.0f )
    {
//        return 0.0f;
    }
//    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if (false)//if( f <= 0.0 )
    {
//        return 0.0;
    }
//    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[1]);
    x1=IKsin(j[0]);
    x2=IKcos(j[2]);
    x3=IKcos(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x3);
    x8=((0.33)*x2);
    x9=(x0*x1);
    eetrans[0]=(((x1*x4*x6))+((x8*x9))+(((0.36)*x1))+(((0.36)*x9)));
    IkReal x10=((1.0)*x7);
    IkReal x11=((1.0)*x3);
    eetrans[1]=((-0.36)+(((-1.0)*x11*x4*x6))+(((-1.0)*x10))+(((-1.0)*x0*x10))+(((-1.0)*x0*x11*x8)));
    eetrans[2]=((0.15)+(((-1.0)*x0*x6))+((x4*x8))+(((0.36)*x4)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j9=numeric_limits<IkReal>::quiet_NaN();
        _ij9[0] = -1;
        _ij9[1] = -1;
        _nj9 = -1;
        j10=numeric_limits<IkReal>::quiet_NaN();
        _ij10[0] = -1;
        _ij10[1] = -1;
        _nj10 = -1;
        j11=numeric_limits<IkReal>::quiet_NaN();
        _ij11[0] = -1;
        _ij11[1] = -1;
        _nj11 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=px;
            new_py=((0.36)+py);
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j9eval[1];
                j9eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j9eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
//                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
//                                bgotonextstatement=false;
                                {
                                    IkReal j11array[2], cj11array[2], sj11array[2];
                                    bool j11valid[2]= {false};
//                                    _nj11 = 2;
//                                    cj11array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz))));
                                    if (false)//if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
//                                        j11valid[0] = j11valid[1] = true;
//                                        j11array[0] = IKacos(cj11array[0]);
//                                        sj11array[0] = IKsin(j11array[0]);
//                                        cj11array[1] = cj11array[0];
//                                        j11array[1] = -j11array[0];
//                                        sj11array[1] = -sj11array[0];
                                    }
                                    else if (false)//else if( isnan(cj11array[0]) )
                                    {
                                        // probably any value will work
//                                        j11valid[0] = true;
//                                        cj11array[0] = 1;
//                                        sj11array[0] = 0;
//                                        j11array[0] = 0;
                                    }
//                                    for(int ij11 = 0; ij11 < 2; ++ij11)
                                    {
                                        if (false)//if( !j11valid[ij11] )
                                        {
//                                            continue;
                                        }
//                                        _ij11[0] = ij11;
//                                        _ij11[1] = -1;
//                                        for(int iij11 = ij11+1; iij11 < 2; ++iij11)
                                        {
                                            if (false)//if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
                                            {
//                                                j11valid[iij11]=false;
//                                                _ij11[1] = iij11;
//                                                break;
                                            }
                                        }
//                                        j11 = j11array[ij11];
//                                        cj11 = cj11array[ij11];
//                                        sj11 = sj11array[ij11];

                                        {
                                            IkReal j10eval[3];
//                                            px=0;
//                                            py=0;
//                                            pp=pz*pz;
//                                            IkReal x12=pz*pz;
//                                            IkReal x13=((825.0)*pz);
//                                            j10eval[0]=((-1.0)+(((-7.71604938271605)*x12)));
//                                            j10eval[1]=((IKabs(((324.0)+(((297.0)*cj11))+((sj11*x13)))))+(IKabs(((((-1.0)*cj11*x13))+(((297.0)*sj11))+(((-900.0)*pz))))));
//                                            j10eval[2]=IKsign(((-324.0)+(((-2500.0)*x12))));
                                            if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j10eval[1];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    j10eval[0]=((1.09090909090909)+cj11+(((-2.77777777777778)*pz*sj11)));
                                                    if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j10eval[1];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j10eval[0]=((((-2.77777777777778)*cj11*pz))+(((-1.0)*sj11))+(((-3.03030303030303)*pz)));
                                                            if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
//                                                                        IkReal x14=pz*pz;
//                                                                        IkReal x15=((1.0)+(((7.71604938271605)*x14)));
                                                                        if (false)//if((x15) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x16=IKabs(IKsqrt(x15));
//                                                                        IkReal x22 = x15;
                                                                        if (false)//if(IKabs(x22)==0)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x17=pow(x22,-0.5);
//                                                                        CheckValue<IkReal> x23=IKPowWithIntegerCheck<IKFAST_REAL>(x16,-1);
                                                                        if (false)//if(!x23.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x18=x23.value;
//                                                                        IkReal x19=((3.03030303030303)*pz*x18);
                                                                        if (false)//if((((1.0)+(((-9.18273645546373)*x14*(x18*x18))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x20=IKsqrt(((1.0)+(((-9.18273645546373)*x14*(x18*x18)))));
//                                                                        IkReal x21=(x17*x20);
                                                                        if (false)//if( (x19) < -1-IKFAST_SINCOS_THRESH || (x19) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x24.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal gconst0=((IKasin(x19))+(((-1.0)*(x24.value))));
//                                                                        IkReal gconst1=((((-1.0)*x17*x19))+(((2.77777777777778)*pz*x21)));
//                                                                        IkReal gconst2=((((-1.0)*x21))+(((-8.41750841750842)*x14*x17*x18)));
//                                                                        CheckValue<IkReal> x25 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x25.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x26=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if (false)//if(!x26.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((3.03030303030303)*pz*(x26.value))) < -1-IKFAST_SINCOS_THRESH || (((3.03030303030303)*pz*(x26.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x25.value)+(((-1.0)*(IKasin(((3.03030303030303)*pz*(x26.value)))))))))), 6.28318530717959)));
                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
//                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j10eval[2];
//                                                                                IkReal x27=pz*pz;
//                                                                                IkReal x28=x15;
                                                                                if (false)//if((x28) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x29=IKabs(IKsqrt(x28));
//                                                                                IkReal x36 = x28;
                                                                                if (false)//if(IKabs(x36)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x30=pow(x36,-0.5);
//                                                                                CheckValue<IkReal> x37=IKPowWithIntegerCheck<IKFAST_REAL>(x29,-1);
                                                                                if (false)//if(!x37.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x31=x37.value;
//                                                                                IkReal x32=((3.03030303030303)*pz*x31);
                                                                                if (false)//if( (x32) < -1-IKFAST_SINCOS_THRESH || (x32) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x38.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x33=((IKasin(x32))+(((-1.0)*(x38.value))));
                                                                                if (false)//if((((1.0)+(((-9.18273645546373)*x27*(x31*x31))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x34=IKsqrt(((1.0)+(((-9.18273645546373)*x27*(x31*x31)))));
//                                                                                IkReal x35=(x30*x34);
//                                                                                px=0;
//                                                                                py=0;
//                                                                                pp=x27;
//                                                                                sj11=gconst1;
//                                                                                cj11=gconst2;
//                                                                                j11=x33;
//                                                                                IkReal gconst0=x33;
//                                                                                IkReal gconst1=((((2.77777777777778)*pz*x35))+(((-1.0)*x30*x32)));
//                                                                                IkReal gconst2=((((-1.0)*x35))+(((-8.41750841750842)*x27*x30*x31)));
//                                                                                IkReal x39=pz*pz;
//                                                                                j10eval[0]=((-1.0)+(((-7.71604938271605)*x39)));
//                                                                                j10eval[1]=IKsign(((-324.0)+(((-2500.0)*x39))));
                                                                                if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                        bool j10valid[1]= {false};
//                                                                                        _nj10 = 1;
//                                                                                        IkReal x40=(gconst1*pz);
//                                                                                        CheckValue<IkReal> x41=IKPowWithIntegerCheck<IKFAST_REAL>(((4.32)+(((3.96)*gconst2))+(((-11.0)*x40))),-1);
                                                                                        if (false)//if(!x41.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x42=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((1100.0)*x40))+(((-396.0)*gconst2))),-1);
                                                                                        if (false)//if(!x42.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
                                                                                        if (false)//if( IKabs(((x41.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x42.value)*(((432.0)+(((-363.0)*(gconst1*gconst1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x41.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2))))))+IKsqr(((x42.value)*(((432.0)+(((-363.0)*(gconst1*gconst1)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j10array[0]=IKatan2(((x41.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2))))), ((x42.value)*(((432.0)+(((-363.0)*(gconst1*gconst1)))))));
//                                                                                        sj10array[0]=IKsin(j10array[0]);
//                                                                                        cj10array[0]=IKcos(j10array[0]);
                                                                                        if (false)//if( j10array[0] > IKPI )
                                                                                        {
//                                                                                            j10array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j10array[0] < -IKPI )
                                                                                        {
//                                                                                            j10array[0]+=IK2PI;
                                                                                        }
//                                                                                        j10valid[0] = true;
//                                                                                        for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                        {
                                                                                            if (false)//if( !j10valid[ij10] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij10[0] = ij10;
//                                                                                            _ij10[1] = -1;
//                                                                                            for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                            {
                                                                                                if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j10valid[iij10]=false;
//                                                                                                    _ij10[1] = iij10;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j10 = j10array[ij10];
//                                                                                            cj10 = cj10array[ij10];
//                                                                                            sj10 = sj10array[ij10];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x43=IKsin(j10);
//                                                                                                IkReal x44=IKcos(j10);
//                                                                                                IkReal x45=((0.33)*gconst1);
//                                                                                                IkReal x46=((0.33)*gconst2);
//                                                                                                IkReal x47=((0.36)*x43);
//                                                                                                IkReal x48=((0.36)*x44);
//                                                                                                IkReal x49=(pz*x43);
//                                                                                                evalcond[0]=((-0.36)+(((-1.0)*x46))+(((-1.0)*x48))+x49);
//                                                                                                evalcond[1]=((((-1.0)*x45))+(((-1.0)*x47))+(((-1.0)*pz*x44)));
//                                                                                                evalcond[2]=((-0.1503)+(((-0.2592)*x44))+(((0.72)*x49))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=((((-1.0)*x47))+(((-1.0)*x43*x46))+pz+((x44*x45)));
//                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x48))+(((-1.0)*x43*x45))+(((-1.0)*x44*x46)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                bool j9valid[1]= {false};
//                                                                                                _nj9 = 1;
//                                                                                                j9array[0]=0;
//                                                                                                sj9array[0]=IKsin(j9array[0]);
//                                                                                                cj9array[0]=IKcos(j9array[0]);
                                                                                                if (false)//if( j9array[0] > IKPI )
                                                                                                {
//                                                                                                    j9array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j9array[0] < -IKPI )
                                                                                                {
//                                                                                                    j9array[0]+=IK2PI;
                                                                                                }
//                                                                                                j9valid[0] = true;
//                                                                                                for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                {
                                                                                                    if (false)//if( !j9valid[ij9] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij9[0] = ij9;
//                                                                                                    _ij9[1] = -1;
//                                                                                                    for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                    {
                                                                                                        if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j9valid[iij9]=false;
//                                                                                                            _ij9[1] = iij9;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j9 = j9array[ij9];
//                                                                                                    cj9 = cj9array[ij9];
//                                                                                                    sj9 = sj9array[ij9];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j9;
//                                                                                                        vinfos[0].indices[0] = _ij9[0];
//                                                                                                        vinfos[0].indices[1] = _ij9[1];
//                                                                                                        vinfos[0].maxsolutions = _nj9;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j10;
//                                                                                                        vinfos[1].indices[0] = _ij10[0];
//                                                                                                        vinfos[1].indices[1] = _ij10[1];
//                                                                                                        vinfos[1].maxsolutions = _nj10;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j11;
//                                                                                                        vinfos[2].indices[0] = _ij11[0];
//                                                                                                        vinfos[2].indices[1] = _ij11[1];
//                                                                                                        vinfos[2].maxsolutions = _nj11;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                        bool j10valid[1]= {false};
//                                                                                        _nj10 = 1;
//                                                                                        IkReal x50=((825.0)*pz);
//                                                                                        CheckValue<IkReal> x51 = IKatan2WithCheck(IkReal(((((297.0)*gconst1))+(((-1.0)*gconst2*x50))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst2))+((gconst1*x50)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x51.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x52=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                        if (false)//if(!x52.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j10array[0]=((-1.5707963267949)+(x51.value)+(((1.5707963267949)*(x52.value))));
//                                                                                        sj10array[0]=IKsin(j10array[0]);
//                                                                                        cj10array[0]=IKcos(j10array[0]);
                                                                                        if (false)//if( j10array[0] > IKPI )
                                                                                        {
//                                                                                            j10array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j10array[0] < -IKPI )
                                                                                        {
//                                                                                            j10array[0]+=IK2PI;
                                                                                        }
//                                                                                        j10valid[0] = true;
//                                                                                        for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                        {
                                                                                            if (false)//if( !j10valid[ij10] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij10[0] = ij10;
//                                                                                            _ij10[1] = -1;
//                                                                                            for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                            {
                                                                                                if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j10valid[iij10]=false;
//                                                                                                    _ij10[1] = iij10;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j10 = j10array[ij10];
//                                                                                            cj10 = cj10array[ij10];
//                                                                                            sj10 = sj10array[ij10];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x53=IKsin(j10);
//                                                                                                IkReal x54=IKcos(j10);
//                                                                                                IkReal x55=((0.33)*gconst1);
//                                                                                                IkReal x56=((0.33)*gconst2);
//                                                                                                IkReal x57=((0.36)*x53);
//                                                                                                IkReal x58=((0.36)*x54);
//                                                                                                IkReal x59=(pz*x53);
//                                                                                                evalcond[0]=((-0.36)+x59+(((-1.0)*x58))+(((-1.0)*x56)));
//                                                                                                evalcond[1]=((((-1.0)*x57))+(((-1.0)*x55))+(((-1.0)*pz*x54)));
//                                                                                                evalcond[2]=((-0.1503)+(((0.72)*x59))+(((-0.2592)*x54))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=((((-1.0)*x53*x56))+pz+(((-1.0)*x57))+((x54*x55)));
//                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x53*x55))+(((-1.0)*x54*x56))+(((-1.0)*x58)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                bool j9valid[1]= {false};
//                                                                                                _nj9 = 1;
//                                                                                                j9array[0]=0;
//                                                                                                sj9array[0]=IKsin(j9array[0]);
//                                                                                                cj9array[0]=IKcos(j9array[0]);
                                                                                                if (false)//if( j9array[0] > IKPI )
                                                                                                {
//                                                                                                    j9array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j9array[0] < -IKPI )
                                                                                                {
//                                                                                                    j9array[0]+=IK2PI;
                                                                                                }
//                                                                                                j9valid[0] = true;
//                                                                                                for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                {
                                                                                                    if (false)//if( !j9valid[ij9] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij9[0] = ij9;
//                                                                                                    _ij9[1] = -1;
//                                                                                                    for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                    {
                                                                                                        if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j9valid[iij9]=false;
//                                                                                                            _ij9[1] = iij9;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j9 = j9array[ij9];
//                                                                                                    cj9 = cj9array[ij9];
//                                                                                                    sj9 = sj9array[ij9];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j9;
//                                                                                                        vinfos[0].indices[0] = _ij9[0];
//                                                                                                        vinfos[0].indices[1] = _ij9[1];
//                                                                                                        vinfos[0].maxsolutions = _nj9;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j10;
//                                                                                                        vinfos[1].indices[0] = _ij10[0];
//                                                                                                        vinfos[1].indices[1] = _ij10[1];
//                                                                                                        vinfos[1].maxsolutions = _nj10;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j11;
//                                                                                                        vinfos[2].indices[0] = _ij11[0];
//                                                                                                        vinfos[2].indices[1] = _ij11[1];
//                                                                                                        vinfos[2].maxsolutions = _nj11;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if (false)//if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            IkReal x60=pz*pz;
//                                                                            IkReal x61=((1.0)+(((7.71604938271605)*x60)));
//                                                                            IkReal x68 = x61;
                                                                            if (false)//if(IKabs(x68)==0)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x62=pow(x68,-0.5);
                                                                            if (false)//if((x61) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x63=IKabs(IKsqrt(x61));
//                                                                            CheckValue<IkReal> x69=IKPowWithIntegerCheck<IKFAST_REAL>(x63,-1);
                                                                            if (false)//if(!x69.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x64=x69.value;
//                                                                            IkReal x65=((3.03030303030303)*pz*x64);
                                                                            if (false)//if((((1.0)+(((-9.18273645546373)*x60*(x64*x64))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x66=IKsqrt(((1.0)+(((-9.18273645546373)*x60*(x64*x64)))));
//                                                                            IkReal x67=(x62*x66);
                                                                            if (false)//if( (x65) < -1-IKFAST_SINCOS_THRESH || (x65) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x70.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(IKasin(x65))))+(((-1.0)*(x70.value))));
//                                                                            IkReal gconst4=((((-2.77777777777778)*pz*x67))+(((-1.0)*x62*x65)));
//                                                                            IkReal gconst5=((((-8.41750841750842)*x60*x62*x64))+(((1.0)*x67)));
//                                                                            CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x71.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x72=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if (false)//if(!x72.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (((3.03030303030303)*pz*(x72.value))) < -1-IKFAST_SINCOS_THRESH || (((3.03030303030303)*pz*(x72.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x71.value)+(IKasin(((3.03030303030303)*pz*(x72.value)))))))), 6.28318530717959)));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j10eval[2];
//                                                                                    IkReal x73=pz*pz;
//                                                                                    IkReal x74=x61;
//                                                                                    IkReal x82 = x74;
                                                                                    if (false)//if(IKabs(x82)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x75=pow(x82,-0.5);
                                                                                    if (false)//if((x74) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x76=IKabs(IKsqrt(x74));
//                                                                                    CheckValue<IkReal> x83=IKPowWithIntegerCheck<IKFAST_REAL>(x76,-1);
                                                                                    if (false)//if(!x83.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x77=x83.value;
//                                                                                    IkReal x78=((3.03030303030303)*pz*x77);
                                                                                    if (false)//if((((1.0)+(((-9.18273645546373)*x73*(x77*x77))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x79=IKsqrt(((1.0)+(((-9.18273645546373)*x73*(x77*x77)))));
//                                                                                    CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x84.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (x78) < -1-IKFAST_SINCOS_THRESH || (x78) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x80=((((1.0)*(x84.value)))+(((1.0)*(IKasin(x78)))));
//                                                                                    IkReal x81=(x75*x79);
//                                                                                    px=0;
//                                                                                    py=0;
//                                                                                    pp=x73;
//                                                                                    sj11=gconst4;
//                                                                                    cj11=gconst5;
//                                                                                    j11=((3.14159265)+(((-1.0)*x80)));
//                                                                                    IkReal gconst3=((3.14159265358979)+(((-1.0)*x80)));
//                                                                                    IkReal gconst4=((((-2.77777777777778)*pz*x81))+(((-1.0)*x75*x78)));
//                                                                                    IkReal gconst5=((((-8.41750841750842)*x73*x75*x77))+(((1.0)*x81)));
//                                                                                    IkReal x85=pz*pz;
//                                                                                    j10eval[0]=((-1.0)+(((-7.71604938271605)*x85)));
//                                                                                    j10eval[1]=IKsign(((-324.0)+(((-2500.0)*x85))));
                                                                                    if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                            bool j10valid[1]= {false};
//                                                                                            _nj10 = 1;
//                                                                                            IkReal x86=(gconst4*pz);
//                                                                                            CheckValue<IkReal> x87=IKPowWithIntegerCheck<IKFAST_REAL>(((4.32)+(((3.96)*gconst5))+(((-11.0)*x86))),-1);
                                                                                            if (false)//if(!x87.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x88=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((1100.0)*x86))+(((-396.0)*gconst5))),-1);
                                                                                            if (false)//if(!x88.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
                                                                                            if (false)//if( IKabs(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5))))))+IKsqr(((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j10array[0]=IKatan2(((x87.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5))))), ((x88.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))));
//                                                                                            sj10array[0]=IKsin(j10array[0]);
//                                                                                            cj10array[0]=IKcos(j10array[0]);
                                                                                            if (false)//if( j10array[0] > IKPI )
                                                                                            {
//                                                                                                j10array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j10array[0] < -IKPI )
                                                                                            {
//                                                                                                j10array[0]+=IK2PI;
                                                                                            }
//                                                                                            j10valid[0] = true;
//                                                                                            for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                            {
                                                                                                if (false)//if( !j10valid[ij10] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij10[0] = ij10;
//                                                                                                _ij10[1] = -1;
//                                                                                                for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                {
                                                                                                    if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j10valid[iij10]=false;
//                                                                                                        _ij10[1] = iij10;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j10 = j10array[ij10];
//                                                                                                cj10 = cj10array[ij10];
//                                                                                                sj10 = sj10array[ij10];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x89=IKsin(j10);
//                                                                                                    IkReal x90=IKcos(j10);
//                                                                                                    IkReal x91=((0.33)*gconst5);
//                                                                                                    IkReal x92=((0.33)*gconst4);
//                                                                                                    IkReal x93=((0.36)*x89);
//                                                                                                    IkReal x94=((0.36)*x90);
//                                                                                                    IkReal x95=(pz*x89);
//                                                                                                    evalcond[0]=((-0.36)+x95+(((-1.0)*x91))+(((-1.0)*x94)));
//                                                                                                    evalcond[1]=((((-1.0)*pz*x90))+(((-1.0)*x93))+(((-1.0)*x92)));
//                                                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x90))+(((-1.0)*(pz*pz)))+(((0.72)*x95)));
//                                                                                                    evalcond[3]=(((x90*x92))+pz+(((-1.0)*x93))+(((-1.0)*x89*x91)));
//                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x90*x91))+(((-1.0)*x94))+(((-1.0)*x89*x92)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                    bool j9valid[1]= {false};
//                                                                                                    _nj9 = 1;
//                                                                                                    j9array[0]=0;
//                                                                                                    sj9array[0]=IKsin(j9array[0]);
//                                                                                                    cj9array[0]=IKcos(j9array[0]);
                                                                                                    if (false)//if( j9array[0] > IKPI )
                                                                                                    {
//                                                                                                        j9array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j9array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j9array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j9valid[0] = true;
//                                                                                                    for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                    {
                                                                                                        if (false)//if( !j9valid[ij9] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij9[0] = ij9;
//                                                                                                        _ij9[1] = -1;
//                                                                                                        for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                        {
                                                                                                            if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j9valid[iij9]=false;
//                                                                                                                _ij9[1] = iij9;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j9 = j9array[ij9];
//                                                                                                        cj9 = cj9array[ij9];
//                                                                                                        sj9 = sj9array[ij9];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j9;
//                                                                                                            vinfos[0].indices[0] = _ij9[0];
//                                                                                                            vinfos[0].indices[1] = _ij9[1];
//                                                                                                            vinfos[0].maxsolutions = _nj9;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j10;
//                                                                                                            vinfos[1].indices[0] = _ij10[0];
//                                                                                                            vinfos[1].indices[1] = _ij10[1];
//                                                                                                            vinfos[1].maxsolutions = _nj10;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j11;
//                                                                                                            vinfos[2].indices[0] = _ij11[0];
//                                                                                                            vinfos[2].indices[1] = _ij11[1];
//                                                                                                            vinfos[2].maxsolutions = _nj11;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                            bool j10valid[1]= {false};
//                                                                                            _nj10 = 1;
//                                                                                            IkReal x96=((825.0)*pz);
//                                                                                            CheckValue<IkReal> x97 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x96))+(((297.0)*gconst4))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst5))+((gconst4*x96)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x97.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x98=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                            if (false)//if(!x98.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j10array[0]=((-1.5707963267949)+(x97.value)+(((1.5707963267949)*(x98.value))));
//                                                                                            sj10array[0]=IKsin(j10array[0]);
//                                                                                            cj10array[0]=IKcos(j10array[0]);
                                                                                            if (false)//if( j10array[0] > IKPI )
                                                                                            {
//                                                                                                j10array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j10array[0] < -IKPI )
                                                                                            {
//                                                                                                j10array[0]+=IK2PI;
                                                                                            }
//                                                                                            j10valid[0] = true;
//                                                                                            for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                            {
                                                                                                if (false)//if( !j10valid[ij10] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij10[0] = ij10;
//                                                                                                _ij10[1] = -1;
//                                                                                                for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                {
                                                                                                    if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j10valid[iij10]=false;
//                                                                                                        _ij10[1] = iij10;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j10 = j10array[ij10];
//                                                                                                cj10 = cj10array[ij10];
//                                                                                                sj10 = sj10array[ij10];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x99=IKsin(j10);
//                                                                                                    IkReal x100=IKcos(j10);
//                                                                                                    IkReal x101=((0.33)*gconst5);
//                                                                                                    IkReal x102=((0.33)*gconst4);
//                                                                                                    IkReal x103=((0.36)*x99);
//                                                                                                    IkReal x104=((0.36)*x100);
//                                                                                                    IkReal x105=(pz*x99);
//                                                                                                    evalcond[0]=((-0.36)+(((-1.0)*x101))+(((-1.0)*x104))+x105);
//                                                                                                    evalcond[1]=((((-1.0)*x103))+(((-1.0)*x102))+(((-1.0)*pz*x100)));
//                                                                                                    evalcond[2]=((-0.1503)+(((0.72)*x105))+(((-0.2592)*x100))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=((((-1.0)*x103))+pz+(((-1.0)*x101*x99))+((x100*x102)));
//                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x102*x99))+(((-1.0)*x100*x101))+(((-1.0)*x104)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                    bool j9valid[1]= {false};
//                                                                                                    _nj9 = 1;
//                                                                                                    j9array[0]=0;
//                                                                                                    sj9array[0]=IKsin(j9array[0]);
//                                                                                                    cj9array[0]=IKcos(j9array[0]);
                                                                                                    if (false)//if( j9array[0] > IKPI )
                                                                                                    {
//                                                                                                        j9array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j9array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j9array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j9valid[0] = true;
//                                                                                                    for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                    {
                                                                                                        if (false)//if( !j9valid[ij9] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij9[0] = ij9;
//                                                                                                        _ij9[1] = -1;
//                                                                                                        for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                        {
                                                                                                            if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j9valid[iij9]=false;
//                                                                                                                _ij9[1] = iij9;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j9 = j9array[ij9];
//                                                                                                        cj9 = cj9array[ij9];
//                                                                                                        sj9 = sj9array[ij9];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j9;
//                                                                                                            vinfos[0].indices[0] = _ij9[0];
//                                                                                                            vinfos[0].indices[1] = _ij9[1];
//                                                                                                            vinfos[0].maxsolutions = _nj9;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j10;
//                                                                                                            vinfos[1].indices[0] = _ij10[0];
//                                                                                                            vinfos[1].indices[1] = _ij10[1];
//                                                                                                            vinfos[1].maxsolutions = _nj10;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j11;
//                                                                                                            vinfos[2].indices[0] = _ij11[0];
//                                                                                                            vinfos[2].indices[1] = _ij11[1];
//                                                                                                            vinfos[2].maxsolutions = _nj11;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
//                                                                                IkReal x106=((1.0)+(((7.71604938271605)*(pz*pz))));
//                                                                                IkReal x113 = x106;
                                                                                if (false)//if(IKabs(x113)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x107=pow(x113,-0.5);
                                                                                if (false)//if((x106) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x108=IKabs(IKsqrt(x106));
//                                                                                IkReal x109=(pz*x107);
//                                                                                CheckValue<IkReal> x114=IKPowWithIntegerCheck<IKFAST_REAL>(x108,-1);
                                                                                if (false)//if(!x114.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x110=x114.value;
//                                                                                IkReal x111=((1.09090909090909)*x110);
                                                                                if (false)//if((((1.0)+(((-1.1900826446281)*(x110*x110))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x112=IKsqrt(((1.0)+(((-1.1900826446281)*(x110*x110)))));
//                                                                                CheckValue<IkReal> x115 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x115.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (x111) < -1-IKFAST_SINCOS_THRESH || (x111) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal gconst6=((((-1.0)*(x115.value)))+(((-1.0)*(IKasin(x111)))));
//                                                                                IkReal gconst7=((((-1.0)*x107*x112))+(((3.03030303030303)*x109*x110)));
//                                                                                IkReal gconst8=((((-2.77777777777778)*x109*x112))+(((-1.0)*x107*x111)));
//                                                                                CheckValue<IkReal> x116 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x116.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x117=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                if (false)//if(!x117.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (((1.09090909090909)*(x117.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x117.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x116.value)+j11+(IKasin(((1.09090909090909)*(x117.value)))))))), 6.28318530717959)));
                                                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
//                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j10eval[2];
//                                                                                        IkReal x118=pz*pz;
//                                                                                        CheckValue<IkReal> x127 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x127.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x119=((1.0)*(x127.value));
//                                                                                        IkReal x120=x106;
//                                                                                        IkReal x128 = x120;
                                                                                        if (false)//if(IKabs(x128)==0)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x121=pow(x128,-0.5);
                                                                                        if (false)//if((x120) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x122=IKabs(IKsqrt(x120));
//                                                                                        CheckValue<IkReal> x129=IKPowWithIntegerCheck<IKFAST_REAL>(x122,-1);
                                                                                        if (false)//if(!x129.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x123=x129.value;
                                                                                        if (false)//if((((1.0)+(((-1.1900826446281)*(x123*x123))))) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x124=IKsqrt(((1.0)+(((-1.1900826446281)*(x123*x123)))));
//                                                                                        IkReal x125=(x121*x123);
//                                                                                        IkReal x126=(x121*x124);
//                                                                                        px=0;
//                                                                                        py=0;
//                                                                                        pp=x118;
//                                                                                        sj11=gconst7;
//                                                                                        cj11=gconst8;
                                                                                        if (false)//if( (((1.09090908694215)*x123)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x123)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j11=((((-1.0)*x119))+(((-1.0)*(IKasin(((1.09090908694215)*x123))))));
                                                                                        if (false)//if( (((1.09090909090909)*x123)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x123)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal gconst6=((((-1.0)*x119))+(((-1.0)*(IKasin(((1.09090909090909)*x123))))));
//                                                                                        IkReal gconst7=((((3.03030303030303)*pz*x125))+(((-1.0)*x126)));
//                                                                                        IkReal gconst8=((((-1.09090909090909)*x125))+(((-2.77777777777778)*pz*x126)));
//                                                                                        IkReal x130=pz*pz;
//                                                                                        j10eval[0]=((-1.0)+(((-7.71604938271605)*x130)));
//                                                                                        j10eval[1]=IKsign(((-324.0)+(((-2500.0)*x130))));
                                                                                        if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                                bool j10valid[1]= {false};
//                                                                                                _nj10 = 1;
//                                                                                                IkReal x131=((297.0)*gconst7);
//                                                                                                IkReal x132=((900.0)*pz);
//                                                                                                IkReal x133=(x131+x132);
//                                                                                                CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((((-594.0)*gconst8))+(((-272.25)*(gconst8*gconst8))))),IkReal((x133+(((272.25)*gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x134.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x135=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-1.0)*x133))+(((-825.0)*gconst8*pz)))),-1);
                                                                                                if (false)//if(!x135.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j10array[0]=((-1.5707963267949)+(x134.value)+(((1.5707963267949)*(x135.value))));
//                                                                                                sj10array[0]=IKsin(j10array[0]);
//                                                                                                cj10array[0]=IKcos(j10array[0]);
                                                                                                if (false)//if( j10array[0] > IKPI )
                                                                                                {
//                                                                                                    j10array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j10array[0] < -IKPI )
                                                                                                {
//                                                                                                    j10array[0]+=IK2PI;
                                                                                                }
//                                                                                                j10valid[0] = true;
//                                                                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                                {
                                                                                                    if (false)//if( !j10valid[ij10] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij10[0] = ij10;
//                                                                                                    _ij10[1] = -1;
//                                                                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                    {
                                                                                                        if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j10valid[iij10]=false;
//                                                                                                            _ij10[1] = iij10;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j10 = j10array[ij10];
//                                                                                                    cj10 = cj10array[ij10];
//                                                                                                    sj10 = sj10array[ij10];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x136=IKsin(j10);
//                                                                                                        IkReal x137=IKcos(j10);
//                                                                                                        IkReal x138=((0.33)*gconst7);
//                                                                                                        IkReal x139=((0.33)*gconst8);
//                                                                                                        IkReal x140=((0.36)*x136);
//                                                                                                        IkReal x141=((0.36)*x137);
//                                                                                                        IkReal x142=((0.33)*x137);
//                                                                                                        IkReal x143=(pz*x136);
//                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x141))+x143+(((-1.0)*x139)));
//                                                                                                        evalcond[1]=((((-1.0)*x140))+(((-1.0)*x138))+(((-1.0)*pz*x137)));
//                                                                                                        evalcond[2]=((-0.1503)+(((-0.2592)*x137))+(((0.72)*x143))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((((-1.0)*x140))+((x137*x138))+(((-1.0)*x136*x139))+pz);
//                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x141))+(((-1.0)*x137*x139))+(((-1.0)*x136*x138)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                        bool j9valid[1]= {false};
//                                                                                                        _nj9 = 1;
//                                                                                                        j9array[0]=0;
//                                                                                                        sj9array[0]=IKsin(j9array[0]);
//                                                                                                        cj9array[0]=IKcos(j9array[0]);
                                                                                                        if (false)//if( j9array[0] > IKPI )
                                                                                                        {
//                                                                                                            j9array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j9array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j9array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j9valid[0] = true;
//                                                                                                        for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                        {
                                                                                                            if (false)//if( !j9valid[ij9] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij9[0] = ij9;
//                                                                                                            _ij9[1] = -1;
//                                                                                                            for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                            {
                                                                                                                if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j9valid[iij9]=false;
//                                                                                                                    _ij9[1] = iij9;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j9 = j9array[ij9];
//                                                                                                            cj9 = cj9array[ij9];
//                                                                                                            sj9 = sj9array[ij9];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j9;
//                                                                                                                vinfos[0].indices[0] = _ij9[0];
//                                                                                                                vinfos[0].indices[1] = _ij9[1];
//                                                                                                                vinfos[0].maxsolutions = _nj9;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j10;
//                                                                                                                vinfos[1].indices[0] = _ij10[0];
//                                                                                                                vinfos[1].indices[1] = _ij10[1];
//                                                                                                                vinfos[1].maxsolutions = _nj10;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j11;
//                                                                                                                vinfos[2].indices[0] = _ij11[0];
//                                                                                                                vinfos[2].indices[1] = _ij11[1];
//                                                                                                                vinfos[2].maxsolutions = _nj11;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                                bool j10valid[1]= {false};
//                                                                                                _nj10 = 1;
//                                                                                                IkReal x144=((825.0)*pz);
//                                                                                                CheckValue<IkReal> x145 = IKatan2WithCheck(IkReal(((((297.0)*gconst7))+(((-1.0)*gconst8*x144))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst8))+((gconst7*x144)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x145.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x146=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                                if (false)//if(!x146.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j10array[0]=((-1.5707963267949)+(x145.value)+(((1.5707963267949)*(x146.value))));
//                                                                                                sj10array[0]=IKsin(j10array[0]);
//                                                                                                cj10array[0]=IKcos(j10array[0]);
                                                                                                if (false)//if( j10array[0] > IKPI )
                                                                                                {
//                                                                                                    j10array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j10array[0] < -IKPI )
                                                                                                {
//                                                                                                    j10array[0]+=IK2PI;
                                                                                                }
//                                                                                                j10valid[0] = true;
//                                                                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                                {
                                                                                                    if (false)//if( !j10valid[ij10] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij10[0] = ij10;
//                                                                                                    _ij10[1] = -1;
//                                                                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                    {
                                                                                                        if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j10valid[iij10]=false;
//                                                                                                            _ij10[1] = iij10;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j10 = j10array[ij10];
//                                                                                                    cj10 = cj10array[ij10];
//                                                                                                    sj10 = sj10array[ij10];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x147=IKsin(j10);
//                                                                                                        IkReal x148=IKcos(j10);
//                                                                                                        IkReal x149=((0.33)*gconst7);
//                                                                                                        IkReal x150=((0.33)*gconst8);
//                                                                                                        IkReal x151=((0.36)*x147);
//                                                                                                        IkReal x152=((0.36)*x148);
//                                                                                                        IkReal x153=((0.33)*x148);
//                                                                                                        IkReal x154=(pz*x147);
//                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x150))+(((-1.0)*x152))+x154);
//                                                                                                        evalcond[1]=((((-1.0)*x149))+(((-1.0)*x151))+(((-1.0)*pz*x148)));
//                                                                                                        evalcond[2]=((-0.1503)+(((-0.2592)*x148))+(((0.72)*x154))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((((-1.0)*x151))+pz+(((-1.0)*x147*x150))+((x148*x149)));
//                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x152))+(((-1.0)*x147*x149))+(((-1.0)*x148*x150)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                        bool j9valid[1]= {false};
//                                                                                                        _nj9 = 1;
//                                                                                                        j9array[0]=0;
//                                                                                                        sj9array[0]=IKsin(j9array[0]);
//                                                                                                        cj9array[0]=IKcos(j9array[0]);
                                                                                                        if (false)//if( j9array[0] > IKPI )
                                                                                                        {
//                                                                                                            j9array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j9array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j9array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j9valid[0] = true;
//                                                                                                        for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                        {
                                                                                                            if (false)//if( !j9valid[ij9] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij9[0] = ij9;
//                                                                                                            _ij9[1] = -1;
//                                                                                                            for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                            {
                                                                                                                if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j9valid[iij9]=false;
//                                                                                                                    _ij9[1] = iij9;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j9 = j9array[ij9];
//                                                                                                            cj9 = cj9array[ij9];
//                                                                                                            sj9 = sj9array[ij9];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j9;
//                                                                                                                vinfos[0].indices[0] = _ij9[0];
//                                                                                                                vinfos[0].indices[1] = _ij9[1];
//                                                                                                                vinfos[0].maxsolutions = _nj9;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j10;
//                                                                                                                vinfos[1].indices[0] = _ij10[0];
//                                                                                                                vinfos[1].indices[1] = _ij10[1];
//                                                                                                                vinfos[1].maxsolutions = _nj10;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j11;
//                                                                                                                vinfos[2].indices[0] = _ij11[0];
//                                                                                                                vinfos[2].indices[1] = _ij11[1];
//                                                                                                                vinfos[2].maxsolutions = _nj11;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if (false)//if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
//                                                                                    IkReal x155=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                                    if (false)//if((x155) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x156=IKabs(IKsqrt(x155));
//                                                                                    IkReal x162 = x155;
                                                                                    if (false)//if(IKabs(x162)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x157=pow(x162,-0.5);
//                                                                                    IkReal x158=(pz*x157);
//                                                                                    CheckValue<IkReal> x163=IKPowWithIntegerCheck<IKFAST_REAL>(x156,-1);
                                                                                    if (false)//if(!x163.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x159=x163.value;
//                                                                                    IkReal x160=((1.09090909090909)*x159);
                                                                                    if (false)//if((((1.0)+(((-1.1900826446281)*(x159*x159))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x161=IKsqrt(((1.0)+(((-1.1900826446281)*(x159*x159)))));
//                                                                                    CheckValue<IkReal> x164 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x164.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (x160) < -1-IKFAST_SINCOS_THRESH || (x160) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal gconst9=((3.14159265358979)+(((-1.0)*(x164.value)))+(IKasin(x160)));
//                                                                                    IkReal gconst10=((((1.0)*x157*x161))+(((3.03030303030303)*x158*x159)));
//                                                                                    IkReal gconst11=((((-1.0)*x157*x160))+(((2.77777777777778)*x158*x161)));
//                                                                                    CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x165.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x166=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                    if (false)//if(!x166.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (((1.09090909090909)*(x166.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x166.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x165.value)+j11+(((-1.0)*(IKasin(((1.09090909090909)*(x166.value)))))))))), 6.28318530717959)));
                                                                                    if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
//                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j10eval[2];
//                                                                                            IkReal x167=pz*pz;
//                                                                                            CheckValue<IkReal> x176 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x176.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x168=((1.0)*(x176.value));
//                                                                                            IkReal x169=x155;
                                                                                            if (false)//if((x169) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x170=IKabs(IKsqrt(x169));
//                                                                                            IkReal x177 = x169;
                                                                                            if (false)//if(IKabs(x177)==0)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x171=pow(x177,-0.5);
//                                                                                            CheckValue<IkReal> x178=IKPowWithIntegerCheck<IKFAST_REAL>(x170,-1);
                                                                                            if (false)//if(!x178.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x172=x178.value;
                                                                                            if (false)//if((((1.0)+(((-1.1900826446281)*(x172*x172))))) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x173=IKsqrt(((1.0)+(((-1.1900826446281)*(x172*x172)))));
//                                                                                            IkReal x174=(x171*x172);
//                                                                                            IkReal x175=(x171*x173);
//                                                                                            px=0;
//                                                                                            py=0;
//                                                                                            pp=x167;
//                                                                                            sj11=gconst10;
//                                                                                            cj11=gconst11;
                                                                                            if (false)//if( (((1.09090908694215)*x172)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x172)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j11=((3.14159265)+(((-1.0)*x168))+(IKasin(((1.09090908694215)*x172))));
                                                                                            if (false)//if( (((1.09090909090909)*x172)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x172)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal gconst9=((3.14159265358979)+(((-1.0)*x168))+(IKasin(((1.09090909090909)*x172))));
//                                                                                            IkReal gconst10=((((3.03030303030303)*pz*x174))+(((1.0)*x175)));
//                                                                                            IkReal gconst11=((((2.77777777777778)*pz*x175))+(((-1.09090909090909)*x174)));
//                                                                                            IkReal x179=pz*pz;
//                                                                                            j10eval[0]=((-1.0)+(((-7.71604938271605)*x179)));
//                                                                                            j10eval[1]=IKsign(((-324.0)+(((-2500.0)*x179))));
                                                                                            if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                                    bool j10valid[1]= {false};
//                                                                                                    _nj10 = 1;
//                                                                                                    IkReal x180=(gconst10*pz);
//                                                                                                    CheckValue<IkReal> x181=IKPowWithIntegerCheck<IKFAST_REAL>(((4.32)+(((3.96)*gconst11))+(((-11.0)*x180))),-1);
                                                                                                    if (false)//if(!x181.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x182=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((-396.0)*gconst11))+(((1100.0)*x180))),-1);
                                                                                                    if (false)//if(!x182.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                    if (false)//if( IKabs(((x181.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x182.value)*(((432.0)+(((-363.0)*(gconst10*gconst10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x181.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11))))))+IKsqr(((x182.value)*(((432.0)+(((-363.0)*(gconst10*gconst10)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j10array[0]=IKatan2(((x181.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11))))), ((x182.value)*(((432.0)+(((-363.0)*(gconst10*gconst10)))))));
//                                                                                                    sj10array[0]=IKsin(j10array[0]);
//                                                                                                    cj10array[0]=IKcos(j10array[0]);
                                                                                                    if (false)//if( j10array[0] > IKPI )
                                                                                                    {
//                                                                                                        j10array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j10array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j10array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j10valid[0] = true;
//                                                                                                    for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                                    {
                                                                                                        if (false)//if( !j10valid[ij10] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij10[0] = ij10;
//                                                                                                        _ij10[1] = -1;
//                                                                                                        for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                        {
                                                                                                            if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j10valid[iij10]=false;
//                                                                                                                _ij10[1] = iij10;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j10 = j10array[ij10];
//                                                                                                        cj10 = cj10array[ij10];
//                                                                                                        sj10 = sj10array[ij10];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x183=IKsin(j10);
//                                                                                                            IkReal x184=IKcos(j10);
//                                                                                                            IkReal x185=((0.33)*gconst10);
//                                                                                                            IkReal x186=((0.33)*gconst11);
//                                                                                                            IkReal x187=((0.36)*x183);
//                                                                                                            IkReal x188=((0.36)*x184);
//                                                                                                            IkReal x189=((0.33)*x184);
//                                                                                                            IkReal x190=(pz*x183);
//                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x186))+(((-1.0)*x188))+x190);
//                                                                                                            evalcond[1]=((((-1.0)*x187))+(((-1.0)*x185))+(((-1.0)*pz*x184)));
//                                                                                                            evalcond[2]=((-0.1503)+(((0.72)*x190))+(((-1.0)*(pz*pz)))+(((-0.2592)*x184)));
//                                                                                                            evalcond[3]=((((-1.0)*x187))+((x184*x185))+pz+(((-1.0)*x183*x186)));
//                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x188))+(((-1.0)*x184*x186))+(((-1.0)*x183*x185)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                            bool j9valid[1]= {false};
//                                                                                                            _nj9 = 1;
//                                                                                                            j9array[0]=0;
//                                                                                                            sj9array[0]=IKsin(j9array[0]);
//                                                                                                            cj9array[0]=IKcos(j9array[0]);
                                                                                                            if (false)//if( j9array[0] > IKPI )
                                                                                                            {
//                                                                                                                j9array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j9array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j9array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j9valid[0] = true;
//                                                                                                            for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                            {
                                                                                                                if (false)//if( !j9valid[ij9] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij9[0] = ij9;
//                                                                                                                _ij9[1] = -1;
//                                                                                                                for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                                {
                                                                                                                    if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j9valid[iij9]=false;
//                                                                                                                        _ij9[1] = iij9;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j9 = j9array[ij9];
//                                                                                                                cj9 = cj9array[ij9];
//                                                                                                                sj9 = sj9array[ij9];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j9;
//                                                                                                                    vinfos[0].indices[0] = _ij9[0];
//                                                                                                                    vinfos[0].indices[1] = _ij9[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj9;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j10;
//                                                                                                                    vinfos[1].indices[0] = _ij10[0];
//                                                                                                                    vinfos[1].indices[1] = _ij10[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj10;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j11;
//                                                                                                                    vinfos[2].indices[0] = _ij11[0];
//                                                                                                                    vinfos[2].indices[1] = _ij11[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj11;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                                                                    bool j10valid[1]= {false};
//                                                                                                    _nj10 = 1;
//                                                                                                    IkReal x191=((825.0)*pz);
//                                                                                                    CheckValue<IkReal> x192 = IKatan2WithCheck(IkReal(((((297.0)*gconst10))+(((-900.0)*pz))+(((-1.0)*gconst11*x191)))),IkReal(((324.0)+(((297.0)*gconst11))+((gconst10*x191)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x192.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x193=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                                    if (false)//if(!x193.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j10array[0]=((-1.5707963267949)+(x192.value)+(((1.5707963267949)*(x193.value))));
//                                                                                                    sj10array[0]=IKsin(j10array[0]);
//                                                                                                    cj10array[0]=IKcos(j10array[0]);
                                                                                                    if (false)//if( j10array[0] > IKPI )
                                                                                                    {
//                                                                                                        j10array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j10array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j10array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j10valid[0] = true;
//                                                                                                    for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                                                    {
                                                                                                        if (false)//if( !j10valid[ij10] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij10[0] = ij10;
//                                                                                                        _ij10[1] = -1;
//                                                                                                        for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                                                        {
                                                                                                            if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j10valid[iij10]=false;
//                                                                                                                _ij10[1] = iij10;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j10 = j10array[ij10];
//                                                                                                        cj10 = cj10array[ij10];
//                                                                                                        sj10 = sj10array[ij10];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x194=IKsin(j10);
//                                                                                                            IkReal x195=IKcos(j10);
//                                                                                                            IkReal x196=((0.33)*gconst10);
//                                                                                                            IkReal x197=((0.33)*gconst11);
//                                                                                                            IkReal x198=((0.36)*x194);
//                                                                                                            IkReal x199=((0.36)*x195);
//                                                                                                            IkReal x200=((0.33)*x195);
//                                                                                                            IkReal x201=(pz*x194);
//                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x199))+(((-1.0)*x197))+x201);
//                                                                                                            evalcond[1]=((((-1.0)*x198))+(((-1.0)*x196))+(((-1.0)*pz*x195)));
//                                                                                                            evalcond[2]=((-0.1503)+(((0.72)*x201))+(((-1.0)*(pz*pz)))+(((-0.2592)*x195)));
//                                                                                                            evalcond[3]=((((-1.0)*x194*x197))+(((-1.0)*x198))+((x195*x196))+pz);
//                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x194*x196))+(((-1.0)*x195*x197))+(((-1.0)*x199)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                            bool j9valid[1]= {false};
//                                                                                                            _nj9 = 1;
//                                                                                                            j9array[0]=0;
//                                                                                                            sj9array[0]=IKsin(j9array[0]);
//                                                                                                            cj9array[0]=IKcos(j9array[0]);
                                                                                                            if (false)//if( j9array[0] > IKPI )
                                                                                                            {
//                                                                                                                j9array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j9array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j9array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j9valid[0] = true;
//                                                                                                            for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                                                            {
                                                                                                                if (false)//if( !j9valid[ij9] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij9[0] = ij9;
//                                                                                                                _ij9[1] = -1;
//                                                                                                                for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                                                {
                                                                                                                    if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j9valid[iij9]=false;
//                                                                                                                        _ij9[1] = iij9;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j9 = j9array[ij9];
//                                                                                                                cj9 = cj9array[ij9];
//                                                                                                                sj9 = sj9array[ij9];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j9;
//                                                                                                                    vinfos[0].indices[0] = _ij9[0];
//                                                                                                                    vinfos[0].indices[1] = _ij9[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj9;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j10;
//                                                                                                                    vinfos[1].indices[0] = _ij10[0];
//                                                                                                                    vinfos[1].indices[1] = _ij10[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj10;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j11;
//                                                                                                                    vinfos[2].indices[0] = _ij11[0];
//                                                                                                                    vinfos[2].indices[1] = _ij11[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj11;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if (false)//if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
//                                                                                            bgotonextstatement=false;
//                                                                                            continue; // branch miss [j9, j10]

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if( bgotonextstatement )
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                                    bool j10valid[1]= {false};
//                                                                    _nj10 = 1;
//                                                                    IkReal x202=((297.0)*sj11);
//                                                                    IkReal x203=((900.0)*pz);
//                                                                    IkReal x204=(cj11*pz);
//                                                                    IkReal x205=(x203+x202);
//                                                                    CheckValue<IkReal> x206=IKPowWithIntegerCheck<IKFAST_REAL>(((((-1188.0)*sj11))+(((-3300.0)*x204))+(((-3600.0)*pz))),-1);
                                                                    if (false)//if(!x206.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x207=IKPowWithIntegerCheck<IKFAST_REAL>(((((-1.0)*x205))+(((-825.0)*x204))),-1);
                                                                    if (false)//if(!x207.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((x206.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj11*cj11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x207.value)*(((((272.25)*cj11*sj11))+x205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x206.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj11*cj11)))))))+IKsqr(((x207.value)*(((((272.25)*cj11*sj11))+x205))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j10array[0]=IKatan2(((x206.value)*(((1089.0)+(((-10000.0)*(pz*pz)))+(((-1089.0)*(cj11*cj11)))))), ((x207.value)*(((((272.25)*cj11*sj11))+x205))));
//                                                                    sj10array[0]=IKsin(j10array[0]);
//                                                                    cj10array[0]=IKcos(j10array[0]);
                                                                    if (false)//if( j10array[0] > IKPI )
                                                                    {
//                                                                        j10array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j10array[0] < -IKPI )
                                                                    {
//                                                                        j10array[0]+=IK2PI;
                                                                    }
//                                                                    j10valid[0] = true;
//                                                                    for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                    {
                                                                        if (false)//if( !j10valid[ij10] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij10[0] = ij10;
//                                                                        _ij10[1] = -1;
//                                                                        for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                        {
                                                                            if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j10valid[iij10]=false;
//                                                                                _ij10[1] = iij10;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j10 = j10array[ij10];
//                                                                        cj10 = cj10array[ij10];
//                                                                        sj10 = sj10array[ij10];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x208=IKsin(j10);
//                                                                            IkReal x209=IKcos(j10);
//                                                                            IkReal x210=((0.33)*sj11);
//                                                                            IkReal x211=((0.33)*cj11);
//                                                                            IkReal x212=((0.36)*x208);
//                                                                            IkReal x213=((0.36)*x209);
//                                                                            IkReal x214=(pz*x208);
//                                                                            evalcond[0]=((-0.36)+x214+(((-1.0)*x211))+(((-1.0)*x213)));
//                                                                            evalcond[1]=((((-1.0)*x212))+(((-1.0)*x210))+(((-1.0)*pz*x209)));
//                                                                            evalcond[2]=((-0.1503)+(((-0.2592)*x209))+(((0.72)*x214))+(((-1.0)*(pz*pz))));
//                                                                            evalcond[3]=(((x209*x210))+pz+(((-1.0)*x212))+(((-1.0)*x208*x211)));
//                                                                            evalcond[4]=((-0.36)+(((-1.0)*x213))+(((-1.0)*x208*x210))+(((-1.0)*x209*x211)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                            bool j9valid[1]= {false};
//                                                                            _nj9 = 1;
//                                                                            j9array[0]=0;
//                                                                            sj9array[0]=IKsin(j9array[0]);
//                                                                            cj9array[0]=IKcos(j9array[0]);
                                                                            if (false)//if( j9array[0] > IKPI )
                                                                            {
//                                                                                j9array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j9array[0] < -IKPI )
                                                                            {
//                                                                                j9array[0]+=IK2PI;
                                                                            }
//                                                                            j9valid[0] = true;
//                                                                            for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                            {
                                                                                if (false)//if( !j9valid[ij9] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij9[0] = ij9;
//                                                                                _ij9[1] = -1;
//                                                                                for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                                {
                                                                                    if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j9valid[iij9]=false;
//                                                                                        _ij9[1] = iij9;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j9 = j9array[ij9];
//                                                                                cj9 = cj9array[ij9];
//                                                                                sj9 = sj9array[ij9];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j9;
//                                                                                    vinfos[0].indices[0] = _ij9[0];
//                                                                                    vinfos[0].indices[1] = _ij9[1];
//                                                                                    vinfos[0].maxsolutions = _nj9;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j10;
//                                                                                    vinfos[1].indices[0] = _ij10[0];
//                                                                                    vinfos[1].indices[1] = _ij10[1];
//                                                                                    vinfos[1].maxsolutions = _nj10;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j11;
//                                                                                    vinfos[2].indices[0] = _ij11[0];
//                                                                                    vinfos[2].indices[1] = _ij11[1];
//                                                                                    vinfos[2].maxsolutions = _nj11;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                                            bool j10valid[1]= {false};
//                                                            _nj10 = 1;
//                                                            IkReal x215=(pz*sj11);
//                                                            CheckValue<IkReal> x216=IKPowWithIntegerCheck<IKFAST_REAL>(((4.32)+(((3.96)*cj11))+(((-11.0)*x215))),-1);
                                                            if (false)//if(!x216.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            CheckValue<IkReal> x217=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((1100.0)*x215))+(((-396.0)*cj11))),-1);
                                                            if (false)//if(!x217.valid)
                                                            {
//                                                                continue;
                                                            }
                                                            if (false)//if( IKabs(((x216.value)*(((((12.0)*pz))+(((-3.96)*sj11))+(((-3.63)*cj11*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x217.value)*(((69.0)+(((363.0)*(cj11*cj11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x216.value)*(((((12.0)*pz))+(((-3.96)*sj11))+(((-3.63)*cj11*sj11))))))+IKsqr(((x217.value)*(((69.0)+(((363.0)*(cj11*cj11)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                            {
//                                                                continue;
                                                            }
//                                                            j10array[0]=IKatan2(((x216.value)*(((((12.0)*pz))+(((-3.96)*sj11))+(((-3.63)*cj11*sj11))))), ((x217.value)*(((69.0)+(((363.0)*(cj11*cj11)))))));
//                                                            sj10array[0]=IKsin(j10array[0]);
//                                                            cj10array[0]=IKcos(j10array[0]);
                                                            if (false)//if( j10array[0] > IKPI )
                                                            {
//                                                                j10array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j10array[0] < -IKPI )
                                                            {
//                                                                j10array[0]+=IK2PI;
                                                            }
//                                                            j10valid[0] = true;
//                                                            for(int ij10 = 0; ij10 < 1; ++ij10)
                                                            {
                                                                if (false)//if( !j10valid[ij10] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij10[0] = ij10;
//                                                                _ij10[1] = -1;
//                                                                for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                {
                                                                    if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j10valid[iij10]=false;
//                                                                        _ij10[1] = iij10;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j10 = j10array[ij10];
//                                                                cj10 = cj10array[ij10];
//                                                                sj10 = sj10array[ij10];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x218=IKsin(j10);
//                                                                    IkReal x219=IKcos(j10);
//                                                                    IkReal x220=((0.33)*sj11);
//                                                                    IkReal x221=((0.33)*cj11);
//                                                                    IkReal x222=((0.36)*x218);
//                                                                    IkReal x223=((0.36)*x219);
//                                                                    IkReal x224=(pz*x218);
//                                                                    evalcond[0]=((-0.36)+x224+(((-1.0)*x223))+(((-1.0)*x221)));
//                                                                    evalcond[1]=((((-1.0)*pz*x219))+(((-1.0)*x220))+(((-1.0)*x222)));
//                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x219))+(((0.72)*x224))+(((-1.0)*(pz*pz))));
//                                                                    evalcond[3]=(((x219*x220))+pz+(((-1.0)*x218*x221))+(((-1.0)*x222)));
//                                                                    evalcond[4]=((-0.36)+(((-1.0)*x219*x221))+(((-1.0)*x218*x220))+(((-1.0)*x223)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                    bool j9valid[1]= {false};
//                                                                    _nj9 = 1;
//                                                                    j9array[0]=0;
//                                                                    sj9array[0]=IKsin(j9array[0]);
//                                                                    cj9array[0]=IKcos(j9array[0]);
                                                                    if (false)//if( j9array[0] > IKPI )
                                                                    {
//                                                                        j9array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j9array[0] < -IKPI )
                                                                    {
//                                                                        j9array[0]+=IK2PI;
                                                                    }
//                                                                    j9valid[0] = true;
//                                                                    for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                    {
                                                                        if (false)//if( !j9valid[ij9] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij9[0] = ij9;
//                                                                        _ij9[1] = -1;
//                                                                        for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                        {
                                                                            if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j9valid[iij9]=false;
//                                                                                _ij9[1] = iij9;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j9 = j9array[ij9];
//                                                                        cj9 = cj9array[ij9];
//                                                                        sj9 = sj9array[ij9];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j9;
//                                                                            vinfos[0].indices[0] = _ij9[0];
//                                                                            vinfos[0].indices[1] = _ij9[1];
//                                                                            vinfos[0].maxsolutions = _nj9;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j10;
//                                                                            vinfos[1].indices[0] = _ij10[0];
//                                                                            vinfos[1].indices[1] = _ij10[1];
//                                                                            vinfos[1].maxsolutions = _nj10;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j11;
//                                                                            vinfos[2].indices[0] = _ij11[0];
//                                                                            vinfos[2].indices[1] = _ij11[1];
//                                                                            vinfos[2].maxsolutions = _nj11;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                    bool j10valid[1]= {false};
//                                                    _nj10 = 1;
//                                                    IkReal x225=((825.0)*pz);
//                                                    CheckValue<IkReal> x226=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                    if (false)//if(!x226.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    CheckValue<IkReal> x227 = IKatan2WithCheck(IkReal(((((297.0)*sj11))+(((-1.0)*cj11*x225))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*cj11))+((sj11*x225)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if (false)//if(!x227.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x226.value)))+(x227.value));
//                                                    sj10array[0]=IKsin(j10array[0]);
//                                                    cj10array[0]=IKcos(j10array[0]);
                                                    if (false)//if( j10array[0] > IKPI )
                                                    {
//                                                        j10array[0]-=IK2PI;
                                                    }
                                                    else if (false)//else if( j10array[0] < -IKPI )
                                                    {
//                                                        j10array[0]+=IK2PI;
                                                    }
//                                                    j10valid[0] = true;
//                                                    for(int ij10 = 0; ij10 < 1; ++ij10)
                                                    {
                                                        if (false)//if( !j10valid[ij10] )
                                                        {
//                                                            continue;
                                                        }
//                                                        _ij10[0] = ij10;
//                                                        _ij10[1] = -1;
//                                                        for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                        {
                                                            if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                            {
//                                                                j10valid[iij10]=false;
//                                                                _ij10[1] = iij10;
//                                                                break;
                                                            }
                                                        }
//                                                        j10 = j10array[ij10];
//                                                        cj10 = cj10array[ij10];
//                                                        sj10 = sj10array[ij10];
                                                        {
                                                            IkReal evalcond[5];
//                                                            IkReal x228=IKsin(j10);
//                                                            IkReal x229=IKcos(j10);
//                                                            IkReal x230=((0.33)*sj11);
//                                                            IkReal x231=((0.33)*cj11);
//                                                            IkReal x232=((0.36)*x228);
//                                                            IkReal x233=((0.36)*x229);
//                                                            IkReal x234=(pz*x228);
//                                                            evalcond[0]=((-0.36)+(((-1.0)*x233))+(((-1.0)*x231))+x234);
//                                                            evalcond[1]=((((-1.0)*x230))+(((-1.0)*x232))+(((-1.0)*pz*x229)));
//                                                            evalcond[2]=((-0.1503)+(((0.72)*x234))+(((-0.2592)*x229))+(((-1.0)*(pz*pz))));
//                                                            evalcond[3]=(((x229*x230))+(((-1.0)*x232))+pz+(((-1.0)*x228*x231)));
//                                                            evalcond[4]=((-0.36)+(((-1.0)*x233))+(((-1.0)*x229*x231))+(((-1.0)*x228*x230)));
                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
//                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                            bool j9valid[1]= {false};
//                                                            _nj9 = 1;
//                                                            j9array[0]=0;
//                                                            sj9array[0]=IKsin(j9array[0]);
//                                                            cj9array[0]=IKcos(j9array[0]);
                                                            if (false)//if( j9array[0] > IKPI )
                                                            {
//                                                                j9array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j9array[0] < -IKPI )
                                                            {
//                                                                j9array[0]+=IK2PI;
                                                            }
//                                                            j9valid[0] = true;
//                                                            for(int ij9 = 0; ij9 < 1; ++ij9)
                                                            {
                                                                if (false)//if( !j9valid[ij9] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij9[0] = ij9;
//                                                                _ij9[1] = -1;
//                                                                for(int iij9 = ij9+1; iij9 < 1; ++iij9)
                                                                {
                                                                    if (false)//if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j9valid[iij9]=false;
//                                                                        _ij9[1] = iij9;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j9 = j9array[ij9];
//                                                                cj9 = cj9array[ij9];
//                                                                sj9 = sj9array[ij9];

                                                                {
//                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                    vinfos[0].jointtype = 1;
//                                                                    vinfos[0].foffset = j9;
//                                                                    vinfos[0].indices[0] = _ij9[0];
//                                                                    vinfos[0].indices[1] = _ij9[1];
//                                                                    vinfos[0].maxsolutions = _nj9;
//                                                                    vinfos[1].jointtype = 1;
//                                                                    vinfos[1].foffset = j10;
//                                                                    vinfos[1].indices[0] = _ij10[0];
//                                                                    vinfos[1].indices[1] = _ij10[1];
//                                                                    vinfos[1].maxsolutions = _nj10;
//                                                                    vinfos[2].jointtype = 1;
//                                                                    vinfos[2].foffset = j11;
//                                                                    vinfos[2].indices[0] = _ij11[0];
//                                                                    vinfos[2].indices[1] = _ij11[1];
//                                                                    vinfos[2].maxsolutions = _nj11;
//                                                                    int vfree[0];
//                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if (false)//if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
//                                    bgotonextstatement=false;
//                                    continue; // branch miss [j9, j10, j11]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j9array[2], cj9array[2], sj9array[2];
                        bool j9valid[2]= {false};
                        _nj9 = 2;
                        CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x236.valid)
                        {
//                            continue;
                        }
                        IkReal x235=x236.value;
                        j9array[0]=((-1.0)*x235);
                        sj9array[0]=IKsin(j9array[0]);
                        cj9array[0]=IKcos(j9array[0]);
                        j9array[1]=((3.14159265358979)+(((-1.0)*x235)));
                        sj9array[1]=IKsin(j9array[1]);
                        cj9array[1]=IKcos(j9array[1]);
                        if( j9array[0] > IKPI )
                        {
//                            j9array[0]-=IK2PI;
                        }
                        else if( j9array[0] < -IKPI )
                        {
//                            j9array[0]+=IK2PI;
                        }
                        j9valid[0] = true;
                        if( j9array[1] > IKPI )
                        {
                            j9array[1]-=IK2PI;
                        }
                        else if( j9array[1] < -IKPI )
                        {
//                            j9array[1]+=IK2PI;
                        }
                        j9valid[1] = true;
                        for(int ij9 = 0; ij9 < 2; ++ij9)
                        {
                            if( !j9valid[ij9] )
                            {
//                                continue;
                            }
                            _ij9[0] = ij9;
                            _ij9[1] = -1;
                            for(int iij9 = ij9+1; iij9 < 2; ++iij9)
                            {
                                if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                {
//                                    j9valid[iij9]=false;
//                                    _ij9[1] = iij9;
//                                    break;
                                }
                            }
                            j9 = j9array[ij9];
                            cj9 = cj9array[ij9];
                            sj9 = sj9array[ij9];

                            {
                                IkReal j11array[2], cj11array[2], sj11array[2];
                                bool j11valid[2]= {false};
                                _nj11 = 2;
                                cj11array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz)))+(((4.20875420875421)*(py*py)))+(((3.03030303030303)*cj9*py))+(((4.20875420875421)*(px*px)))+(((-3.03030303030303)*px*sj9)));
                                if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j11valid[0] = j11valid[1] = true;
                                    j11array[0] = IKacos(cj11array[0]);
                                    sj11array[0] = IKsin(j11array[0]);
                                    cj11array[1] = cj11array[0];
                                    j11array[1] = -j11array[0];
                                    sj11array[1] = -sj11array[0];
                                }
                                else if( isnan(cj11array[0]) )
                                {
                                    // probably any value will work
//                                    j11valid[0] = true;
//                                    cj11array[0] = 1;
//                                    sj11array[0] = 0;
//                                    j11array[0] = 0;
                                }
                                for(int ij11 = 0; ij11 < 2; ++ij11)
                                {
                                    if( !j11valid[ij11] )
                                    {
                                        continue;
                                    }
                                    _ij11[0] = ij11;
                                    _ij11[1] = -1;
                                    for(int iij11 = ij11+1; iij11 < 2; ++iij11)
                                    {
                                        if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j11valid[iij11]=false;
//                                            _ij11[1] = iij11;
//                                            break;
                                        }
                                    }
                                    j11 = j11array[ij11];
                                    cj11 = cj11array[ij11];
                                    sj11 = sj11array[ij11];

                                    {
                                        IkReal j10eval[3];
                                        IkReal x237=(px*sj9);
                                        IkReal x238=((3300.0)*cj11);
                                        IkReal x239=(cj9*py);
                                        IkReal x240=((3300.0)*sj11);
                                        j10eval[0]=((1.00378787878788)+cj11);
                                        j10eval[1]=((IKabs(((((3600.0)*pz))+(((-1188.0)*sj11))+((x237*x240))+((pz*x238))+(((-1.0)*x239*x240)))))+(IKabs(((-1296.0)+((x237*x238))+(((-1.0)*pz*x240))+(((3600.0)*x237))+(((-3600.0)*x239))+(((-1.0)*x238*x239))+(((-1188.0)*cj11))))));
                                        j10eval[2]=IKsign(((2385.0)+(((2376.0)*cj11))));
                                        if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j10eval[3];
//                                                IkReal x241=(cj9*py);
//                                                IkReal x242=((2.77777777777778)*cj11);
//                                                IkReal x243=(pz*sj11);
//                                                IkReal x244=(px*sj9);
//                                                IkReal x245=((100.0)*pz);
//                                                IkReal x246=((33.0)*cj11);
//                                                j10eval[0]=((1.09090909090909)+(((-1.0)*x242*x244))+(((-3.03030303030303)*x244))+cj11+(((-2.77777777777778)*x243))+(((3.03030303030303)*x241))+((x241*x242)));
//                                                j10eval[1]=IKsign(((12.96)+(((36.0)*x241))+(((-33.0)*x243))+((x241*x246))+(((-36.0)*x244))+(((-1.0)*x244*x246))+(((11.88)*cj11))));
//                                                j10eval[2]=((IKabs(((((-10.89)*cj11*sj11))+((x241*x245))+(((36.0)*pz))+(((-11.88)*sj11))+(((-1.0)*x244*x245)))))+(IKabs(((-12.96)+(((-10.89)*(cj11*cj11)))+(((-23.76)*cj11))+((pz*x245))))));
                                                if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j10eval[3];
//                                                        IkReal x247=cj9*cj9;
//                                                        IkReal x248=px*px;
//                                                        IkReal x249=py*py;
//                                                        IkReal x250=pz*pz;
//                                                        IkReal x251=(px*sj9);
//                                                        IkReal x252=((33.0)*sj11);
//                                                        IkReal x253=((33.0)*cj11);
//                                                        IkReal x254=(cj9*py);
//                                                        IkReal x255=((7.71604938271605)*x247);
//                                                        IkReal x256=((100.0)*x247);
//                                                        j10eval[0]=((1.0)+((x249*x255))+(((7.71604938271605)*x248))+(((-5.55555555555556)*x251))+(((-1.0)*x248*x255))+(((5.55555555555556)*x254))+(((-15.4320987654321)*x251*x254))+(((7.71604938271605)*x250)));
//                                                        j10eval[1]=IKsign(((12.96)+(((-200.0)*x251*x254))+((x249*x256))+(((-1.0)*x248*x256))+(((100.0)*x250))+(((-72.0)*x251))+(((100.0)*x248))+(((72.0)*x254))));
//                                                        j10eval[2]=((IKabs(((((-1.0)*x252*x254))+((pz*x253))+((x251*x252))+(((36.0)*pz))+(((-11.88)*sj11)))))+(IKabs(((-12.96)+((x251*x253))+(((-1.0)*pz*x252))+(((-36.0)*x254))+(((36.0)*x251))+(((-1.0)*x253*x254))+(((-11.88)*cj11))))));
                                                        if (false)//if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j10]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                                bool j10valid[1]= {false};
//                                                                _nj10 = 1;
//                                                                IkReal x257=cj9*cj9;
//                                                                IkReal x258=px*px;
//                                                                IkReal x259=((33.0)*cj11);
//                                                                IkReal x260=(cj9*py);
//                                                                IkReal x261=(px*sj9);
//                                                                IkReal x262=((33.0)*sj11);
//                                                                IkReal x263=((100.0)*x258);
//                                                                CheckValue<IkReal> x264=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((12.96)+(((-72.0)*x261))+(((72.0)*x260))+(((100.0)*(pz*pz)))+x263+(((-200.0)*x260*x261))+(((-1.0)*x257*x263))+(((100.0)*x257*(py*py))))),-1);
                                                                if (false)//if(!x264.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x265 = IKatan2WithCheck(IkReal((((pz*x259))+(((36.0)*pz))+((x261*x262))+(((-11.88)*sj11))+(((-1.0)*x260*x262)))),IkReal(((-12.96)+(((36.0)*x261))+((x259*x261))+(((-1.0)*x259*x260))+(((-11.88)*cj11))+(((-1.0)*pz*x262))+(((-36.0)*x260)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x265.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x264.value)))+(x265.value));
//                                                                sj10array[0]=IKsin(j10array[0]);
//                                                                cj10array[0]=IKcos(j10array[0]);
                                                                if (false)//if( j10array[0] > IKPI )
                                                                {
//                                                                    j10array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j10array[0] < -IKPI )
                                                                {
//                                                                    j10array[0]+=IK2PI;
                                                                }
//                                                                j10valid[0] = true;
//                                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                {
                                                                    if (false)//if( !j10valid[ij10] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij10[0] = ij10;
//                                                                    _ij10[1] = -1;
//                                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                    {
                                                                        if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j10valid[iij10]=false;
//                                                                            _ij10[1] = iij10;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j10 = j10array[ij10];
//                                                                    cj10 = cj10array[ij10];
//                                                                    sj10 = sj10array[ij10];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x266=IKsin(j10);
//                                                                        IkReal x267=IKcos(j10);
//                                                                        IkReal x268=(px*sj9);
//                                                                        IkReal x269=((0.33)*cj11);
//                                                                        IkReal x270=(cj9*py);
//                                                                        IkReal x271=((0.33)*sj11);
//                                                                        IkReal x272=((0.36)*x267);
//                                                                        IkReal x273=((0.36)*x266);
//                                                                        IkReal x274=(pz*x266);
//                                                                        IkReal x275=((1.0)*x267);
//                                                                        IkReal x276=((0.72)*x267);
//                                                                        evalcond[0]=(pz+(((-1.0)*x273))+(((-1.0)*x266*x269))+((x267*x271)));
//                                                                        evalcond[1]=((-0.36)+(((-1.0)*x270))+x268+(((-1.0)*x267*x269))+(((-1.0)*x272))+(((-1.0)*x266*x271)));
//                                                                        evalcond[2]=((-0.36)+((x267*x268))+x274+(((-1.0)*x272))+(((-1.0)*x270*x275))+(((-1.0)*x269)));
//                                                                        evalcond[3]=((((-1.0)*pz*x275))+((x266*x268))+(((-1.0)*x271))+(((-1.0)*x273))+(((-1.0)*x266*x270)));
//                                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.72)*x270))+(((-1.0)*(pz*pz)))+(((-0.2592)*x267))+(((-1.0)*x270*x276))+(((-1.0)*(py*py)))+(((0.72)*x274))+(((0.72)*x268))+((x268*x276)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j9;
//                                                                        vinfos[0].indices[0] = _ij9[0];
//                                                                        vinfos[0].indices[1] = _ij9[1];
//                                                                        vinfos[0].maxsolutions = _nj9;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j10;
//                                                                        vinfos[1].indices[0] = _ij10[0];
//                                                                        vinfos[1].indices[1] = _ij10[1];
//                                                                        vinfos[1].maxsolutions = _nj10;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j11;
//                                                                        vinfos[2].indices[0] = _ij11[0];
//                                                                        vinfos[2].indices[1] = _ij11[1];
//                                                                        vinfos[2].maxsolutions = _nj11;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                                        bool j10valid[1]= {false};
//                                                        _nj10 = 1;
//                                                        IkReal x277=(cj9*py);
//                                                        IkReal x278=((33.0)*cj11);
//                                                        IkReal x279=((100.0)*pz);
//                                                        IkReal x280=(px*sj9);
//                                                        CheckValue<IkReal> x281 = IKatan2WithCheck(IkReal(((((-10.89)*cj11*sj11))+((x277*x279))+(((36.0)*pz))+(((-11.88)*sj11))+(((-1.0)*x279*x280)))),IkReal(((-12.96)+(((-10.89)*(cj11*cj11)))+(((-23.76)*cj11))+((pz*x279)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x281.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x282=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((12.96)+(((36.0)*x277))+(((-33.0)*pz*sj11))+((x277*x278))+(((-36.0)*x280))+(((-1.0)*x278*x280))+(((11.88)*cj11)))),-1);
                                                        if (false)//if(!x282.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j10array[0]=((-1.5707963267949)+(x281.value)+(((1.5707963267949)*(x282.value))));
//                                                        sj10array[0]=IKsin(j10array[0]);
//                                                        cj10array[0]=IKcos(j10array[0]);
                                                        if (false)//if( j10array[0] > IKPI )
                                                        {
//                                                            j10array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j10array[0] < -IKPI )
                                                        {
//                                                            j10array[0]+=IK2PI;
                                                        }
//                                                        j10valid[0] = true;
//                                                        for(int ij10 = 0; ij10 < 1; ++ij10)
                                                        {
                                                            if (false)//if( !j10valid[ij10] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij10[0] = ij10;
//                                                            _ij10[1] = -1;
//                                                            for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                            {
                                                                if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j10valid[iij10]=false;
//                                                                    _ij10[1] = iij10;
//                                                                    break;
                                                                }
                                                            }
//                                                            j10 = j10array[ij10];
//                                                            cj10 = cj10array[ij10];
//                                                            sj10 = sj10array[ij10];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x283=IKsin(j10);
//                                                                IkReal x284=IKcos(j10);
//                                                                IkReal x285=(px*sj9);
//                                                                IkReal x286=((0.33)*cj11);
//                                                                IkReal x287=(cj9*py);
//                                                                IkReal x288=((0.33)*sj11);
//                                                                IkReal x289=((0.36)*x284);
//                                                                IkReal x290=((0.36)*x283);
//                                                                IkReal x291=(pz*x283);
//                                                                IkReal x292=((1.0)*x284);
//                                                                IkReal x293=((0.72)*x284);
//                                                                evalcond[0]=(((x284*x288))+(((-1.0)*x290))+pz+(((-1.0)*x283*x286)));
//                                                                evalcond[1]=((-0.36)+x285+(((-1.0)*x287))+(((-1.0)*x284*x286))+(((-1.0)*x289))+(((-1.0)*x283*x288)));
//                                                                evalcond[2]=((-0.36)+((x284*x285))+x291+(((-1.0)*x287*x292))+(((-1.0)*x286))+(((-1.0)*x289)));
//                                                                evalcond[3]=((((-1.0)*pz*x292))+(((-1.0)*x290))+(((-1.0)*x288))+(((-1.0)*x283*x287))+((x283*x285)));
//                                                                evalcond[4]=((-0.1503)+(((-0.2592)*x284))+(((0.72)*x291))+(((-1.0)*(px*px)))+(((-0.72)*x287))+(((0.72)*x285))+((x285*x293))+(((-1.0)*(pz*pz)))+(((-1.0)*x287*x293))+(((-1.0)*(py*py))));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j9;
//                                                                vinfos[0].indices[0] = _ij9[0];
//                                                                vinfos[0].indices[1] = _ij9[1];
//                                                                vinfos[0].maxsolutions = _nj9;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j10;
//                                                                vinfos[1].indices[0] = _ij10[0];
//                                                                vinfos[1].indices[1] = _ij10[1];
//                                                                vinfos[1].maxsolutions = _nj10;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j11;
//                                                                vinfos[2].indices[0] = _ij11[0];
//                                                                vinfos[2].indices[1] = _ij11[1];
//                                                                vinfos[2].maxsolutions = _nj11;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                bool j10valid[1]= {false};
                                                _nj10 = 1;
                                                IkReal x294=((3300.0)*cj11);
                                                IkReal x295=(cj9*py);
                                                IkReal x296=((3300.0)*sj11);
                                                IkReal x297=(px*sj9);
                                                CheckValue<IkReal> x298 = IKatan2WithCheck(IkReal(((((3600.0)*pz))+(((-1188.0)*sj11))+((pz*x294))+(((-1.0)*x295*x296))+((x296*x297)))),IkReal(((-1296.0)+(((3600.0)*x297))+(((-1.0)*pz*x296))+(((-3600.0)*x295))+(((-1188.0)*cj11))+((x294*x297))+(((-1.0)*x294*x295)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x298.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x299=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((2385.0)+(((2376.0)*cj11)))),-1);
                                                if(!x299.valid)
                                                {
//                                                    continue;
                                                }
                                                j10array[0]=((-1.5707963267949)+(x298.value)+(((1.5707963267949)*(x299.value))));
                                                sj10array[0]=IKsin(j10array[0]);
                                                cj10array[0]=IKcos(j10array[0]);
                                                if( j10array[0] > IKPI )
                                                {
//                                                    j10array[0]-=IK2PI;
                                                }
                                                else if( j10array[0] < -IKPI )
                                                {
//                                                    j10array[0]+=IK2PI;
                                                }
                                                j10valid[0] = true;
                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                {
                                                    if( !j10valid[ij10] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij10[0] = ij10;
                                                    _ij10[1] = -1;
                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                    {
                                                        if (false)//if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j10valid[iij10]=false;
//                                                            _ij10[1] = iij10;
//                                                            break;
                                                        }
                                                    }
                                                    j10 = j10array[ij10];
                                                    cj10 = cj10array[ij10];
                                                    sj10 = sj10array[ij10];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x300=IKsin(j10);
                                                        IkReal x301=IKcos(j10);
                                                        IkReal x302=(px*sj9);
                                                        IkReal x303=((0.33)*cj11);
                                                        IkReal x304=(cj9*py);
                                                        IkReal x305=((0.33)*sj11);
                                                        IkReal x306=((0.36)*x301);
                                                        IkReal x307=((0.36)*x300);
                                                        IkReal x308=(pz*x300);
                                                        IkReal x309=((1.0)*x301);
                                                        IkReal x310=((0.72)*x301);
                                                        evalcond[0]=(((x301*x305))+pz+(((-1.0)*x300*x303))+(((-1.0)*x307)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x301*x303))+(((-1.0)*x304))+x302+(((-1.0)*x300*x305))+(((-1.0)*x306)));
                                                        evalcond[2]=((-0.36)+((x301*x302))+x308+(((-1.0)*x304*x309))+(((-1.0)*x306))+(((-1.0)*x303)));
                                                        evalcond[3]=((((-1.0)*x300*x304))+(((-1.0)*pz*x309))+((x300*x302))+(((-1.0)*x307))+(((-1.0)*x305)));
                                                        evalcond[4]=((-0.1503)+((x302*x310))+(((0.72)*x302))+(((0.72)*x308))+(((-1.0)*(px*px)))+(((-0.2592)*x301))+(((-1.0)*x304*x310))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-0.72)*x304)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j9;
                                                        vinfos[0].indices[0] = _ij9[0];
                                                        vinfos[0].indices[1] = _ij9[1];
                                                        vinfos[0].maxsolutions = _nj9;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j10;
                                                        vinfos[1].indices[0] = _ij10[0];
                                                        vinfos[1].indices[1] = _ij10[1];
                                                        vinfos[1].maxsolutions = _nj10;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j11;
                                                        vinfos[2].indices[0] = _ij11[0];
                                                        vinfos[2].indices[1] = _ij11[1];
                                                        vinfos[2].maxsolutions = _nj11;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Hunker (f7071dcf5459c249fade087ece139e54)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
