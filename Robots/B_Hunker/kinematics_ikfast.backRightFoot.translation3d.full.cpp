#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_backRightFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-19 12:37:12.337642
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return -IKPI_2;
    }
    else if( f >= 1 )
    {
        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if( f < 0 )
    {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 )
    {
        ret.value = f*f;
    }
    else if( num == 3 )
    {
        ret.value = f*f*f;
    }
    else
    {
        ret.value = 1.0;
        while(num>0)
        {
            if( num & 1 )
            {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 )
    {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKsin(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x0);
    x8=((0.33)*x2);
    x9=(x1*x3);
    IkReal x10=((1.0)*x7);
    IkReal x11=((1.0)*x0);
    eetrans[0]=((-0.36)+(((-1.0)*x11*x4*x6))+(((-1.0)*x10))+(((-1.0)*x1*x10))+(((-1.0)*x1*x11*x8)));
    eetrans[1]=((((-0.36)*x3))+(((-0.36)*x9))+(((-1.0)*x3*x4*x6))+(((-1.0)*x8*x9)));
    eetrans[2]=((0.15)+((x4*x8))+(((-1.0)*x1*x6))+(((0.36)*x4)));
}

IKFAST_API int GetNumFreeParameters()
{
    return 0;
}
IKFAST_API int* GetFreeParameters()
{
    return NULL;
}
IKFAST_API int GetNumJoints()
{
    return 3;
}

IKFAST_API int GetIkRealSize()
{
    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j3=numeric_limits<IkReal>::quiet_NaN();
        _ij3[0] = -1;
        _ij3[1] = -1;
        _nj3 = -1;
        j4=numeric_limits<IkReal>::quiet_NaN();
        _ij4[0] = -1;
        _ij4[1] = -1;
        _nj4 = -1;
        j5=numeric_limits<IkReal>::quiet_NaN();
        _ij5[0] = -1;
        _ij5[1] = -1;
        _nj5 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((0.36)+px);
            new_py=py;
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j3eval[1];
                j3eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j3eval[0]) < 0.0000010000000000  )
                {
                    continue; // 0 cases reached

                }
                else
                {
                    {
                        IkReal j3array[2], cj3array[2], sj3array[2];
                        bool j3valid[2]= {false};
                        _nj3 = 2;
                        CheckValue<IkReal> x13 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x13.valid)
                        {
                            continue;
                        }
                        IkReal x12=x13.value;
                        j3array[0]=((-1.0)*x12);
                        sj3array[0]=IKsin(j3array[0]);
                        cj3array[0]=IKcos(j3array[0]);
                        j3array[1]=((3.14159265358979)+(((-1.0)*x12)));
                        sj3array[1]=IKsin(j3array[1]);
                        cj3array[1]=IKcos(j3array[1]);
                        if( j3array[0] > IKPI )
                        {
                            j3array[0]-=IK2PI;
                        }
                        else if( j3array[0] < -IKPI )
                        {
                            j3array[0]+=IK2PI;
                        }
                        j3valid[0] = true;
                        if( j3array[1] > IKPI )
                        {
                            j3array[1]-=IK2PI;
                        }
                        else if( j3array[1] < -IKPI )
                        {
                            j3array[1]+=IK2PI;
                        }
                        j3valid[1] = true;
                        for(int ij3 = 0; ij3 < 2; ++ij3)
                        {
                            if( !j3valid[ij3] )
                            {
                                continue;
                            }
                            _ij3[0] = ij3;
                            _ij3[1] = -1;
                            for(int iij3 = ij3+1; iij3 < 2; ++iij3)
                            {
                                if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                {
                                    j3valid[iij3]=false;
                                    _ij3[1] = iij3;
                                    break;
                                }
                            }
                            j3 = j3array[ij3];
                            cj3 = cj3array[ij3];
                            sj3 = sj3array[ij3];

                            {
                                IkReal j5array[2], cj5array[2], sj5array[2];
                                bool j5valid[2]= {false};
                                _nj5 = 2;
                                cj5array[0]=((-0.458333333333333)+(((3.03030303030303)*py*sj3))+(((4.20875420875421)*(pz*pz)))+(((4.20875420875421)*(py*py)))+(((4.20875420875421)*(px*px)))+(((3.03030303030303)*cj3*px)));
                                if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j5valid[0] = j5valid[1] = true;
                                    j5array[0] = IKacos(cj5array[0]);
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[1] = cj5array[0];
                                    j5array[1] = -j5array[0];
                                    sj5array[1] = -sj5array[0];
                                }
                                else if( isnan(cj5array[0]) )
                                {
                                    // probably any value will work
                                    j5valid[0] = true;
                                    cj5array[0] = 1;
                                    sj5array[0] = 0;
                                    j5array[0] = 0;
                                }
                                for(int ij5 = 0; ij5 < 2; ++ij5)
                                {
                                    if( !j5valid[ij5] )
                                    {
                                        continue;
                                    }
                                    _ij5[0] = ij5;
                                    _ij5[1] = -1;
                                    for(int iij5 = ij5+1; iij5 < 2; ++iij5)
                                    {
                                        if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
                                        {
                                            j5valid[iij5]=false;
                                            _ij5[1] = iij5;
                                            break;
                                        }
                                    }
                                    j5 = j5array[ij5];
                                    cj5 = cj5array[ij5];
                                    sj5 = sj5array[ij5];

                                    {
                                        IkReal j4eval[3];
                                        IkReal x14=(py*sj3);
                                        IkReal x15=(cj3*px);
                                        IkReal x16=((3300.0)*pz);
                                        IkReal x17=((3300.0)*sj5);
                                        IkReal x18=((3300.0)*cj5);
                                        j4eval[0]=((1.00378787878788)+cj5);
                                        j4eval[1]=((IKabs(((-1296.0)+(((-3600.0)*x14))+(((-3600.0)*x15))+(((-1.0)*x14*x18))+(((-1188.0)*cj5))+(((-1.0)*sj5*x16))+(((-1.0)*x15*x18)))))+(IKabs(((((3600.0)*pz))+((cj5*x16))+(((-1.0)*x14*x17))+(((-1188.0)*sj5))+(((-1.0)*x15*x17))))));
                                        j4eval[2]=IKsign(((2385.0)+(((2376.0)*cj5))));
                                        if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j4eval[3];
                                                IkReal x19=(cj3*px);
                                                IkReal x20=((100.0)*pz);
                                                IkReal x21=((2.77777777777778)*cj5);
                                                IkReal x22=(py*sj3);
                                                IkReal x23=((33.0)*cj5);
                                                IkReal x24=(pz*sj5);
                                                j4eval[0]=((1.09090909090909)+cj5+((x21*x22))+((x19*x21))+(((3.03030303030303)*x22))+(((3.03030303030303)*x19))+(((-2.77777777777778)*x24)));
                                                j4eval[1]=((IKabs(((((-11.88)*sj5))+((x19*x20))+(((36.0)*pz))+(((-10.89)*cj5*sj5))+((x20*x22)))))+(IKabs(((-12.96)+((pz*x20))+(((-10.89)*(cj5*cj5)))+(((-23.76)*cj5))))));
                                                j4eval[2]=IKsign(((12.96)+((x22*x23))+(((-33.0)*x24))+((x19*x23))+(((11.88)*cj5))+(((36.0)*x22))+(((36.0)*x19))));
                                                if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j4eval[3];
                                                        IkReal x25=cj3*cj3;
                                                        IkReal x26=py*py;
                                                        IkReal x27=pz*pz;
                                                        IkReal x28=px*px;
                                                        IkReal x29=(cj3*px);
                                                        IkReal x30=((33.0)*sj5);
                                                        IkReal x31=(py*sj3);
                                                        IkReal x32=((33.0)*cj5);
                                                        IkReal x33=((7.71604938271605)*x26);
                                                        IkReal x34=((100.0)*x26);
                                                        IkReal x35=(x25*x28);
                                                        j4eval[0]=((1.0)+(((7.71604938271605)*x35))+(((15.4320987654321)*x29*x31))+(((5.55555555555556)*x31))+x33+(((7.71604938271605)*x27))+(((-1.0)*x25*x33))+(((5.55555555555556)*x29)));
                                                        j4eval[1]=IKsign(((12.96)+(((72.0)*x29))+(((100.0)*x27))+(((72.0)*x31))+x34+(((100.0)*x35))+(((-1.0)*x25*x34))+(((200.0)*x29*x31))));
                                                        j4eval[2]=((IKabs(((((-1.0)*x29*x30))+(((-11.88)*sj5))+((pz*x32))+(((-1.0)*x30*x31))+(((36.0)*pz)))))+(IKabs(((-12.96)+(((-1.0)*x29*x32))+(((-1.0)*pz*x30))+(((-1.0)*x31*x32))+(((-36.0)*x29))+(((-11.88)*cj5))+(((-36.0)*x31))))));
                                                        if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                        {
                                                            continue; // 0 cases reached

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                bool j4valid[1]= {false};
                                                                _nj4 = 1;
                                                                IkReal x36=cj3*cj3;
                                                                IkReal x37=py*py;
                                                                IkReal x38=((33.0)*sj5);
                                                                IkReal x39=(cj3*px);
                                                                IkReal x40=(py*sj3);
                                                                IkReal x41=((33.0)*cj5);
                                                                IkReal x42=((100.0)*x36);
                                                                CheckValue<IkReal> x43=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+(((-1.0)*x37*x42))+(((200.0)*x39*x40))+(((72.0)*x40))+(((100.0)*(pz*pz)))+(((72.0)*x39))+(((100.0)*x37))+((x42*(px*px))))),-1);
                                                                if(!x43.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x44 = IKatan2WithCheck(IkReal(((((-11.88)*sj5))+(((-1.0)*x38*x39))+((pz*x41))+(((-1.0)*x38*x40))+(((36.0)*pz)))),IkReal(((-12.96)+(((-1.0)*pz*x38))+(((-1.0)*x39*x41))+(((-1.0)*x40*x41))+(((-11.88)*cj5))+(((-36.0)*x40))+(((-36.0)*x39)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if(!x44.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x43.value)))+(x44.value));
                                                                sj4array[0]=IKsin(j4array[0]);
                                                                cj4array[0]=IKcos(j4array[0]);
                                                                if( j4array[0] > IKPI )
                                                                {
                                                                    j4array[0]-=IK2PI;
                                                                }
                                                                else if( j4array[0] < -IKPI )
                                                                {
                                                                    j4array[0]+=IK2PI;
                                                                }
                                                                j4valid[0] = true;
                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                {
                                                                    if( !j4valid[ij4] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij4[0] = ij4;
                                                                    _ij4[1] = -1;
                                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                    {
                                                                        if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                        {
                                                                            j4valid[iij4]=false;
                                                                            _ij4[1] = iij4;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j4 = j4array[ij4];
                                                                    cj4 = cj4array[ij4];
                                                                    sj4 = sj4array[ij4];
                                                                    {
                                                                        IkReal evalcond[5];
                                                                        IkReal x45=IKsin(j4);
                                                                        IkReal x46=IKcos(j4);
                                                                        IkReal x47=((0.33)*cj5);
                                                                        IkReal x48=((0.33)*sj5);
                                                                        IkReal x49=((0.36)*x46);
                                                                        IkReal x50=((0.36)*x45);
                                                                        IkReal x51=((0.33)*x46);
                                                                        IkReal x52=((1.0)*cj3*px);
                                                                        IkReal x53=(pz*x45);
                                                                        IkReal x54=((1.0)*py*sj3);
                                                                        IkReal x55=((0.72)*cj3*px);
                                                                        IkReal x56=(py*sj3*x46);
                                                                        evalcond[0]=(((x46*x48))+(((-1.0)*x45*x47))+pz+(((-1.0)*x50)));
                                                                        evalcond[1]=((-0.36)+(((-1.0)*x49))+(((-1.0)*x45*x48))+(((-1.0)*x54))+(((-1.0)*x52))+(((-1.0)*x46*x47)));
                                                                        evalcond[2]=((-0.36)+(((-1.0)*x47))+(((-1.0)*x49))+(((-1.0)*x46*x54))+(((-1.0)*x46*x52))+x53);
                                                                        evalcond[3]=((((-1.0)*x45*x52))+(((-1.0)*x45*x54))+(((-1.0)*x48))+(((-1.0)*pz*x46))+(((-1.0)*x50)));
                                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.2592)*x46))+(((-1.0)*x46*x55))+(((0.72)*x53))+(((-0.72)*py*sj3))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*x55))+(((-0.72)*x56)));
                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j3;
                                                                        vinfos[0].indices[0] = _ij3[0];
                                                                        vinfos[0].indices[1] = _ij3[1];
                                                                        vinfos[0].maxsolutions = _nj3;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j4;
                                                                        vinfos[1].indices[0] = _ij4[0];
                                                                        vinfos[1].indices[1] = _ij4[1];
                                                                        vinfos[1].maxsolutions = _nj4;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j5;
                                                                        vinfos[2].indices[0] = _ij5[0];
                                                                        vinfos[2].indices[1] = _ij5[1];
                                                                        vinfos[2].maxsolutions = _nj5;
                                                                        int vfree[0];
                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                        bool j4valid[1]= {false};
                                                        _nj4 = 1;
                                                        IkReal x57=(cj3*px);
                                                        IkReal x58=((100.0)*pz);
                                                        IkReal x59=(py*sj3);
                                                        IkReal x60=((33.0)*cj5);
                                                        CheckValue<IkReal> x61=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+((x59*x60))+(((11.88)*cj5))+(((36.0)*x57))+(((36.0)*x59))+(((-33.0)*pz*sj5))+((x57*x60)))),-1);
                                                        if(!x61.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x62 = IKatan2WithCheck(IkReal(((((-11.88)*sj5))+((x58*x59))+((x57*x58))+(((36.0)*pz))+(((-10.89)*cj5*sj5)))),IkReal(((-12.96)+(((-10.89)*(cj5*cj5)))+((pz*x58))+(((-23.76)*cj5)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if(!x62.valid)
                                                        {
                                                            continue;
                                                        }
                                                        j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x61.value)))+(x62.value));
                                                        sj4array[0]=IKsin(j4array[0]);
                                                        cj4array[0]=IKcos(j4array[0]);
                                                        if( j4array[0] > IKPI )
                                                        {
                                                            j4array[0]-=IK2PI;
                                                        }
                                                        else if( j4array[0] < -IKPI )
                                                        {
                                                            j4array[0]+=IK2PI;
                                                        }
                                                        j4valid[0] = true;
                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                        {
                                                            if( !j4valid[ij4] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij4[0] = ij4;
                                                            _ij4[1] = -1;
                                                            for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                            {
                                                                if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j4valid[iij4]=false;
                                                                    _ij4[1] = iij4;
                                                                    break;
                                                                }
                                                            }
                                                            j4 = j4array[ij4];
                                                            cj4 = cj4array[ij4];
                                                            sj4 = sj4array[ij4];
                                                            {
                                                                IkReal evalcond[5];
                                                                IkReal x63=IKsin(j4);
                                                                IkReal x64=IKcos(j4);
                                                                IkReal x65=((0.33)*cj5);
                                                                IkReal x66=((0.33)*sj5);
                                                                IkReal x67=((0.36)*x64);
                                                                IkReal x68=((0.36)*x63);
                                                                IkReal x69=((0.33)*x64);
                                                                IkReal x70=((1.0)*cj3*px);
                                                                IkReal x71=(pz*x63);
                                                                IkReal x72=((1.0)*py*sj3);
                                                                IkReal x73=((0.72)*cj3*px);
                                                                IkReal x74=(py*sj3*x64);
                                                                evalcond[0]=(pz+(((-1.0)*x68))+((x64*x66))+(((-1.0)*x63*x65)));
                                                                evalcond[1]=((-0.36)+(((-1.0)*x72))+(((-1.0)*x70))+(((-1.0)*x64*x65))+(((-1.0)*x67))+(((-1.0)*x63*x66)));
                                                                evalcond[2]=((-0.36)+x71+(((-1.0)*x67))+(((-1.0)*x65))+(((-1.0)*x64*x70))+(((-1.0)*x64*x72)));
                                                                evalcond[3]=((((-1.0)*pz*x64))+(((-1.0)*x63*x72))+(((-1.0)*x63*x70))+(((-1.0)*x68))+(((-1.0)*x66)));
                                                                evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-1.0)*x73))+(((-0.2592)*x64))+(((-0.72)*py*sj3))+(((-1.0)*(pz*pz)))+(((-0.72)*x74))+(((-1.0)*(py*py)))+(((-1.0)*x64*x73))+(((0.72)*x71)));
                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j3;
                                                                vinfos[0].indices[0] = _ij3[0];
                                                                vinfos[0].indices[1] = _ij3[1];
                                                                vinfos[0].maxsolutions = _nj3;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j4;
                                                                vinfos[1].indices[0] = _ij4[0];
                                                                vinfos[1].indices[1] = _ij4[1];
                                                                vinfos[1].maxsolutions = _nj4;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j5;
                                                                vinfos[2].indices[0] = _ij5[0];
                                                                vinfos[2].indices[1] = _ij5[1];
                                                                vinfos[2].maxsolutions = _nj5;
                                                                int vfree[0];
                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                bool j4valid[1]= {false};
                                                _nj4 = 1;
                                                IkReal x75=(py*sj3);
                                                IkReal x76=((3300.0)*cj5);
                                                IkReal x77=(cj3*px);
                                                IkReal x78=((3300.0)*sj5);
                                                CheckValue<IkReal> x79=IKPowWithIntegerCheck<IkReal>(IKsign(((2385.0)+(((2376.0)*cj5)))),-1);
                                                if(!x79.valid)
                                                {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x80 = IKatan2WithCheck(IkReal((((pz*x76))+(((3600.0)*pz))+(((-1188.0)*sj5))+(((-1.0)*x77*x78))+(((-1.0)*x75*x78)))),IkReal(((-1296.0)+(((-1188.0)*cj5))+(((-3600.0)*x77))+(((-3600.0)*x75))+(((-1.0)*x76*x77))+(((-1.0)*pz*x78))+(((-1.0)*x75*x76)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x80.valid)
                                                {
                                                    continue;
                                                }
                                                j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x79.value)))+(x80.value));
                                                sj4array[0]=IKsin(j4array[0]);
                                                cj4array[0]=IKcos(j4array[0]);
                                                if( j4array[0] > IKPI )
                                                {
                                                    j4array[0]-=IK2PI;
                                                }
                                                else if( j4array[0] < -IKPI )
                                                {
                                                    j4array[0]+=IK2PI;
                                                }
                                                j4valid[0] = true;
                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                {
                                                    if( !j4valid[ij4] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij4[0] = ij4;
                                                    _ij4[1] = -1;
                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                    {
                                                        if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j4valid[iij4]=false;
                                                            _ij4[1] = iij4;
                                                            break;
                                                        }
                                                    }
                                                    j4 = j4array[ij4];
                                                    cj4 = cj4array[ij4];
                                                    sj4 = sj4array[ij4];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x81=IKsin(j4);
                                                        IkReal x82=IKcos(j4);
                                                        IkReal x83=((0.33)*cj5);
                                                        IkReal x84=((0.33)*sj5);
                                                        IkReal x85=((0.36)*x82);
                                                        IkReal x86=((0.36)*x81);
                                                        IkReal x87=((0.33)*x82);
                                                        IkReal x88=((1.0)*cj3*px);
                                                        IkReal x89=(pz*x81);
                                                        IkReal x90=((1.0)*py*sj3);
                                                        IkReal x91=((0.72)*cj3*px);
                                                        IkReal x92=(py*sj3*x82);
                                                        evalcond[0]=((((-1.0)*x81*x83))+((x82*x84))+pz+(((-1.0)*x86)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x81*x84))+(((-1.0)*x82*x83))+(((-1.0)*x90))+(((-1.0)*x88))+(((-1.0)*x85)));
                                                        evalcond[2]=((-0.36)+(((-1.0)*x82*x90))+(((-1.0)*x82*x88))+x89+(((-1.0)*x83))+(((-1.0)*x85)));
                                                        evalcond[3]=((((-1.0)*x81*x88))+(((-1.0)*pz*x82))+(((-1.0)*x84))+(((-1.0)*x86))+(((-1.0)*x81*x90)));
                                                        evalcond[4]=((-0.1503)+(((-1.0)*x82*x91))+(((-1.0)*(px*px)))+(((-0.72)*x92))+(((-0.2592)*x82))+(((-0.72)*py*sj3))+(((-1.0)*(pz*pz)))+(((-1.0)*x91))+(((-1.0)*(py*py)))+(((0.72)*x89)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j3;
                                                        vinfos[0].indices[0] = _ij3[0];
                                                        vinfos[0].indices[1] = _ij3[1];
                                                        vinfos[0].maxsolutions = _nj3;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j4;
                                                        vinfos[1].indices[0] = _ij4[0];
                                                        vinfos[1].indices[1] = _ij4[1];
                                                        vinfos[1].maxsolutions = _nj4;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j5;
                                                        vinfos[2].indices[0] = _ij5[0];
                                                        vinfos[2].indices[1] = _ij5[1];
                                                        vinfos[2].maxsolutions = _nj5;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
    return "<robot:GenericRobot - Hunker (f7071dcf5459c249fade087ece139e54)>";
}

IKFAST_API const char* GetIkFastVersion()
{
    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
