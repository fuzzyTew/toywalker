#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_frontLeftFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-19 12:37:10.070700
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return -IKPI_2;
    }
    else if( f >= 1 )
    {
        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if( f < 0 )
    {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 )
    {
        ret.value = f*f;
    }
    else if( num == 3 )
    {
        ret.value = f*f*f;
    }
    else
    {
        ret.value = 1.0;
        while(num>0)
        {
            if( num & 1 )
            {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 )
    {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKsin(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x0);
    x8=((0.33)*x2);
    x9=(x1*x3);
    eetrans[0]=((0.36)+((x1*x7))+x7+((x0*x4*x6))+((x0*x1*x8)));
    eetrans[1]=(((x8*x9))+((x3*x4*x6))+(((0.36)*x3))+(((0.36)*x9)));
    eetrans[2]=((0.15)+(((-0.36)*x4))+((x1*x6))+(((-1.0)*x4*x8)));
}

IKFAST_API int GetNumFreeParameters()
{
    return 0;
}
IKFAST_API int* GetFreeParameters()
{
    return NULL;
}
IKFAST_API int GetNumJoints()
{
    return 3;
}

IKFAST_API int GetIkRealSize()
{
    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j6=numeric_limits<IkReal>::quiet_NaN();
        _ij6[0] = -1;
        _ij6[1] = -1;
        _nj6 = -1;
        j7=numeric_limits<IkReal>::quiet_NaN();
        _ij7[0] = -1;
        _ij7[1] = -1;
        _nj7 = -1;
        j8=numeric_limits<IkReal>::quiet_NaN();
        _ij8[0] = -1;
        _ij8[1] = -1;
        _nj8 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((-0.36)+px);
            new_py=py;
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j6eval[1];
                j6eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j6eval[0]) < 0.0000010000000000  )
                {
                    continue; // 0 cases reached

                }
                else
                {
                    {
                        IkReal j6array[2], cj6array[2], sj6array[2];
                        bool j6valid[2]= {false};
                        _nj6 = 2;
                        CheckValue<IkReal> x11 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x11.valid)
                        {
                            continue;
                        }
                        IkReal x10=x11.value;
                        j6array[0]=((-1.0)*x10);
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        j6array[1]=((3.14159265358979)+(((-1.0)*x10)));
                        sj6array[1]=IKsin(j6array[1]);
                        cj6array[1]=IKcos(j6array[1]);
                        if( j6array[0] > IKPI )
                        {
                            j6array[0]-=IK2PI;
                        }
                        else if( j6array[0] < -IKPI )
                        {
                            j6array[0]+=IK2PI;
                        }
                        j6valid[0] = true;
                        if( j6array[1] > IKPI )
                        {
                            j6array[1]-=IK2PI;
                        }
                        else if( j6array[1] < -IKPI )
                        {
                            j6array[1]+=IK2PI;
                        }
                        j6valid[1] = true;
                        for(int ij6 = 0; ij6 < 2; ++ij6)
                        {
                            if( !j6valid[ij6] )
                            {
                                continue;
                            }
                            _ij6[0] = ij6;
                            _ij6[1] = -1;
                            for(int iij6 = ij6+1; iij6 < 2; ++iij6)
                            {
                                if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                {
                                    j6valid[iij6]=false;
                                    _ij6[1] = iij6;
                                    break;
                                }
                            }
                            j6 = j6array[ij6];
                            cj6 = cj6array[ij6];
                            sj6 = sj6array[ij6];

                            {
                                IkReal j8array[2], cj8array[2], sj8array[2];
                                bool j8valid[2]= {false};
                                _nj8 = 2;
                                cj8array[0]=((-0.458333333333333)+(((-3.03030303030303)*cj6*px))+(((4.20875420875421)*(pz*pz)))+(((-3.03030303030303)*py*sj6))+(((4.20875420875421)*(py*py)))+(((4.20875420875421)*(px*px))));
                                if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j8valid[0] = j8valid[1] = true;
                                    j8array[0] = IKacos(cj8array[0]);
                                    sj8array[0] = IKsin(j8array[0]);
                                    cj8array[1] = cj8array[0];
                                    j8array[1] = -j8array[0];
                                    sj8array[1] = -sj8array[0];
                                }
                                else if( isnan(cj8array[0]) )
                                {
                                    // probably any value will work
                                    j8valid[0] = true;
                                    cj8array[0] = 1;
                                    sj8array[0] = 0;
                                    j8array[0] = 0;
                                }
                                for(int ij8 = 0; ij8 < 2; ++ij8)
                                {
                                    if( !j8valid[ij8] )
                                    {
                                        continue;
                                    }
                                    _ij8[0] = ij8;
                                    _ij8[1] = -1;
                                    for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                                    {
                                        if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                                        {
                                            j8valid[iij8]=false;
                                            _ij8[1] = iij8;
                                            break;
                                        }
                                    }
                                    j8 = j8array[ij8];
                                    cj8 = cj8array[ij8];
                                    sj8 = sj8array[ij8];

                                    {
                                        IkReal j7eval[3];
                                        IkReal x12=(cj6*px);
                                        IkReal x13=((3300.0)*pz);
                                        IkReal x14=((3300.0)*py*sj6);
                                        j7eval[0]=((1.00378787878788)+cj8);
                                        j7eval[1]=((IKabs(((-1296.0)+((sj8*x13))+(((3600.0)*x12))+(((-1188.0)*cj8))+((cj8*x14))+(((3300.0)*cj8*x12))+(((3600.0)*py*sj6)))))+(IKabs((((sj8*x14))+(((-1.0)*cj8*x13))+(((-3600.0)*pz))+(((-1188.0)*sj8))+(((3300.0)*sj8*x12))))));
                                        j7eval[2]=IKsign(((2385.0)+(((2376.0)*cj8))));
                                        if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j7eval[3];
                                                IkReal x15=(py*sj6);
                                                IkReal x16=((100.0)*pz);
                                                IkReal x17=(cj6*px);
                                                IkReal x18=(pz*sj8);
                                                IkReal x19=((2.77777777777778)*cj8);
                                                IkReal x20=((33.0)*cj8);
                                                j7eval[0]=((1.09090909090909)+cj8+(((-3.03030303030303)*x15))+(((-3.03030303030303)*x17))+(((2.77777777777778)*x18))+(((-1.0)*x17*x19))+(((-1.0)*x15*x19)));
                                                j7eval[1]=((IKabs(((-12.96)+((pz*x16))+(((-10.89)*(cj8*cj8)))+(((-23.76)*cj8)))))+(IKabs(((((-10.89)*cj8*sj8))+(((-11.88)*sj8))+((x16*x17))+(((-36.0)*pz))+((x15*x16))))));
                                                j7eval[2]=IKsign(((12.96)+(((11.88)*cj8))+(((-1.0)*x17*x20))+(((33.0)*x18))+(((-36.0)*x15))+(((-36.0)*x17))+(((-1.0)*x15*x20))));
                                                if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j7eval[1];
                                                        IkReal x21=((2.77777777777778)*sj8);
                                                        j7eval[0]=((((-1.0)*py*sj6*x21))+sj8+(((-1.0)*cj6*px*x21))+(((-2.77777777777778)*cj8*pz))+(((-3.03030303030303)*pz)));
                                                        if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                        {
                                                            continue; // 0 cases reached

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                bool j7valid[1]= {false};
                                                                _nj7 = 1;
                                                                IkReal x22=((11.88)*sj8);
                                                                IkReal x23=((36.0)*pz);
                                                                IkReal x24=(py*sj6);
                                                                IkReal x25=((3300.0)*sj8);
                                                                IkReal x26=(cj8*pz);
                                                                IkReal x27=((100.0)*pz);
                                                                IkReal x28=(cj6*px);
                                                                IkReal x29=((33.0)*sj8);
                                                                CheckValue<IkReal> x30=IKPowWithIntegerCheck<IkReal>(((((-1.0)*x25*x28))+(((-1.0)*x24*x25))+(((-3300.0)*x26))+(((-3600.0)*pz))+(((1188.0)*sj8))),-1);
                                                                if(!x30.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x31=IKPowWithIntegerCheck<IkReal>(((((-1.0)*x23))+(((-33.0)*x26))+(((-1.0)*x24*x29))+x22+(((-1.0)*x28*x29))),-1);
                                                                if(!x31.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                if( IKabs(((x30.value)*(((-1089.0)+(((1089.0)*(cj8*cj8)))+(((10000.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x31.value)*(((((-10.89)*cj8*sj8))+(((-1.0)*x22))+(((-1.0)*x27*x28))+(((-1.0)*x24*x27))+x23)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x30.value)*(((-1089.0)+(((1089.0)*(cj8*cj8)))+(((10000.0)*(pz*pz)))))))+IKsqr(((x31.value)*(((((-10.89)*cj8*sj8))+(((-1.0)*x22))+(((-1.0)*x27*x28))+(((-1.0)*x24*x27))+x23))))-1) <= IKFAST_SINCOS_THRESH )
                                                                {
                                                                    continue;
                                                                }
                                                                j7array[0]=IKatan2(((x30.value)*(((-1089.0)+(((1089.0)*(cj8*cj8)))+(((10000.0)*(pz*pz)))))), ((x31.value)*(((((-10.89)*cj8*sj8))+(((-1.0)*x22))+(((-1.0)*x27*x28))+(((-1.0)*x24*x27))+x23))));
                                                                sj7array[0]=IKsin(j7array[0]);
                                                                cj7array[0]=IKcos(j7array[0]);
                                                                if( j7array[0] > IKPI )
                                                                {
                                                                    j7array[0]-=IK2PI;
                                                                }
                                                                else if( j7array[0] < -IKPI )
                                                                {
                                                                    j7array[0]+=IK2PI;
                                                                }
                                                                j7valid[0] = true;
                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                {
                                                                    if( !j7valid[ij7] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij7[0] = ij7;
                                                                    _ij7[1] = -1;
                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                    {
                                                                        if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                        {
                                                                            j7valid[iij7]=false;
                                                                            _ij7[1] = iij7;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j7 = j7array[ij7];
                                                                    cj7 = cj7array[ij7];
                                                                    sj7 = sj7array[ij7];
                                                                    {
                                                                        IkReal evalcond[5];
                                                                        IkReal x32=IKsin(j7);
                                                                        IkReal x33=IKcos(j7);
                                                                        IkReal x34=((0.33)*cj8);
                                                                        IkReal x35=(py*sj6);
                                                                        IkReal x36=(cj6*px);
                                                                        IkReal x37=((0.33)*sj8);
                                                                        IkReal x38=((0.36)*x32);
                                                                        IkReal x39=((0.36)*x33);
                                                                        IkReal x40=((0.33)*x33);
                                                                        IkReal x41=(pz*x32);
                                                                        IkReal x42=((0.72)*x36);
                                                                        evalcond[0]=((((-1.0)*x38))+(((-1.0)*x32*x34))+(((-1.0)*pz))+((x33*x37)));
                                                                        evalcond[1]=((-0.36)+(((-1.0)*x39))+(((-1.0)*x32*x37))+(((-1.0)*x33*x34))+x36+x35);
                                                                        evalcond[2]=(((pz*x33))+(((-1.0)*x38))+(((-1.0)*x37))+((x32*x35))+((x32*x36)));
                                                                        evalcond[3]=((-0.36)+(((-1.0)*x41))+(((-1.0)*x39))+(((-1.0)*x34))+((x33*x36))+((x33*x35)));
                                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.2592)*x33))+(((0.72)*x33*x35))+(((-0.72)*x41))+(((0.72)*x35))+x42+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+((x33*x42)));
                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j6;
                                                                        vinfos[0].indices[0] = _ij6[0];
                                                                        vinfos[0].indices[1] = _ij6[1];
                                                                        vinfos[0].maxsolutions = _nj6;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j7;
                                                                        vinfos[1].indices[0] = _ij7[0];
                                                                        vinfos[1].indices[1] = _ij7[1];
                                                                        vinfos[1].maxsolutions = _nj7;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j8;
                                                                        vinfos[2].indices[0] = _ij8[0];
                                                                        vinfos[2].indices[1] = _ij8[1];
                                                                        vinfos[2].maxsolutions = _nj8;
                                                                        int vfree[0];
                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                        bool j7valid[1]= {false};
                                                        _nj7 = 1;
                                                        IkReal x43=((100.0)*pz);
                                                        IkReal x44=(py*sj6);
                                                        IkReal x45=(cj6*px);
                                                        IkReal x46=((33.0)*cj8);
                                                        CheckValue<IkReal> x47=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+(((11.88)*cj8))+(((-1.0)*x45*x46))+(((-1.0)*x44*x46))+(((-36.0)*x45))+(((-36.0)*x44))+(((33.0)*pz*sj8)))),-1);
                                                        if(!x47.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x48 = IKatan2WithCheck(IkReal(((((-10.89)*cj8*sj8))+(((-11.88)*sj8))+((x43*x45))+((x43*x44))+(((-36.0)*pz)))),IkReal(((-12.96)+((pz*x43))+(((-10.89)*(cj8*cj8)))+(((-23.76)*cj8)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if(!x48.valid)
                                                        {
                                                            continue;
                                                        }
                                                        j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x47.value)))+(x48.value));
                                                        sj7array[0]=IKsin(j7array[0]);
                                                        cj7array[0]=IKcos(j7array[0]);
                                                        if( j7array[0] > IKPI )
                                                        {
                                                            j7array[0]-=IK2PI;
                                                        }
                                                        else if( j7array[0] < -IKPI )
                                                        {
                                                            j7array[0]+=IK2PI;
                                                        }
                                                        j7valid[0] = true;
                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                        {
                                                            if( !j7valid[ij7] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij7[0] = ij7;
                                                            _ij7[1] = -1;
                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                            {
                                                                if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j7valid[iij7]=false;
                                                                    _ij7[1] = iij7;
                                                                    break;
                                                                }
                                                            }
                                                            j7 = j7array[ij7];
                                                            cj7 = cj7array[ij7];
                                                            sj7 = sj7array[ij7];
                                                            {
                                                                IkReal evalcond[5];
                                                                IkReal x49=IKsin(j7);
                                                                IkReal x50=IKcos(j7);
                                                                IkReal x51=((0.33)*cj8);
                                                                IkReal x52=(py*sj6);
                                                                IkReal x53=(cj6*px);
                                                                IkReal x54=((0.33)*sj8);
                                                                IkReal x55=((0.36)*x49);
                                                                IkReal x56=((0.36)*x50);
                                                                IkReal x57=((0.33)*x50);
                                                                IkReal x58=(pz*x49);
                                                                IkReal x59=((0.72)*x53);
                                                                evalcond[0]=((((-1.0)*x49*x51))+(((-1.0)*pz))+((x50*x54))+(((-1.0)*x55)));
                                                                evalcond[1]=((-0.36)+(((-1.0)*x49*x54))+x53+x52+(((-1.0)*x56))+(((-1.0)*x50*x51)));
                                                                evalcond[2]=(((x49*x53))+((x49*x52))+((pz*x50))+(((-1.0)*x54))+(((-1.0)*x55)));
                                                                evalcond[3]=((-0.36)+((x50*x52))+((x50*x53))+(((-1.0)*x51))+(((-1.0)*x56))+(((-1.0)*x58)));
                                                                evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+((x50*x59))+(((0.72)*x52))+(((-0.2592)*x50))+x59+(((-1.0)*(pz*pz)))+(((0.72)*x50*x52))+(((-1.0)*(py*py)))+(((-0.72)*x58)));
                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j6;
                                                                vinfos[0].indices[0] = _ij6[0];
                                                                vinfos[0].indices[1] = _ij6[1];
                                                                vinfos[0].maxsolutions = _nj6;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j7;
                                                                vinfos[1].indices[0] = _ij7[0];
                                                                vinfos[1].indices[1] = _ij7[1];
                                                                vinfos[1].maxsolutions = _nj7;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j8;
                                                                vinfos[2].indices[0] = _ij8[0];
                                                                vinfos[2].indices[1] = _ij8[1];
                                                                vinfos[2].maxsolutions = _nj8;
                                                                int vfree[0];
                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                bool j7valid[1]= {false};
                                                _nj7 = 1;
                                                IkReal x60=(cj6*px);
                                                IkReal x61=((3300.0)*pz);
                                                IkReal x62=((3300.0)*py*sj6);
                                                CheckValue<IkReal> x63=IKPowWithIntegerCheck<IkReal>(IKsign(((2385.0)+(((2376.0)*cj8)))),-1);
                                                if(!x63.valid)
                                                {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x64 = IKatan2WithCheck(IkReal(((((-1.0)*cj8*x61))+((sj8*x62))+(((3300.0)*sj8*x60))+(((-3600.0)*pz))+(((-1188.0)*sj8)))),IkReal(((-1296.0)+(((3600.0)*x60))+((cj8*x62))+(((3300.0)*cj8*x60))+((sj8*x61))+(((-1188.0)*cj8))+(((3600.0)*py*sj6)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x64.valid)
                                                {
                                                    continue;
                                                }
                                                j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x63.value)))+(x64.value));
                                                sj7array[0]=IKsin(j7array[0]);
                                                cj7array[0]=IKcos(j7array[0]);
                                                if( j7array[0] > IKPI )
                                                {
                                                    j7array[0]-=IK2PI;
                                                }
                                                else if( j7array[0] < -IKPI )
                                                {
                                                    j7array[0]+=IK2PI;
                                                }
                                                j7valid[0] = true;
                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                {
                                                    if( !j7valid[ij7] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij7[0] = ij7;
                                                    _ij7[1] = -1;
                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                    {
                                                        if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j7valid[iij7]=false;
                                                            _ij7[1] = iij7;
                                                            break;
                                                        }
                                                    }
                                                    j7 = j7array[ij7];
                                                    cj7 = cj7array[ij7];
                                                    sj7 = sj7array[ij7];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x65=IKsin(j7);
                                                        IkReal x66=IKcos(j7);
                                                        IkReal x67=((0.33)*cj8);
                                                        IkReal x68=(py*sj6);
                                                        IkReal x69=(cj6*px);
                                                        IkReal x70=((0.33)*sj8);
                                                        IkReal x71=((0.36)*x65);
                                                        IkReal x72=((0.36)*x66);
                                                        IkReal x73=((0.33)*x66);
                                                        IkReal x74=(pz*x65);
                                                        IkReal x75=((0.72)*x69);
                                                        evalcond[0]=((((-1.0)*x71))+(((-1.0)*pz))+(((-1.0)*x65*x67))+((x66*x70)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x66*x67))+(((-1.0)*x72))+x68+x69+(((-1.0)*x65*x70)));
                                                        evalcond[2]=((((-1.0)*x71))+(((-1.0)*x70))+((pz*x66))+((x65*x68))+((x65*x69)));
                                                        evalcond[3]=((-0.36)+(((-1.0)*x72))+(((-1.0)*x74))+(((-1.0)*x67))+((x66*x68))+((x66*x69)));
                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((0.72)*x68))+(((0.72)*x66*x68))+x75+(((-0.2592)*x66))+(((-1.0)*(pz*pz)))+(((-0.72)*x74))+((x66*x75))+(((-1.0)*(py*py))));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j6;
                                                        vinfos[0].indices[0] = _ij6[0];
                                                        vinfos[0].indices[1] = _ij6[1];
                                                        vinfos[0].maxsolutions = _nj6;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j7;
                                                        vinfos[1].indices[0] = _ij7[0];
                                                        vinfos[1].indices[1] = _ij7[1];
                                                        vinfos[1].maxsolutions = _nj7;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j8;
                                                        vinfos[2].indices[0] = _ij8[0];
                                                        vinfos[2].indices[1] = _ij8[1];
                                                        vinfos[2].maxsolutions = _nj8;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
    return "<robot:GenericRobot - Hunker (f7071dcf5459c249fade087ece139e54)>";
}

IKFAST_API const char* GetIkFastVersion()
{
    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
