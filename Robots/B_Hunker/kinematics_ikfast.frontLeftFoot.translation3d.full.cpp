#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_frontLeftFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-17 21:08:57.945267
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return -IKPI_2;
    }
    else if( f >= 1 )
    {
        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if( f < 0 )
    {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 )
    {
        ret.value = f*f;
    }
    else if( num == 3 )
    {
        ret.value = f*f*f;
    }
    else
    {
        ret.value = 1.0;
        while(num>0)
        {
            if( num & 1 )
            {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 )
    {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKsin(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x0);
    x8=((0.33)*x2);
    x9=(x1*x3);
    eetrans[0]=((0.36)+((x1*x7))+x7+((x0*x4*x6))+((x0*x1*x8)));
    eetrans[1]=(((x8*x9))+((x3*x4*x6))+(((0.36)*x3))+(((0.36)*x9)));
    eetrans[2]=((0.15)+((x4*x8))+(((-1.0)*x1*x6))+(((0.36)*x4)));
}

IKFAST_API int GetNumFreeParameters()
{
    return 0;
}
IKFAST_API int* GetFreeParameters()
{
    return NULL;
}
IKFAST_API int GetNumJoints()
{
    return 3;
}

IKFAST_API int GetIkRealSize()
{
    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j6=numeric_limits<IkReal>::quiet_NaN();
        _ij6[0] = -1;
        _ij6[1] = -1;
        _nj6 = -1;
        j7=numeric_limits<IkReal>::quiet_NaN();
        _ij7[0] = -1;
        _ij7[1] = -1;
        _nj7 = -1;
        j8=numeric_limits<IkReal>::quiet_NaN();
        _ij8[0] = -1;
        _ij8[1] = -1;
        _nj8 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((-0.36)+px);
            new_py=py;
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j6eval[1];
                j6eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j6eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
                                bgotonextstatement=false;
                                {
                                    IkReal j8array[2], cj8array[2], sj8array[2];
                                    bool j8valid[2]= {false};
                                    _nj8 = 2;
                                    cj8array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz))));
                                    if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
                                        j8valid[0] = j8valid[1] = true;
                                        j8array[0] = IKacos(cj8array[0]);
                                        sj8array[0] = IKsin(j8array[0]);
                                        cj8array[1] = cj8array[0];
                                        j8array[1] = -j8array[0];
                                        sj8array[1] = -sj8array[0];
                                    }
                                    else if( isnan(cj8array[0]) )
                                    {
                                        // probably any value will work
                                        j8valid[0] = true;
                                        cj8array[0] = 1;
                                        sj8array[0] = 0;
                                        j8array[0] = 0;
                                    }
                                    for(int ij8 = 0; ij8 < 2; ++ij8)
                                    {
                                        if( !j8valid[ij8] )
                                        {
                                            continue;
                                        }
                                        _ij8[0] = ij8;
                                        _ij8[1] = -1;
                                        for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                                        {
                                            if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                                            {
                                                j8valid[iij8]=false;
                                                _ij8[1] = iij8;
                                                break;
                                            }
                                        }
                                        j8 = j8array[ij8];
                                        cj8 = cj8array[ij8];
                                        sj8 = sj8array[ij8];

                                        {
                                            IkReal j7eval[3];
                                            px=0;
                                            py=0;
                                            pp=pz*pz;
                                            IkReal x10=pz*pz;
                                            IkReal x11=((825.0)*pz);
                                            j7eval[0]=((-1.0)+(((-7.71604938271605)*x10)));
                                            j7eval[1]=IKsign(((-324.0)+(((-2500.0)*x10))));
                                            j7eval[2]=((IKabs(((324.0)+((sj8*x11))+(((297.0)*cj8)))))+(IKabs(((((-1.0)*cj8*x11))+(((297.0)*sj8))+(((-900.0)*pz))))));
                                            if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j7eval[1];
                                                    px=0;
                                                    py=0;
                                                    pp=pz*pz;
                                                    j7eval[0]=((1.09090909090909)+cj8+(((-2.77777777777778)*pz*sj8)));
                                                    if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j7eval[1];
                                                            px=0;
                                                            py=0;
                                                            pp=pz*pz;
                                                            j7eval[0]=((((-1.0)*sj8))+(((-2.77777777777778)*cj8*pz))+(((-3.03030303030303)*pz)));
                                                            if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        IkReal x12=pz*pz;
                                                                        IkReal x13=((1.0)+(((7.71604938271605)*x12)));
                                                                        if((x13) < -0.00001)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x14=IKabs(IKsqrt(x13));
                                                                        IkReal x20 = x13;
                                                                        if(IKabs(x20)==0)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x15=pow(x20,-0.5);
                                                                        CheckValue<IkReal> x21=IKPowWithIntegerCheck<IkReal>(x14,-1);
                                                                        if(!x21.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x16=x21.value;
                                                                        IkReal x17=((3.03030303030303)*pz*x16);
                                                                        if((((1.0)+(((-9.18273645546373)*x12*(x16*x16))))) < -0.00001)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x18=IKsqrt(((1.0)+(((-9.18273645546373)*x12*(x16*x16)))));
                                                                        IkReal x19=(x15*x18);
                                                                        if( (x17) < -1-IKFAST_SINCOS_THRESH || (x17) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x22 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                        if(!x22.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal gconst0=((IKasin(x17))+(((-1.0)*(x22.value))));
                                                                        IkReal gconst1=((((2.77777777777778)*pz*x19))+(((-1.0)*x15*x17)));
                                                                        IkReal gconst2=((((-1.0)*x19))+(((-8.41750841750842)*x12*x15*x16)));
                                                                        CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                        if(!x23.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x24=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if(!x24.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if( (((3.03030303030303)*pz*(x24.value))) < -1-IKFAST_SINCOS_THRESH || (((3.03030303030303)*pz*(x24.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x23.value)+(((-1.0)*(IKasin(((3.03030303030303)*pz*(x24.value))))))+j8)))), 6.28318530717959)));
                                                                        if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j7eval[2];
                                                                                IkReal x25=pz*pz;
                                                                                IkReal x26=x13;
                                                                                if((x26) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x27=IKabs(IKsqrt(x26));
                                                                                IkReal x34 = x26;
                                                                                if(IKabs(x34)==0)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x28=pow(x34,-0.5);
                                                                                CheckValue<IkReal> x35=IKPowWithIntegerCheck<IkReal>(x27,-1);
                                                                                if(!x35.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x29=x35.value;
                                                                                IkReal x30=((3.03030303030303)*pz*x29);
                                                                                if( (x30) < -1-IKFAST_SINCOS_THRESH || (x30) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x36 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if(!x36.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x31=((IKasin(x30))+(((-1.0)*(x36.value))));
                                                                                if((((1.0)+(((-9.18273645546373)*x25*(x29*x29))))) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x32=IKsqrt(((1.0)+(((-9.18273645546373)*x25*(x29*x29)))));
                                                                                IkReal x33=(x28*x32);
                                                                                px=0;
                                                                                py=0;
                                                                                pp=x25;
                                                                                sj8=gconst1;
                                                                                cj8=gconst2;
                                                                                j8=x31;
                                                                                IkReal gconst0=x31;
                                                                                IkReal gconst1=((((2.77777777777778)*pz*x33))+(((-1.0)*x28*x30)));
                                                                                IkReal gconst2=((((-1.0)*x33))+(((-8.41750841750842)*x25*x28*x29)));
                                                                                IkReal x37=pz*pz;
                                                                                j7eval[0]=((-1.0)+(((-7.71604938271605)*x37)));
                                                                                j7eval[1]=IKsign(((-324.0)+(((-2500.0)*x37))));
                                                                                if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                        bool j7valid[1]= {false};
                                                                                        _nj7 = 1;
                                                                                        IkReal x38=(gconst1*pz);
                                                                                        CheckValue<IkReal> x39=IKPowWithIntegerCheck<IkReal>(((4.32)+(((3.96)*gconst2))+(((-11.0)*x38))),-1);
                                                                                        if(!x39.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x40=IKPowWithIntegerCheck<IkReal>(((-432.0)+(((-396.0)*gconst2))+(((1100.0)*x38))),-1);
                                                                                        if(!x40.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        if( IKabs(((x39.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x40.value)*(((432.0)+(((-363.0)*(gconst1*gconst1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x39.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2))))))+IKsqr(((x40.value)*(((432.0)+(((-363.0)*(gconst1*gconst1)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j7array[0]=IKatan2(((x39.value)*(((((-3.96)*gconst1))+(((12.0)*pz))+(((-3.63)*gconst1*gconst2))))), ((x40.value)*(((432.0)+(((-363.0)*(gconst1*gconst1)))))));
                                                                                        sj7array[0]=IKsin(j7array[0]);
                                                                                        cj7array[0]=IKcos(j7array[0]);
                                                                                        if( j7array[0] > IKPI )
                                                                                        {
                                                                                            j7array[0]-=IK2PI;
                                                                                        }
                                                                                        else if( j7array[0] < -IKPI )
                                                                                        {
                                                                                            j7array[0]+=IK2PI;
                                                                                        }
                                                                                        j7valid[0] = true;
                                                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                        {
                                                                                            if( !j7valid[ij7] )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij7[0] = ij7;
                                                                                            _ij7[1] = -1;
                                                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                            {
                                                                                                if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
                                                                                                    j7valid[iij7]=false;
                                                                                                    _ij7[1] = iij7;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j7 = j7array[ij7];
                                                                                            cj7 = cj7array[ij7];
                                                                                            sj7 = sj7array[ij7];
                                                                                            {
                                                                                                IkReal evalcond[5];
                                                                                                IkReal x41=IKsin(j7);
                                                                                                IkReal x42=IKcos(j7);
                                                                                                IkReal x43=((0.33)*gconst1);
                                                                                                IkReal x44=((0.33)*gconst2);
                                                                                                IkReal x45=((0.36)*x41);
                                                                                                IkReal x46=((0.36)*x42);
                                                                                                IkReal x47=(pz*x41);
                                                                                                evalcond[0]=((-0.36)+(((-1.0)*x44))+(((-1.0)*x46))+x47);
                                                                                                evalcond[1]=((((-1.0)*x45))+(((-1.0)*x43))+(((-1.0)*pz*x42)));
                                                                                                evalcond[2]=((-0.1503)+(((-0.2592)*x42))+(((0.72)*x47))+(((-1.0)*(pz*pz))));
                                                                                                evalcond[3]=((((-1.0)*x45))+(((-1.0)*x41*x44))+((x42*x43))+pz);
                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x42*x44))+(((-1.0)*x46))+(((-1.0)*x41*x43)));
                                                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                bool j6valid[1]= {false};
                                                                                                _nj6 = 1;
                                                                                                j6array[0]=0;
                                                                                                sj6array[0]=IKsin(j6array[0]);
                                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                                if( j6array[0] > IKPI )
                                                                                                {
                                                                                                    j6array[0]-=IK2PI;
                                                                                                }
                                                                                                else if( j6array[0] < -IKPI )
                                                                                                {
                                                                                                    j6array[0]+=IK2PI;
                                                                                                }
                                                                                                j6valid[0] = true;
                                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                {
                                                                                                    if( !j6valid[ij6] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij6[0] = ij6;
                                                                                                    _ij6[1] = -1;
                                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                    {
                                                                                                        if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j6valid[iij6]=false;
                                                                                                            _ij6[1] = iij6;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j6 = j6array[ij6];
                                                                                                    cj6 = cj6array[ij6];
                                                                                                    sj6 = sj6array[ij6];

                                                                                                    {
                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j6;
                                                                                                        vinfos[0].indices[0] = _ij6[0];
                                                                                                        vinfos[0].indices[1] = _ij6[1];
                                                                                                        vinfos[0].maxsolutions = _nj6;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j7;
                                                                                                        vinfos[1].indices[0] = _ij7[0];
                                                                                                        vinfos[1].indices[1] = _ij7[1];
                                                                                                        vinfos[1].maxsolutions = _nj7;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j8;
                                                                                                        vinfos[2].indices[0] = _ij8[0];
                                                                                                        vinfos[2].indices[1] = _ij8[1];
                                                                                                        vinfos[2].maxsolutions = _nj8;
                                                                                                        int vfree[0];
                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                        bool j7valid[1]= {false};
                                                                                        _nj7 = 1;
                                                                                        IkReal x48=((825.0)*pz);
                                                                                        CheckValue<IkReal> x49 = IKatan2WithCheck(IkReal(((((297.0)*gconst1))+(((-1.0)*gconst2*x48))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst2))+((gconst1*x48)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if(!x49.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x50=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                        if(!x50.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j7array[0]=((-1.5707963267949)+(x49.value)+(((1.5707963267949)*(x50.value))));
                                                                                        sj7array[0]=IKsin(j7array[0]);
                                                                                        cj7array[0]=IKcos(j7array[0]);
                                                                                        if( j7array[0] > IKPI )
                                                                                        {
                                                                                            j7array[0]-=IK2PI;
                                                                                        }
                                                                                        else if( j7array[0] < -IKPI )
                                                                                        {
                                                                                            j7array[0]+=IK2PI;
                                                                                        }
                                                                                        j7valid[0] = true;
                                                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                        {
                                                                                            if( !j7valid[ij7] )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij7[0] = ij7;
                                                                                            _ij7[1] = -1;
                                                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                            {
                                                                                                if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
                                                                                                    j7valid[iij7]=false;
                                                                                                    _ij7[1] = iij7;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j7 = j7array[ij7];
                                                                                            cj7 = cj7array[ij7];
                                                                                            sj7 = sj7array[ij7];
                                                                                            {
                                                                                                IkReal evalcond[5];
                                                                                                IkReal x51=IKsin(j7);
                                                                                                IkReal x52=IKcos(j7);
                                                                                                IkReal x53=((0.33)*gconst1);
                                                                                                IkReal x54=((0.33)*gconst2);
                                                                                                IkReal x55=((0.36)*x51);
                                                                                                IkReal x56=((0.36)*x52);
                                                                                                IkReal x57=(pz*x51);
                                                                                                evalcond[0]=((-0.36)+x57+(((-1.0)*x56))+(((-1.0)*x54)));
                                                                                                evalcond[1]=((((-1.0)*x55))+(((-1.0)*x53))+(((-1.0)*pz*x52)));
                                                                                                evalcond[2]=((-0.1503)+(((0.72)*x57))+(((-0.2592)*x52))+(((-1.0)*(pz*pz))));
                                                                                                evalcond[3]=((((-1.0)*x51*x54))+pz+((x52*x53))+(((-1.0)*x55)));
                                                                                                evalcond[4]=((-0.36)+(((-1.0)*x52*x54))+(((-1.0)*x51*x53))+(((-1.0)*x56)));
                                                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                bool j6valid[1]= {false};
                                                                                                _nj6 = 1;
                                                                                                j6array[0]=0;
                                                                                                sj6array[0]=IKsin(j6array[0]);
                                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                                if( j6array[0] > IKPI )
                                                                                                {
                                                                                                    j6array[0]-=IK2PI;
                                                                                                }
                                                                                                else if( j6array[0] < -IKPI )
                                                                                                {
                                                                                                    j6array[0]+=IK2PI;
                                                                                                }
                                                                                                j6valid[0] = true;
                                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                {
                                                                                                    if( !j6valid[ij6] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij6[0] = ij6;
                                                                                                    _ij6[1] = -1;
                                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                    {
                                                                                                        if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j6valid[iij6]=false;
                                                                                                            _ij6[1] = iij6;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j6 = j6array[ij6];
                                                                                                    cj6 = cj6array[ij6];
                                                                                                    sj6 = sj6array[ij6];

                                                                                                    {
                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j6;
                                                                                                        vinfos[0].indices[0] = _ij6[0];
                                                                                                        vinfos[0].indices[1] = _ij6[1];
                                                                                                        vinfos[0].maxsolutions = _nj6;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j7;
                                                                                                        vinfos[1].indices[0] = _ij7[0];
                                                                                                        vinfos[1].indices[1] = _ij7[1];
                                                                                                        vinfos[1].maxsolutions = _nj7;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j8;
                                                                                                        vinfos[2].indices[0] = _ij8[0];
                                                                                                        vinfos[2].indices[1] = _ij8[1];
                                                                                                        vinfos[2].maxsolutions = _nj8;
                                                                                                        int vfree[0];
                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            IkReal x58=pz*pz;
                                                                            IkReal x59=((1.0)+(((7.71604938271605)*x58)));
                                                                            IkReal x66 = x59;
                                                                            if(IKabs(x66)==0)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x60=pow(x66,-0.5);
                                                                            if((x59) < -0.00001)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x61=IKabs(IKsqrt(x59));
                                                                            CheckValue<IkReal> x67=IKPowWithIntegerCheck<IkReal>(x61,-1);
                                                                            if(!x67.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x62=x67.value;
                                                                            IkReal x63=((3.03030303030303)*pz*x62);
                                                                            if((((1.0)+(((-9.18273645546373)*x58*(x62*x62))))) < -0.00001)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x64=IKsqrt(((1.0)+(((-9.18273645546373)*x58*(x62*x62)))));
                                                                            IkReal x65=(x60*x64);
                                                                            CheckValue<IkReal> x68 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                            if(!x68.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if( (x63) < -1-IKFAST_SINCOS_THRESH || (x63) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(x68.value)))+(((-1.0)*(IKasin(x63)))));
                                                                            IkReal gconst4=((((-2.77777777777778)*pz*x65))+(((-1.0)*x60*x63)));
                                                                            IkReal gconst5=((((-8.41750841750842)*x58*x60*x62))+(((1.0)*x65)));
                                                                            CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                            if(!x69.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x70=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if(!x70.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if( (((3.03030303030303)*pz*(x70.value))) < -1-IKFAST_SINCOS_THRESH || (((3.03030303030303)*pz*(x70.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x69.value)+(IKasin(((3.03030303030303)*pz*(x70.value))))+j8)))), 6.28318530717959)));
                                                                            if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j7eval[2];
                                                                                    IkReal x71=pz*pz;
                                                                                    IkReal x72=x59;
                                                                                    IkReal x80 = x72;
                                                                                    if(IKabs(x80)==0)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x73=pow(x80,-0.5);
                                                                                    if((x72) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x74=IKabs(IKsqrt(x72));
                                                                                    CheckValue<IkReal> x81=IKPowWithIntegerCheck<IkReal>(x74,-1);
                                                                                    if(!x81.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x75=x81.value;
                                                                                    IkReal x76=((3.03030303030303)*pz*x75);
                                                                                    if((((1.0)+(((-9.18273645546373)*x71*(x75*x75))))) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x77=IKsqrt(((1.0)+(((-9.18273645546373)*x71*(x75*x75)))));
                                                                                    CheckValue<IkReal> x82 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(-1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if(!x82.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if( (x76) < -1-IKFAST_SINCOS_THRESH || (x76) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x78=((((1.0)*(x82.value)))+(((1.0)*(IKasin(x76)))));
                                                                                    IkReal x79=(x73*x77);
                                                                                    px=0;
                                                                                    py=0;
                                                                                    pp=x71;
                                                                                    sj8=gconst4;
                                                                                    cj8=gconst5;
                                                                                    j8=((3.14159265)+(((-1.0)*x78)));
                                                                                    IkReal gconst3=((3.14159265358979)+(((-1.0)*x78)));
                                                                                    IkReal gconst4=((((-2.77777777777778)*pz*x79))+(((-1.0)*x73*x76)));
                                                                                    IkReal gconst5=((((1.0)*x79))+(((-8.41750841750842)*x71*x73*x75)));
                                                                                    IkReal x83=pz*pz;
                                                                                    j7eval[0]=((-1.0)+(((-7.71604938271605)*x83)));
                                                                                    j7eval[1]=IKsign(((-324.0)+(((-2500.0)*x83))));
                                                                                    if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                            bool j7valid[1]= {false};
                                                                                            _nj7 = 1;
                                                                                            IkReal x84=(gconst4*pz);
                                                                                            CheckValue<IkReal> x85=IKPowWithIntegerCheck<IkReal>(((4.32)+(((3.96)*gconst5))+(((-11.0)*x84))),-1);
                                                                                            if(!x85.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x86=IKPowWithIntegerCheck<IkReal>(((-432.0)+(((1100.0)*x84))+(((-396.0)*gconst5))),-1);
                                                                                            if(!x86.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            if( IKabs(((x85.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x86.value)*(((432.0)+(((-363.0)*(gconst4*gconst4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x85.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5))))))+IKsqr(((x86.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j7array[0]=IKatan2(((x85.value)*(((((-3.96)*gconst4))+(((12.0)*pz))+(((-3.63)*gconst4*gconst5))))), ((x86.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))));
                                                                                            sj7array[0]=IKsin(j7array[0]);
                                                                                            cj7array[0]=IKcos(j7array[0]);
                                                                                            if( j7array[0] > IKPI )
                                                                                            {
                                                                                                j7array[0]-=IK2PI;
                                                                                            }
                                                                                            else if( j7array[0] < -IKPI )
                                                                                            {
                                                                                                j7array[0]+=IK2PI;
                                                                                            }
                                                                                            j7valid[0] = true;
                                                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                            {
                                                                                                if( !j7valid[ij7] )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij7[0] = ij7;
                                                                                                _ij7[1] = -1;
                                                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                {
                                                                                                    if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
                                                                                                        j7valid[iij7]=false;
                                                                                                        _ij7[1] = iij7;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j7 = j7array[ij7];
                                                                                                cj7 = cj7array[ij7];
                                                                                                sj7 = sj7array[ij7];
                                                                                                {
                                                                                                    IkReal evalcond[5];
                                                                                                    IkReal x87=IKsin(j7);
                                                                                                    IkReal x88=IKcos(j7);
                                                                                                    IkReal x89=((0.33)*gconst5);
                                                                                                    IkReal x90=((0.33)*gconst4);
                                                                                                    IkReal x91=((0.36)*x87);
                                                                                                    IkReal x92=((0.36)*x88);
                                                                                                    IkReal x93=(pz*x87);
                                                                                                    evalcond[0]=((-0.36)+x93+(((-1.0)*x92))+(((-1.0)*x89)));
                                                                                                    evalcond[1]=((((-1.0)*pz*x88))+(((-1.0)*x90))+(((-1.0)*x91)));
                                                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x88))+(((-1.0)*(pz*pz)))+(((0.72)*x93)));
                                                                                                    evalcond[3]=(((x88*x90))+(((-1.0)*x87*x89))+pz+(((-1.0)*x91)));
                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x87*x90))+(((-1.0)*x92))+(((-1.0)*x88*x89)));
                                                                                                    if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                    bool j6valid[1]= {false};
                                                                                                    _nj6 = 1;
                                                                                                    j6array[0]=0;
                                                                                                    sj6array[0]=IKsin(j6array[0]);
                                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                                    if( j6array[0] > IKPI )
                                                                                                    {
                                                                                                        j6array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if( j6array[0] < -IKPI )
                                                                                                    {
                                                                                                        j6array[0]+=IK2PI;
                                                                                                    }
                                                                                                    j6valid[0] = true;
                                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                    {
                                                                                                        if( !j6valid[ij6] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij6[0] = ij6;
                                                                                                        _ij6[1] = -1;
                                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                        {
                                                                                                            if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j6valid[iij6]=false;
                                                                                                                _ij6[1] = iij6;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j6 = j6array[ij6];
                                                                                                        cj6 = cj6array[ij6];
                                                                                                        sj6 = sj6array[ij6];

                                                                                                        {
                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j6;
                                                                                                            vinfos[0].indices[0] = _ij6[0];
                                                                                                            vinfos[0].indices[1] = _ij6[1];
                                                                                                            vinfos[0].maxsolutions = _nj6;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j7;
                                                                                                            vinfos[1].indices[0] = _ij7[0];
                                                                                                            vinfos[1].indices[1] = _ij7[1];
                                                                                                            vinfos[1].maxsolutions = _nj7;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j8;
                                                                                                            vinfos[2].indices[0] = _ij8[0];
                                                                                                            vinfos[2].indices[1] = _ij8[1];
                                                                                                            vinfos[2].maxsolutions = _nj8;
                                                                                                            int vfree[0];
                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                            bool j7valid[1]= {false};
                                                                                            _nj7 = 1;
                                                                                            IkReal x94=((825.0)*pz);
                                                                                            CheckValue<IkReal> x95 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x94))+(((297.0)*gconst4))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst5))+((gconst4*x94)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if(!x95.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x96=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                            if(!x96.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j7array[0]=((-1.5707963267949)+(x95.value)+(((1.5707963267949)*(x96.value))));
                                                                                            sj7array[0]=IKsin(j7array[0]);
                                                                                            cj7array[0]=IKcos(j7array[0]);
                                                                                            if( j7array[0] > IKPI )
                                                                                            {
                                                                                                j7array[0]-=IK2PI;
                                                                                            }
                                                                                            else if( j7array[0] < -IKPI )
                                                                                            {
                                                                                                j7array[0]+=IK2PI;
                                                                                            }
                                                                                            j7valid[0] = true;
                                                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                            {
                                                                                                if( !j7valid[ij7] )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij7[0] = ij7;
                                                                                                _ij7[1] = -1;
                                                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                {
                                                                                                    if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
                                                                                                        j7valid[iij7]=false;
                                                                                                        _ij7[1] = iij7;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j7 = j7array[ij7];
                                                                                                cj7 = cj7array[ij7];
                                                                                                sj7 = sj7array[ij7];
                                                                                                {
                                                                                                    IkReal evalcond[5];
                                                                                                    IkReal x97=IKsin(j7);
                                                                                                    IkReal x98=IKcos(j7);
                                                                                                    IkReal x99=((0.33)*gconst5);
                                                                                                    IkReal x100=((0.33)*gconst4);
                                                                                                    IkReal x101=((0.36)*x97);
                                                                                                    IkReal x102=((0.36)*x98);
                                                                                                    IkReal x103=(pz*x97);
                                                                                                    evalcond[0]=((-0.36)+(((-1.0)*x102))+x103+(((-1.0)*x99)));
                                                                                                    evalcond[1]=((((-1.0)*pz*x98))+(((-1.0)*x101))+(((-1.0)*x100)));
                                                                                                    evalcond[2]=((-0.1503)+(((0.72)*x103))+(((-0.2592)*x98))+(((-1.0)*(pz*pz))));
                                                                                                    evalcond[3]=(((x100*x98))+(((-1.0)*x101))+pz+(((-1.0)*x97*x99)));
                                                                                                    evalcond[4]=((-0.36)+(((-1.0)*x98*x99))+(((-1.0)*x102))+(((-1.0)*x100*x97)));
                                                                                                    if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                    bool j6valid[1]= {false};
                                                                                                    _nj6 = 1;
                                                                                                    j6array[0]=0;
                                                                                                    sj6array[0]=IKsin(j6array[0]);
                                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                                    if( j6array[0] > IKPI )
                                                                                                    {
                                                                                                        j6array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if( j6array[0] < -IKPI )
                                                                                                    {
                                                                                                        j6array[0]+=IK2PI;
                                                                                                    }
                                                                                                    j6valid[0] = true;
                                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                    {
                                                                                                        if( !j6valid[ij6] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij6[0] = ij6;
                                                                                                        _ij6[1] = -1;
                                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                        {
                                                                                                            if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j6valid[iij6]=false;
                                                                                                                _ij6[1] = iij6;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j6 = j6array[ij6];
                                                                                                        cj6 = cj6array[ij6];
                                                                                                        sj6 = sj6array[ij6];

                                                                                                        {
                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j6;
                                                                                                            vinfos[0].indices[0] = _ij6[0];
                                                                                                            vinfos[0].indices[1] = _ij6[1];
                                                                                                            vinfos[0].maxsolutions = _nj6;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j7;
                                                                                                            vinfos[1].indices[0] = _ij7[0];
                                                                                                            vinfos[1].indices[1] = _ij7[1];
                                                                                                            vinfos[1].maxsolutions = _nj7;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j8;
                                                                                                            vinfos[2].indices[0] = _ij8[0];
                                                                                                            vinfos[2].indices[1] = _ij8[1];
                                                                                                            vinfos[2].maxsolutions = _nj8;
                                                                                                            int vfree[0];
                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                IkReal x104=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                                IkReal x111 = x104;
                                                                                if(IKabs(x111)==0)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x105=pow(x111,-0.5);
                                                                                if((x104) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x106=IKabs(IKsqrt(x104));
                                                                                IkReal x107=(pz*x105);
                                                                                CheckValue<IkReal> x112=IKPowWithIntegerCheck<IkReal>(x106,-1);
                                                                                if(!x112.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x108=x112.value;
                                                                                IkReal x109=((1.09090909090909)*x108);
                                                                                if((((1.0)+(((-1.1900826446281)*(x108*x108))))) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x110=IKsqrt(((1.0)+(((-1.1900826446281)*(x108*x108)))));
                                                                                CheckValue<IkReal> x113 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if(!x113.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if( (x109) < -1-IKFAST_SINCOS_THRESH || (x109) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal gconst6=((((-1.0)*(x113.value)))+(((-1.0)*(IKasin(x109)))));
                                                                                IkReal gconst7=((((3.03030303030303)*x107*x108))+(((-1.0)*x105*x110)));
                                                                                IkReal gconst8=((((-1.0)*x105*x109))+(((-2.77777777777778)*x107*x110)));
                                                                                CheckValue<IkReal> x114 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if(!x114.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x115=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                if(!x115.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if( (((1.09090909090909)*(x115.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x115.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x114.value)+(IKasin(((1.09090909090909)*(x115.value))))+j8)))), 6.28318530717959)));
                                                                                if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j7eval[2];
                                                                                        IkReal x116=pz*pz;
                                                                                        CheckValue<IkReal> x125 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if(!x125.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x117=((1.0)*(x125.value));
                                                                                        IkReal x118=x104;
                                                                                        IkReal x126 = x118;
                                                                                        if(IKabs(x126)==0)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x119=pow(x126,-0.5);
                                                                                        if((x118) < -0.00001)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x120=IKabs(IKsqrt(x118));
                                                                                        CheckValue<IkReal> x127=IKPowWithIntegerCheck<IkReal>(x120,-1);
                                                                                        if(!x127.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x121=x127.value;
                                                                                        if((((1.0)+(((-1.1900826446281)*(x121*x121))))) < -0.00001)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x122=IKsqrt(((1.0)+(((-1.1900826446281)*(x121*x121)))));
                                                                                        IkReal x123=(x119*x121);
                                                                                        IkReal x124=(x119*x122);
                                                                                        px=0;
                                                                                        py=0;
                                                                                        pp=x116;
                                                                                        sj8=gconst7;
                                                                                        cj8=gconst8;
                                                                                        if( (((1.09090908694215)*x121)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x121)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j8=((((-1.0)*(IKasin(((1.09090908694215)*x121)))))+(((-1.0)*x117)));
                                                                                        if( (((1.09090909090909)*x121)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x121)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal gconst6=((((-1.0)*x117))+(((-1.0)*(IKasin(((1.09090909090909)*x121))))));
                                                                                        IkReal gconst7=((((3.03030303030303)*pz*x123))+(((-1.0)*x124)));
                                                                                        IkReal gconst8=((((-1.09090909090909)*x123))+(((-2.77777777777778)*pz*x124)));
                                                                                        IkReal x128=pz*pz;
                                                                                        j7eval[0]=((-1.0)+(((-7.71604938271605)*x128)));
                                                                                        j7eval[1]=IKsign(((-324.0)+(((-2500.0)*x128))));
                                                                                        if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                                bool j7valid[1]= {false};
                                                                                                _nj7 = 1;
                                                                                                IkReal x129=((297.0)*gconst7);
                                                                                                IkReal x130=((900.0)*pz);
                                                                                                IkReal x131=(x130+x129);
                                                                                                CheckValue<IkReal> x132 = IKatan2WithCheck(IkReal(((((-594.0)*gconst8))+(((-272.25)*(gconst8*gconst8))))),IkReal((x131+(((272.25)*gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if(!x132.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x133=IKPowWithIntegerCheck<IkReal>(IKsign(((((-1.0)*x131))+(((-825.0)*gconst8*pz)))),-1);
                                                                                                if(!x133.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                j7array[0]=((-1.5707963267949)+(x132.value)+(((1.5707963267949)*(x133.value))));
                                                                                                sj7array[0]=IKsin(j7array[0]);
                                                                                                cj7array[0]=IKcos(j7array[0]);
                                                                                                if( j7array[0] > IKPI )
                                                                                                {
                                                                                                    j7array[0]-=IK2PI;
                                                                                                }
                                                                                                else if( j7array[0] < -IKPI )
                                                                                                {
                                                                                                    j7array[0]+=IK2PI;
                                                                                                }
                                                                                                j7valid[0] = true;
                                                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                                {
                                                                                                    if( !j7valid[ij7] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij7[0] = ij7;
                                                                                                    _ij7[1] = -1;
                                                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                    {
                                                                                                        if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j7valid[iij7]=false;
                                                                                                            _ij7[1] = iij7;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j7 = j7array[ij7];
                                                                                                    cj7 = cj7array[ij7];
                                                                                                    sj7 = sj7array[ij7];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
                                                                                                        IkReal x134=IKsin(j7);
                                                                                                        IkReal x135=IKcos(j7);
                                                                                                        IkReal x136=((0.33)*gconst7);
                                                                                                        IkReal x137=((0.33)*gconst8);
                                                                                                        IkReal x138=((0.36)*x134);
                                                                                                        IkReal x139=((0.36)*x135);
                                                                                                        IkReal x140=(pz*x134);
                                                                                                        evalcond[0]=((-0.36)+x140+(((-1.0)*x137))+(((-1.0)*x139)));
                                                                                                        evalcond[1]=((((-1.0)*x136))+(((-1.0)*x138))+(((-1.0)*pz*x135)));
                                                                                                        evalcond[2]=((-0.1503)+(((-0.2592)*x135))+(((0.72)*x140))+(((-1.0)*(pz*pz))));
                                                                                                        evalcond[3]=((((-1.0)*x134*x137))+((x135*x136))+(((-1.0)*x138))+pz);
                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x135*x137))+(((-1.0)*x134*x136))+(((-1.0)*x139)));
                                                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                        bool j6valid[1]= {false};
                                                                                                        _nj6 = 1;
                                                                                                        j6array[0]=0;
                                                                                                        sj6array[0]=IKsin(j6array[0]);
                                                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                                                        if( j6array[0] > IKPI )
                                                                                                        {
                                                                                                            j6array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if( j6array[0] < -IKPI )
                                                                                                        {
                                                                                                            j6array[0]+=IK2PI;
                                                                                                        }
                                                                                                        j6valid[0] = true;
                                                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                        {
                                                                                                            if( !j6valid[ij6] )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij6[0] = ij6;
                                                                                                            _ij6[1] = -1;
                                                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                            {
                                                                                                                if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
                                                                                                                    j6valid[iij6]=false;
                                                                                                                    _ij6[1] = iij6;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j6 = j6array[ij6];
                                                                                                            cj6 = cj6array[ij6];
                                                                                                            sj6 = sj6array[ij6];

                                                                                                            {
                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j6;
                                                                                                                vinfos[0].indices[0] = _ij6[0];
                                                                                                                vinfos[0].indices[1] = _ij6[1];
                                                                                                                vinfos[0].maxsolutions = _nj6;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j7;
                                                                                                                vinfos[1].indices[0] = _ij7[0];
                                                                                                                vinfos[1].indices[1] = _ij7[1];
                                                                                                                vinfos[1].maxsolutions = _nj7;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j8;
                                                                                                                vinfos[2].indices[0] = _ij8[0];
                                                                                                                vinfos[2].indices[1] = _ij8[1];
                                                                                                                vinfos[2].maxsolutions = _nj8;
                                                                                                                int vfree[0];
                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                                bool j7valid[1]= {false};
                                                                                                _nj7 = 1;
                                                                                                IkReal x141=((825.0)*pz);
                                                                                                CheckValue<IkReal> x142 = IKatan2WithCheck(IkReal(((((297.0)*gconst7))+(((-1.0)*gconst8*x141))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst8))+((gconst7*x141)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if(!x142.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x143=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                                if(!x143.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                j7array[0]=((-1.5707963267949)+(x142.value)+(((1.5707963267949)*(x143.value))));
                                                                                                sj7array[0]=IKsin(j7array[0]);
                                                                                                cj7array[0]=IKcos(j7array[0]);
                                                                                                if( j7array[0] > IKPI )
                                                                                                {
                                                                                                    j7array[0]-=IK2PI;
                                                                                                }
                                                                                                else if( j7array[0] < -IKPI )
                                                                                                {
                                                                                                    j7array[0]+=IK2PI;
                                                                                                }
                                                                                                j7valid[0] = true;
                                                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                                {
                                                                                                    if( !j7valid[ij7] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij7[0] = ij7;
                                                                                                    _ij7[1] = -1;
                                                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                    {
                                                                                                        if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j7valid[iij7]=false;
                                                                                                            _ij7[1] = iij7;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j7 = j7array[ij7];
                                                                                                    cj7 = cj7array[ij7];
                                                                                                    sj7 = sj7array[ij7];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
                                                                                                        IkReal x144=IKsin(j7);
                                                                                                        IkReal x145=IKcos(j7);
                                                                                                        IkReal x146=((0.33)*gconst7);
                                                                                                        IkReal x147=((0.33)*gconst8);
                                                                                                        IkReal x148=((0.36)*x144);
                                                                                                        IkReal x149=((0.36)*x145);
                                                                                                        IkReal x150=(pz*x144);
                                                                                                        evalcond[0]=((-0.36)+(((-1.0)*x149))+(((-1.0)*x147))+x150);
                                                                                                        evalcond[1]=((((-1.0)*x148))+(((-1.0)*x146))+(((-1.0)*pz*x145)));
                                                                                                        evalcond[2]=((-0.1503)+(((-0.2592)*x145))+(((0.72)*x150))+(((-1.0)*(pz*pz))));
                                                                                                        evalcond[3]=((((-1.0)*x148))+(((-1.0)*x144*x147))+((x145*x146))+pz);
                                                                                                        evalcond[4]=((-0.36)+(((-1.0)*x149))+(((-1.0)*x144*x146))+(((-1.0)*x145*x147)));
                                                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                        bool j6valid[1]= {false};
                                                                                                        _nj6 = 1;
                                                                                                        j6array[0]=0;
                                                                                                        sj6array[0]=IKsin(j6array[0]);
                                                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                                                        if( j6array[0] > IKPI )
                                                                                                        {
                                                                                                            j6array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if( j6array[0] < -IKPI )
                                                                                                        {
                                                                                                            j6array[0]+=IK2PI;
                                                                                                        }
                                                                                                        j6valid[0] = true;
                                                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                        {
                                                                                                            if( !j6valid[ij6] )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij6[0] = ij6;
                                                                                                            _ij6[1] = -1;
                                                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                            {
                                                                                                                if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
                                                                                                                    j6valid[iij6]=false;
                                                                                                                    _ij6[1] = iij6;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j6 = j6array[ij6];
                                                                                                            cj6 = cj6array[ij6];
                                                                                                            sj6 = sj6array[ij6];

                                                                                                            {
                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j6;
                                                                                                                vinfos[0].indices[0] = _ij6[0];
                                                                                                                vinfos[0].indices[1] = _ij6[1];
                                                                                                                vinfos[0].maxsolutions = _nj6;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j7;
                                                                                                                vinfos[1].indices[0] = _ij7[0];
                                                                                                                vinfos[1].indices[1] = _ij7[1];
                                                                                                                vinfos[1].maxsolutions = _nj7;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j8;
                                                                                                                vinfos[2].indices[0] = _ij8[0];
                                                                                                                vinfos[2].indices[1] = _ij8[1];
                                                                                                                vinfos[2].maxsolutions = _nj8;
                                                                                                                int vfree[0];
                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    IkReal x151=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                                    if((x151) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x152=IKabs(IKsqrt(x151));
                                                                                    IkReal x158 = x151;
                                                                                    if(IKabs(x158)==0)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x153=pow(x158,-0.5);
                                                                                    IkReal x154=(pz*x153);
                                                                                    CheckValue<IkReal> x159=IKPowWithIntegerCheck<IkReal>(x152,-1);
                                                                                    if(!x159.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x155=x159.value;
                                                                                    IkReal x156=((1.09090909090909)*x155);
                                                                                    if((((1.0)+(((-1.1900826446281)*(x155*x155))))) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x157=IKsqrt(((1.0)+(((-1.1900826446281)*(x155*x155)))));
                                                                                    CheckValue<IkReal> x160 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if(!x160.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if( (x156) < -1-IKFAST_SINCOS_THRESH || (x156) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal gconst9=((3.14159265358979)+(((-1.0)*(x160.value)))+(IKasin(x156)));
                                                                                    IkReal gconst10=((((3.03030303030303)*x154*x155))+(((1.0)*x153*x157)));
                                                                                    IkReal gconst11=((((-1.0)*x153*x156))+(((2.77777777777778)*x154*x157)));
                                                                                    CheckValue<IkReal> x161 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if(!x161.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x162=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                    if(!x162.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if( (((1.09090909090909)*(x162.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x162.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x161.value)+(((-1.0)*(IKasin(((1.09090909090909)*(x162.value))))))+j8)))), 6.28318530717959)));
                                                                                    if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j7eval[2];
                                                                                            IkReal x163=pz*pz;
                                                                                            CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if(!x172.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x164=((1.0)*(x172.value));
                                                                                            IkReal x165=x151;
                                                                                            if((x165) < -0.00001)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x166=IKabs(IKsqrt(x165));
                                                                                            IkReal x173 = x165;
                                                                                            if(IKabs(x173)==0)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x167=pow(x173,-0.5);
                                                                                            CheckValue<IkReal> x174=IKPowWithIntegerCheck<IkReal>(x166,-1);
                                                                                            if(!x174.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x168=x174.value;
                                                                                            if((((1.0)+(((-1.1900826446281)*(x168*x168))))) < -0.00001)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x169=IKsqrt(((1.0)+(((-1.1900826446281)*(x168*x168)))));
                                                                                            IkReal x170=(x167*x168);
                                                                                            IkReal x171=(x167*x169);
                                                                                            px=0;
                                                                                            py=0;
                                                                                            pp=x163;
                                                                                            sj8=gconst10;
                                                                                            cj8=gconst11;
                                                                                            if( (((1.09090908694215)*x168)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x168)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j8=((3.14159265)+(((-1.0)*x164))+(IKasin(((1.09090908694215)*x168))));
                                                                                            if( (((1.09090909090909)*x168)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x168)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal gconst9=((3.14159265358979)+(((-1.0)*x164))+(IKasin(((1.09090909090909)*x168))));
                                                                                            IkReal gconst10=((((3.03030303030303)*pz*x170))+(((1.0)*x171)));
                                                                                            IkReal gconst11=((((2.77777777777778)*pz*x171))+(((-1.09090909090909)*x170)));
                                                                                            IkReal x175=pz*pz;
                                                                                            j7eval[0]=((-1.0)+(((-7.71604938271605)*x175)));
                                                                                            j7eval[1]=IKsign(((-324.0)+(((-2500.0)*x175))));
                                                                                            if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                                    bool j7valid[1]= {false};
                                                                                                    _nj7 = 1;
                                                                                                    IkReal x176=(gconst10*pz);
                                                                                                    CheckValue<IkReal> x177=IKPowWithIntegerCheck<IkReal>(((4.32)+(((3.96)*gconst11))+(((-11.0)*x176))),-1);
                                                                                                    if(!x177.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x178=IKPowWithIntegerCheck<IkReal>(((-432.0)+(((1100.0)*x176))+(((-396.0)*gconst11))),-1);
                                                                                                    if(!x178.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    if( IKabs(((x177.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x178.value)*(((432.0)+(((-363.0)*(gconst10*gconst10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x177.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11))))))+IKsqr(((x178.value)*(((432.0)+(((-363.0)*(gconst10*gconst10)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j7array[0]=IKatan2(((x177.value)*(((((-3.96)*gconst10))+(((12.0)*pz))+(((-3.63)*gconst10*gconst11))))), ((x178.value)*(((432.0)+(((-363.0)*(gconst10*gconst10)))))));
                                                                                                    sj7array[0]=IKsin(j7array[0]);
                                                                                                    cj7array[0]=IKcos(j7array[0]);
                                                                                                    if( j7array[0] > IKPI )
                                                                                                    {
                                                                                                        j7array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if( j7array[0] < -IKPI )
                                                                                                    {
                                                                                                        j7array[0]+=IK2PI;
                                                                                                    }
                                                                                                    j7valid[0] = true;
                                                                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                                    {
                                                                                                        if( !j7valid[ij7] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij7[0] = ij7;
                                                                                                        _ij7[1] = -1;
                                                                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                        {
                                                                                                            if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j7valid[iij7]=false;
                                                                                                                _ij7[1] = iij7;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j7 = j7array[ij7];
                                                                                                        cj7 = cj7array[ij7];
                                                                                                        sj7 = sj7array[ij7];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
                                                                                                            IkReal x179=IKsin(j7);
                                                                                                            IkReal x180=IKcos(j7);
                                                                                                            IkReal x181=((0.33)*gconst10);
                                                                                                            IkReal x182=((0.33)*gconst11);
                                                                                                            IkReal x183=((0.36)*x179);
                                                                                                            IkReal x184=((0.36)*x180);
                                                                                                            IkReal x185=(pz*x179);
                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x184))+(((-1.0)*x182))+x185);
                                                                                                            evalcond[1]=((((-1.0)*x183))+(((-1.0)*x181))+(((-1.0)*pz*x180)));
                                                                                                            evalcond[2]=((-0.1503)+(((0.72)*x185))+(((-1.0)*(pz*pz)))+(((-0.2592)*x180)));
                                                                                                            evalcond[3]=(((x180*x181))+(((-1.0)*x183))+pz+(((-1.0)*x179*x182)));
                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x184))+(((-1.0)*x180*x182))+(((-1.0)*x179*x181)));
                                                                                                            if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                            bool j6valid[1]= {false};
                                                                                                            _nj6 = 1;
                                                                                                            j6array[0]=0;
                                                                                                            sj6array[0]=IKsin(j6array[0]);
                                                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                                                            if( j6array[0] > IKPI )
                                                                                                            {
                                                                                                                j6array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if( j6array[0] < -IKPI )
                                                                                                            {
                                                                                                                j6array[0]+=IK2PI;
                                                                                                            }
                                                                                                            j6valid[0] = true;
                                                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                            {
                                                                                                                if( !j6valid[ij6] )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij6[0] = ij6;
                                                                                                                _ij6[1] = -1;
                                                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                                {
                                                                                                                    if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
                                                                                                                        j6valid[iij6]=false;
                                                                                                                        _ij6[1] = iij6;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j6 = j6array[ij6];
                                                                                                                cj6 = cj6array[ij6];
                                                                                                                sj6 = sj6array[ij6];

                                                                                                                {
                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j6;
                                                                                                                    vinfos[0].indices[0] = _ij6[0];
                                                                                                                    vinfos[0].indices[1] = _ij6[1];
                                                                                                                    vinfos[0].maxsolutions = _nj6;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j7;
                                                                                                                    vinfos[1].indices[0] = _ij7[0];
                                                                                                                    vinfos[1].indices[1] = _ij7[1];
                                                                                                                    vinfos[1].maxsolutions = _nj7;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j8;
                                                                                                                    vinfos[2].indices[0] = _ij8[0];
                                                                                                                    vinfos[2].indices[1] = _ij8[1];
                                                                                                                    vinfos[2].maxsolutions = _nj8;
                                                                                                                    int vfree[0];
                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                                                                    bool j7valid[1]= {false};
                                                                                                    _nj7 = 1;
                                                                                                    IkReal x186=((825.0)*pz);
                                                                                                    CheckValue<IkReal> x187=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                                                                    if(!x187.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x188 = IKatan2WithCheck(IkReal(((((297.0)*gconst10))+(((-1.0)*gconst11*x186))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*gconst11))+((gconst10*x186)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if(!x188.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x187.value)))+(x188.value));
                                                                                                    sj7array[0]=IKsin(j7array[0]);
                                                                                                    cj7array[0]=IKcos(j7array[0]);
                                                                                                    if( j7array[0] > IKPI )
                                                                                                    {
                                                                                                        j7array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if( j7array[0] < -IKPI )
                                                                                                    {
                                                                                                        j7array[0]+=IK2PI;
                                                                                                    }
                                                                                                    j7valid[0] = true;
                                                                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                                                    {
                                                                                                        if( !j7valid[ij7] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij7[0] = ij7;
                                                                                                        _ij7[1] = -1;
                                                                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                                                        {
                                                                                                            if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j7valid[iij7]=false;
                                                                                                                _ij7[1] = iij7;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j7 = j7array[ij7];
                                                                                                        cj7 = cj7array[ij7];
                                                                                                        sj7 = sj7array[ij7];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
                                                                                                            IkReal x189=IKsin(j7);
                                                                                                            IkReal x190=IKcos(j7);
                                                                                                            IkReal x191=((0.33)*gconst10);
                                                                                                            IkReal x192=((0.33)*gconst11);
                                                                                                            IkReal x193=((0.36)*x189);
                                                                                                            IkReal x194=((0.36)*x190);
                                                                                                            IkReal x195=(pz*x189);
                                                                                                            evalcond[0]=((-0.36)+(((-1.0)*x194))+(((-1.0)*x192))+x195);
                                                                                                            evalcond[1]=((((-1.0)*x193))+(((-1.0)*x191))+(((-1.0)*pz*x190)));
                                                                                                            evalcond[2]=((-0.1503)+(((0.72)*x195))+(((-1.0)*(pz*pz)))+(((-0.2592)*x190)));
                                                                                                            evalcond[3]=((((-1.0)*x189*x192))+(((-1.0)*x193))+pz+((x190*x191)));
                                                                                                            evalcond[4]=((-0.36)+(((-1.0)*x189*x191))+(((-1.0)*x190*x192))+(((-1.0)*x194)));
                                                                                                            if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                            bool j6valid[1]= {false};
                                                                                                            _nj6 = 1;
                                                                                                            j6array[0]=0;
                                                                                                            sj6array[0]=IKsin(j6array[0]);
                                                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                                                            if( j6array[0] > IKPI )
                                                                                                            {
                                                                                                                j6array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if( j6array[0] < -IKPI )
                                                                                                            {
                                                                                                                j6array[0]+=IK2PI;
                                                                                                            }
                                                                                                            j6valid[0] = true;
                                                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                            {
                                                                                                                if( !j6valid[ij6] )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij6[0] = ij6;
                                                                                                                _ij6[1] = -1;
                                                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                                {
                                                                                                                    if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
                                                                                                                        j6valid[iij6]=false;
                                                                                                                        _ij6[1] = iij6;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j6 = j6array[ij6];
                                                                                                                cj6 = cj6array[ij6];
                                                                                                                sj6 = sj6array[ij6];

                                                                                                                {
                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j6;
                                                                                                                    vinfos[0].indices[0] = _ij6[0];
                                                                                                                    vinfos[0].indices[1] = _ij6[1];
                                                                                                                    vinfos[0].maxsolutions = _nj6;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j7;
                                                                                                                    vinfos[1].indices[0] = _ij7[0];
                                                                                                                    vinfos[1].indices[1] = _ij7[1];
                                                                                                                    vinfos[1].maxsolutions = _nj7;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j8;
                                                                                                                    vinfos[2].indices[0] = _ij8[0];
                                                                                                                    vinfos[2].indices[1] = _ij8[1];
                                                                                                                    vinfos[2].maxsolutions = _nj8;
                                                                                                                    int vfree[0];
                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                            bgotonextstatement=false;
                                                                                            continue; // branch miss [j6, j7]

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if( bgotonextstatement )
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                                    bool j7valid[1]= {false};
                                                                    _nj7 = 1;
                                                                    IkReal x196=((297.0)*sj8);
                                                                    IkReal x197=((900.0)*pz);
                                                                    IkReal x198=(cj8*pz);
                                                                    IkReal x199=(x197+x196);
                                                                    CheckValue<IkReal> x200=IKPowWithIntegerCheck<IkReal>(((((-3600.0)*pz))+(((-3300.0)*x198))+(((-1188.0)*sj8))),-1);
                                                                    if(!x200.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x201=IKPowWithIntegerCheck<IkReal>(((((-1.0)*x199))+(((-825.0)*x198))),-1);
                                                                    if(!x201.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if( IKabs(((x200.value)*(((1089.0)+(((-1089.0)*(cj8*cj8)))+(((-10000.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x201.value)*(((((272.25)*cj8*sj8))+x199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x200.value)*(((1089.0)+(((-1089.0)*(cj8*cj8)))+(((-10000.0)*(pz*pz)))))))+IKsqr(((x201.value)*(((((272.25)*cj8*sj8))+x199))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j7array[0]=IKatan2(((x200.value)*(((1089.0)+(((-1089.0)*(cj8*cj8)))+(((-10000.0)*(pz*pz)))))), ((x201.value)*(((((272.25)*cj8*sj8))+x199))));
                                                                    sj7array[0]=IKsin(j7array[0]);
                                                                    cj7array[0]=IKcos(j7array[0]);
                                                                    if( j7array[0] > IKPI )
                                                                    {
                                                                        j7array[0]-=IK2PI;
                                                                    }
                                                                    else if( j7array[0] < -IKPI )
                                                                    {
                                                                        j7array[0]+=IK2PI;
                                                                    }
                                                                    j7valid[0] = true;
                                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                    {
                                                                        if( !j7valid[ij7] )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij7[0] = ij7;
                                                                        _ij7[1] = -1;
                                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                        {
                                                                            if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                            {
                                                                                j7valid[iij7]=false;
                                                                                _ij7[1] = iij7;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j7 = j7array[ij7];
                                                                        cj7 = cj7array[ij7];
                                                                        sj7 = sj7array[ij7];
                                                                        {
                                                                            IkReal evalcond[5];
                                                                            IkReal x202=IKsin(j7);
                                                                            IkReal x203=IKcos(j7);
                                                                            IkReal x204=((0.33)*sj8);
                                                                            IkReal x205=((0.33)*cj8);
                                                                            IkReal x206=((0.36)*x202);
                                                                            IkReal x207=((0.36)*x203);
                                                                            IkReal x208=(pz*x202);
                                                                            evalcond[0]=((-0.36)+(((-1.0)*x205))+(((-1.0)*x207))+x208);
                                                                            evalcond[1]=((((-1.0)*x206))+(((-1.0)*x204))+(((-1.0)*pz*x203)));
                                                                            evalcond[2]=((-0.1503)+(((0.72)*x208))+(((-0.2592)*x203))+(((-1.0)*(pz*pz))));
                                                                            evalcond[3]=((((-1.0)*x202*x205))+(((-1.0)*x206))+pz+((x203*x204)));
                                                                            evalcond[4]=((-0.36)+(((-1.0)*x203*x205))+(((-1.0)*x202*x204))+(((-1.0)*x207)));
                                                                            if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1]= {false};
                                                                            _nj6 = 1;
                                                                            j6array[0]=0;
                                                                            sj6array[0]=IKsin(j6array[0]);
                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                            if( j6array[0] > IKPI )
                                                                            {
                                                                                j6array[0]-=IK2PI;
                                                                            }
                                                                            else if( j6array[0] < -IKPI )
                                                                            {
                                                                                j6array[0]+=IK2PI;
                                                                            }
                                                                            j6valid[0] = true;
                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                                if( !j6valid[ij6] )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij6[0] = ij6;
                                                                                _ij6[1] = -1;
                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                {
                                                                                    if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
                                                                                        j6valid[iij6]=false;
                                                                                        _ij6[1] = iij6;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j6 = j6array[ij6];
                                                                                cj6 = cj6array[ij6];
                                                                                sj6 = sj6array[ij6];

                                                                                {
                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j6;
                                                                                    vinfos[0].indices[0] = _ij6[0];
                                                                                    vinfos[0].indices[1] = _ij6[1];
                                                                                    vinfos[0].maxsolutions = _nj6;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j7;
                                                                                    vinfos[1].indices[0] = _ij7[0];
                                                                                    vinfos[1].indices[1] = _ij7[1];
                                                                                    vinfos[1].maxsolutions = _nj7;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j8;
                                                                                    vinfos[2].indices[0] = _ij8[0];
                                                                                    vinfos[2].indices[1] = _ij8[1];
                                                                                    vinfos[2].maxsolutions = _nj8;
                                                                                    int vfree[0];
                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                            bool j7valid[1]= {false};
                                                            _nj7 = 1;
                                                            IkReal x209=(pz*sj8);
                                                            CheckValue<IkReal> x210=IKPowWithIntegerCheck<IkReal>(((4.32)+(((3.96)*cj8))+(((-11.0)*x209))),-1);
                                                            if(!x210.valid)
                                                            {
                                                                continue;
                                                            }
                                                            CheckValue<IkReal> x211=IKPowWithIntegerCheck<IkReal>(((-432.0)+(((1100.0)*x209))+(((-396.0)*cj8))),-1);
                                                            if(!x211.valid)
                                                            {
                                                                continue;
                                                            }
                                                            if( IKabs(((x210.value)*(((((12.0)*pz))+(((-3.96)*sj8))+(((-3.63)*cj8*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x211.value)*(((69.0)+(((363.0)*(cj8*cj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x210.value)*(((((12.0)*pz))+(((-3.96)*sj8))+(((-3.63)*cj8*sj8))))))+IKsqr(((x211.value)*(((69.0)+(((363.0)*(cj8*cj8)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                            {
                                                                continue;
                                                            }
                                                            j7array[0]=IKatan2(((x210.value)*(((((12.0)*pz))+(((-3.96)*sj8))+(((-3.63)*cj8*sj8))))), ((x211.value)*(((69.0)+(((363.0)*(cj8*cj8)))))));
                                                            sj7array[0]=IKsin(j7array[0]);
                                                            cj7array[0]=IKcos(j7array[0]);
                                                            if( j7array[0] > IKPI )
                                                            {
                                                                j7array[0]-=IK2PI;
                                                            }
                                                            else if( j7array[0] < -IKPI )
                                                            {
                                                                j7array[0]+=IK2PI;
                                                            }
                                                            j7valid[0] = true;
                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                            {
                                                                if( !j7valid[ij7] )
                                                                {
                                                                    continue;
                                                                }
                                                                _ij7[0] = ij7;
                                                                _ij7[1] = -1;
                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                {
                                                                    if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                    {
                                                                        j7valid[iij7]=false;
                                                                        _ij7[1] = iij7;
                                                                        break;
                                                                    }
                                                                }
                                                                j7 = j7array[ij7];
                                                                cj7 = cj7array[ij7];
                                                                sj7 = sj7array[ij7];
                                                                {
                                                                    IkReal evalcond[5];
                                                                    IkReal x212=IKsin(j7);
                                                                    IkReal x213=IKcos(j7);
                                                                    IkReal x214=((0.33)*sj8);
                                                                    IkReal x215=((0.33)*cj8);
                                                                    IkReal x216=((0.36)*x212);
                                                                    IkReal x217=((0.36)*x213);
                                                                    IkReal x218=(pz*x212);
                                                                    evalcond[0]=((-0.36)+x218+(((-1.0)*x217))+(((-1.0)*x215)));
                                                                    evalcond[1]=((((-1.0)*pz*x213))+(((-1.0)*x216))+(((-1.0)*x214)));
                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x213))+(((0.72)*x218))+(((-1.0)*(pz*pz))));
                                                                    evalcond[3]=(((x213*x214))+pz+(((-1.0)*x212*x215))+(((-1.0)*x216)));
                                                                    evalcond[4]=((-0.36)+(((-1.0)*x213*x215))+(((-1.0)*x212*x214))+(((-1.0)*x217)));
                                                                    if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                    bool j6valid[1]= {false};
                                                                    _nj6 = 1;
                                                                    j6array[0]=0;
                                                                    sj6array[0]=IKsin(j6array[0]);
                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                    if( j6array[0] > IKPI )
                                                                    {
                                                                        j6array[0]-=IK2PI;
                                                                    }
                                                                    else if( j6array[0] < -IKPI )
                                                                    {
                                                                        j6array[0]+=IK2PI;
                                                                    }
                                                                    j6valid[0] = true;
                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                    {
                                                                        if( !j6valid[ij6] )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij6[0] = ij6;
                                                                        _ij6[1] = -1;
                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                        {
                                                                            if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                            {
                                                                                j6valid[iij6]=false;
                                                                                _ij6[1] = iij6;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j6 = j6array[ij6];
                                                                        cj6 = cj6array[ij6];
                                                                        sj6 = sj6array[ij6];

                                                                        {
                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j6;
                                                                            vinfos[0].indices[0] = _ij6[0];
                                                                            vinfos[0].indices[1] = _ij6[1];
                                                                            vinfos[0].maxsolutions = _nj6;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j7;
                                                                            vinfos[1].indices[0] = _ij7[0];
                                                                            vinfos[1].indices[1] = _ij7[1];
                                                                            vinfos[1].maxsolutions = _nj7;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j8;
                                                                            vinfos[2].indices[0] = _ij8[0];
                                                                            vinfos[2].indices[1] = _ij8[1];
                                                                            vinfos[2].maxsolutions = _nj8;
                                                                            int vfree[0];
                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                    bool j7valid[1]= {false};
                                                    _nj7 = 1;
                                                    IkReal x219=((825.0)*pz);
                                                    CheckValue<IkReal> x220=IKPowWithIntegerCheck<IkReal>(IKsign(((-324.0)+(((-2500.0)*(pz*pz))))),-1);
                                                    if(!x220.valid)
                                                    {
                                                        continue;
                                                    }
                                                    CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal(((((-1.0)*cj8*x219))+(((297.0)*sj8))+(((-900.0)*pz)))),IkReal(((324.0)+(((297.0)*cj8))+((sj8*x219)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if(!x221.valid)
                                                    {
                                                        continue;
                                                    }
                                                    j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x220.value)))+(x221.value));
                                                    sj7array[0]=IKsin(j7array[0]);
                                                    cj7array[0]=IKcos(j7array[0]);
                                                    if( j7array[0] > IKPI )
                                                    {
                                                        j7array[0]-=IK2PI;
                                                    }
                                                    else if( j7array[0] < -IKPI )
                                                    {
                                                        j7array[0]+=IK2PI;
                                                    }
                                                    j7valid[0] = true;
                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                    {
                                                        if( !j7valid[ij7] )
                                                        {
                                                            continue;
                                                        }
                                                        _ij7[0] = ij7;
                                                        _ij7[1] = -1;
                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                        {
                                                            if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                            {
                                                                j7valid[iij7]=false;
                                                                _ij7[1] = iij7;
                                                                break;
                                                            }
                                                        }
                                                        j7 = j7array[ij7];
                                                        cj7 = cj7array[ij7];
                                                        sj7 = sj7array[ij7];
                                                        {
                                                            IkReal evalcond[5];
                                                            IkReal x222=IKsin(j7);
                                                            IkReal x223=IKcos(j7);
                                                            IkReal x224=((0.33)*sj8);
                                                            IkReal x225=((0.33)*cj8);
                                                            IkReal x226=((0.36)*x222);
                                                            IkReal x227=((0.36)*x223);
                                                            IkReal x228=(pz*x222);
                                                            evalcond[0]=((-0.36)+x228+(((-1.0)*x227))+(((-1.0)*x225)));
                                                            evalcond[1]=((((-1.0)*pz*x223))+(((-1.0)*x226))+(((-1.0)*x224)));
                                                            evalcond[2]=((-0.1503)+(((0.72)*x228))+(((-0.2592)*x223))+(((-1.0)*(pz*pz))));
                                                            evalcond[3]=((((-1.0)*x222*x225))+((x223*x224))+pz+(((-1.0)*x226)));
                                                            evalcond[4]=((-0.36)+(((-1.0)*x222*x224))+(((-1.0)*x223*x225))+(((-1.0)*x227)));
                                                            if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                            bool j6valid[1]= {false};
                                                            _nj6 = 1;
                                                            j6array[0]=0;
                                                            sj6array[0]=IKsin(j6array[0]);
                                                            cj6array[0]=IKcos(j6array[0]);
                                                            if( j6array[0] > IKPI )
                                                            {
                                                                j6array[0]-=IK2PI;
                                                            }
                                                            else if( j6array[0] < -IKPI )
                                                            {
                                                                j6array[0]+=IK2PI;
                                                            }
                                                            j6valid[0] = true;
                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                            {
                                                                if( !j6valid[ij6] )
                                                                {
                                                                    continue;
                                                                }
                                                                _ij6[0] = ij6;
                                                                _ij6[1] = -1;
                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                {
                                                                    if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                    {
                                                                        j6valid[iij6]=false;
                                                                        _ij6[1] = iij6;
                                                                        break;
                                                                    }
                                                                }
                                                                j6 = j6array[ij6];
                                                                cj6 = cj6array[ij6];
                                                                sj6 = sj6array[ij6];

                                                                {
                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j6;
                                                                    vinfos[0].indices[0] = _ij6[0];
                                                                    vinfos[0].indices[1] = _ij6[1];
                                                                    vinfos[0].maxsolutions = _nj6;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j7;
                                                                    vinfos[1].indices[0] = _ij7[0];
                                                                    vinfos[1].indices[1] = _ij7[1];
                                                                    vinfos[1].maxsolutions = _nj7;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j8;
                                                                    vinfos[2].indices[0] = _ij8[0];
                                                                    vinfos[2].indices[1] = _ij8[1];
                                                                    vinfos[2].maxsolutions = _nj8;
                                                                    int vfree[0];
                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
                                    bgotonextstatement=false;
                                    continue; // branch miss [j6, j7, j8]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j6array[2], cj6array[2], sj6array[2];
                        bool j6valid[2]= {false};
                        _nj6 = 2;
                        CheckValue<IkReal> x230 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
                        if(!x230.valid)
                        {
                            continue;
                        }
                        IkReal x229=x230.value;
                        j6array[0]=((-1.0)*x229);
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        j6array[1]=((3.14159265358979)+(((-1.0)*x229)));
                        sj6array[1]=IKsin(j6array[1]);
                        cj6array[1]=IKcos(j6array[1]);
                        if( j6array[0] > IKPI )
                        {
                            j6array[0]-=IK2PI;
                        }
                        else if( j6array[0] < -IKPI )
                        {
                            j6array[0]+=IK2PI;
                        }
                        j6valid[0] = true;
                        if( j6array[1] > IKPI )
                        {
                            j6array[1]-=IK2PI;
                        }
                        else if( j6array[1] < -IKPI )
                        {
                            j6array[1]+=IK2PI;
                        }
                        j6valid[1] = true;
                        for(int ij6 = 0; ij6 < 2; ++ij6)
                        {
                            if( !j6valid[ij6] )
                            {
                                continue;
                            }
                            _ij6[0] = ij6;
                            _ij6[1] = -1;
                            for(int iij6 = ij6+1; iij6 < 2; ++iij6)
                            {
                                if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                {
                                    j6valid[iij6]=false;
                                    _ij6[1] = iij6;
                                    break;
                                }
                            }
                            j6 = j6array[ij6];
                            cj6 = cj6array[ij6];
                            sj6 = sj6array[ij6];

                            {
                                IkReal j8array[2], cj8array[2], sj8array[2];
                                bool j8valid[2]= {false};
                                _nj8 = 2;
                                cj8array[0]=((-0.458333333333333)+(((-3.03030303030303)*cj6*px))+(((4.20875420875421)*(pz*pz)))+(((-3.03030303030303)*py*sj6))+(((4.20875420875421)*(py*py)))+(((4.20875420875421)*(px*px))));
                                if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j8valid[0] = j8valid[1] = true;
                                    j8array[0] = IKacos(cj8array[0]);
                                    sj8array[0] = IKsin(j8array[0]);
                                    cj8array[1] = cj8array[0];
                                    j8array[1] = -j8array[0];
                                    sj8array[1] = -sj8array[0];
                                }
                                else if( isnan(cj8array[0]) )
                                {
                                    // probably any value will work
                                    j8valid[0] = true;
                                    cj8array[0] = 1;
                                    sj8array[0] = 0;
                                    j8array[0] = 0;
                                }
                                for(int ij8 = 0; ij8 < 2; ++ij8)
                                {
                                    if( !j8valid[ij8] )
                                    {
                                        continue;
                                    }
                                    _ij8[0] = ij8;
                                    _ij8[1] = -1;
                                    for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                                    {
                                        if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                                        {
                                            j8valid[iij8]=false;
                                            _ij8[1] = iij8;
                                            break;
                                        }
                                    }
                                    j8 = j8array[ij8];
                                    cj8 = cj8array[ij8];
                                    sj8 = sj8array[ij8];

                                    {
                                        IkReal j7eval[3];
                                        IkReal x231=(cj6*px);
                                        IkReal x232=((3300.0)*cj8);
                                        IkReal x233=((3300.0)*sj8);
                                        IkReal x234=((3300.0)*py*sj6);
                                        j7eval[0]=((1.00378787878788)+cj8);
                                        j7eval[1]=IKsign(((2385.0)+(((2376.0)*cj8))));
                                        j7eval[2]=((IKabs(((-1296.0)+(((3600.0)*x231))+(((-1.0)*pz*x233))+(((-1188.0)*cj8))+((py*sj6*x232))+((x231*x232))+(((3600.0)*py*sj6)))))+(IKabs(((((3600.0)*pz))+((pz*x232))+((py*sj6*x233))+(((-1188.0)*sj8))+((x231*x233))))));
                                        if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j7eval[3];
                                                IkReal x235=(cj6*px);
                                                IkReal x236=((33.0)*cj8);
                                                IkReal x237=((100.0)*pz);
                                                IkReal x238=(py*sj6);
                                                IkReal x239=(pz*sj8);
                                                IkReal x240=((2.77777777777778)*cj8);
                                                j7eval[0]=((1.09090909090909)+(((-2.77777777777778)*x239))+cj8+(((-1.0)*x238*x240))+(((-1.0)*x235*x240))+(((-3.03030303030303)*x235))+(((-3.03030303030303)*x238)));
                                                j7eval[1]=IKsign(((12.96)+(((-33.0)*x239))+(((-1.0)*x235*x236))+(((11.88)*cj8))+(((-36.0)*x238))+(((-36.0)*x235))+(((-1.0)*x236*x238))));
                                                j7eval[2]=((IKabs(((((-10.89)*cj8*sj8))+(((-11.88)*sj8))+(((-1.0)*x235*x237))+(((36.0)*pz))+(((-1.0)*x237*x238)))))+(IKabs(((-12.96)+((pz*x237))+(((-10.89)*(cj8*cj8)))+(((-23.76)*cj8))))));
                                                if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j7eval[3];
                                                        IkReal x241=cj6*cj6;
                                                        IkReal x242=py*py;
                                                        IkReal x243=px*px;
                                                        IkReal x244=pz*pz;
                                                        IkReal x245=(cj6*px);
                                                        IkReal x246=((33.0)*sj8);
                                                        IkReal x247=(py*sj6);
                                                        IkReal x248=((33.0)*cj8);
                                                        IkReal x249=((7.71604938271605)*x242);
                                                        IkReal x250=((100.0)*x242);
                                                        IkReal x251=(x241*x243);
                                                        j7eval[0]=((1.0)+(((15.4320987654321)*x245*x247))+(((7.71604938271605)*x244))+(((-1.0)*x241*x249))+x249+(((-5.55555555555556)*x245))+(((-5.55555555555556)*x247))+(((7.71604938271605)*x251)));
                                                        j7eval[1]=IKsign(((12.96)+(((-72.0)*x245))+(((-72.0)*x247))+(((-1.0)*x241*x250))+(((200.0)*x245*x247))+x250+(((100.0)*x251))+(((100.0)*x244))));
                                                        j7eval[2]=((IKabs(((-12.96)+(((-1.0)*pz*x246))+(((36.0)*x247))+(((36.0)*x245))+(((-11.88)*cj8))+((x245*x248))+((x247*x248)))))+(IKabs(((((-11.88)*sj8))+(((36.0)*pz))+((x245*x246))+((pz*x248))+((x246*x247))))));
                                                        if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                        {
                                                            continue; // no branches [j7]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                bool j7valid[1]= {false};
                                                                _nj7 = 1;
                                                                IkReal x252=cj6*cj6;
                                                                IkReal x253=py*py;
                                                                IkReal x254=(cj6*px);
                                                                IkReal x255=((33.0)*sj8);
                                                                IkReal x256=((33.0)*cj8);
                                                                IkReal x257=(py*sj6);
                                                                IkReal x258=((100.0)*x253);
                                                                CheckValue<IkReal> x259 = IKatan2WithCheck(IkReal(((((-11.88)*sj8))+((pz*x256))+(((36.0)*pz))+((x254*x255))+((x255*x257)))),IkReal(((-12.96)+((x256*x257))+(((-1.0)*pz*x255))+(((-11.88)*cj8))+(((36.0)*x254))+(((36.0)*x257))+((x254*x256)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if(!x259.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x260=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+(((-1.0)*x252*x258))+(((100.0)*(pz*pz)))+(((100.0)*x252*(px*px)))+x258+(((200.0)*x254*x257))+(((-72.0)*x254))+(((-72.0)*x257)))),-1);
                                                                if(!x260.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j7array[0]=((-1.5707963267949)+(x259.value)+(((1.5707963267949)*(x260.value))));
                                                                sj7array[0]=IKsin(j7array[0]);
                                                                cj7array[0]=IKcos(j7array[0]);
                                                                if( j7array[0] > IKPI )
                                                                {
                                                                    j7array[0]-=IK2PI;
                                                                }
                                                                else if( j7array[0] < -IKPI )
                                                                {
                                                                    j7array[0]+=IK2PI;
                                                                }
                                                                j7valid[0] = true;
                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                {
                                                                    if( !j7valid[ij7] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij7[0] = ij7;
                                                                    _ij7[1] = -1;
                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                    {
                                                                        if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                        {
                                                                            j7valid[iij7]=false;
                                                                            _ij7[1] = iij7;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j7 = j7array[ij7];
                                                                    cj7 = cj7array[ij7];
                                                                    sj7 = sj7array[ij7];
                                                                    {
                                                                        IkReal evalcond[5];
                                                                        IkReal x261=IKsin(j7);
                                                                        IkReal x262=IKcos(j7);
                                                                        IkReal x263=((0.33)*cj8);
                                                                        IkReal x264=(py*sj6);
                                                                        IkReal x265=(cj6*px);
                                                                        IkReal x266=((0.33)*sj8);
                                                                        IkReal x267=((0.36)*x262);
                                                                        IkReal x268=((0.36)*x261);
                                                                        IkReal x269=((0.33)*x262);
                                                                        IkReal x270=(pz*x261);
                                                                        IkReal x271=((0.72)*x262);
                                                                        evalcond[0]=(((x262*x266))+(((-1.0)*x261*x263))+pz+(((-1.0)*x268)));
                                                                        evalcond[1]=((-0.36)+(((-1.0)*x262*x263))+x265+x264+(((-1.0)*x261*x266))+(((-1.0)*x267)));
                                                                        evalcond[2]=((-0.36)+((x262*x265))+((x262*x264))+x270+(((-1.0)*x263))+(((-1.0)*x267)));
                                                                        evalcond[3]=((((-1.0)*pz*x262))+((x261*x265))+((x261*x264))+(((-1.0)*x266))+(((-1.0)*x268)));
                                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+((x264*x271))+(((-1.0)*(pz*pz)))+(((-0.2592)*x262))+((x265*x271))+(((-1.0)*(py*py)))+(((0.72)*x270))+(((0.72)*x264))+(((0.72)*x265)));
                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j6;
                                                                        vinfos[0].indices[0] = _ij6[0];
                                                                        vinfos[0].indices[1] = _ij6[1];
                                                                        vinfos[0].maxsolutions = _nj6;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j7;
                                                                        vinfos[1].indices[0] = _ij7[0];
                                                                        vinfos[1].indices[1] = _ij7[1];
                                                                        vinfos[1].maxsolutions = _nj7;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j8;
                                                                        vinfos[2].indices[0] = _ij8[0];
                                                                        vinfos[2].indices[1] = _ij8[1];
                                                                        vinfos[2].maxsolutions = _nj8;
                                                                        int vfree[0];
                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                        bool j7valid[1]= {false};
                                                        _nj7 = 1;
                                                        IkReal x272=((100.0)*pz);
                                                        IkReal x273=(py*sj6);
                                                        IkReal x274=(cj6*px);
                                                        IkReal x275=((33.0)*cj8);
                                                        CheckValue<IkReal> x276=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+(((-1.0)*x273*x275))+(((-1.0)*x274*x275))+(((11.88)*cj8))+(((-33.0)*pz*sj8))+(((-36.0)*x273))+(((-36.0)*x274)))),-1);
                                                        if(!x276.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x277 = IKatan2WithCheck(IkReal(((((-10.89)*cj8*sj8))+(((-1.0)*x272*x274))+(((-1.0)*x272*x273))+(((-11.88)*sj8))+(((36.0)*pz)))),IkReal(((-12.96)+(((-10.89)*(cj8*cj8)))+(((-23.76)*cj8))+((pz*x272)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if(!x277.valid)
                                                        {
                                                            continue;
                                                        }
                                                        j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x276.value)))+(x277.value));
                                                        sj7array[0]=IKsin(j7array[0]);
                                                        cj7array[0]=IKcos(j7array[0]);
                                                        if( j7array[0] > IKPI )
                                                        {
                                                            j7array[0]-=IK2PI;
                                                        }
                                                        else if( j7array[0] < -IKPI )
                                                        {
                                                            j7array[0]+=IK2PI;
                                                        }
                                                        j7valid[0] = true;
                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                        {
                                                            if( !j7valid[ij7] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij7[0] = ij7;
                                                            _ij7[1] = -1;
                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                            {
                                                                if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j7valid[iij7]=false;
                                                                    _ij7[1] = iij7;
                                                                    break;
                                                                }
                                                            }
                                                            j7 = j7array[ij7];
                                                            cj7 = cj7array[ij7];
                                                            sj7 = sj7array[ij7];
                                                            {
                                                                IkReal evalcond[5];
                                                                IkReal x278=IKsin(j7);
                                                                IkReal x279=IKcos(j7);
                                                                IkReal x280=((0.33)*cj8);
                                                                IkReal x281=(py*sj6);
                                                                IkReal x282=(cj6*px);
                                                                IkReal x283=((0.33)*sj8);
                                                                IkReal x284=((0.36)*x279);
                                                                IkReal x285=((0.36)*x278);
                                                                IkReal x286=((0.33)*x279);
                                                                IkReal x287=(pz*x278);
                                                                IkReal x288=((0.72)*x279);
                                                                evalcond[0]=(((x279*x283))+pz+(((-1.0)*x285))+(((-1.0)*x278*x280)));
                                                                evalcond[1]=((-0.36)+x282+x281+(((-1.0)*x284))+(((-1.0)*x279*x280))+(((-1.0)*x278*x283)));
                                                                evalcond[2]=((-0.36)+((x279*x281))+((x279*x282))+x287+(((-1.0)*x280))+(((-1.0)*x284)));
                                                                evalcond[3]=(((x278*x282))+((x278*x281))+(((-1.0)*pz*x279))+(((-1.0)*x283))+(((-1.0)*x285)));
                                                                evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((0.72)*x287))+(((0.72)*x281))+(((0.72)*x282))+(((-1.0)*(pz*pz)))+(((-0.2592)*x279))+(((-1.0)*(py*py)))+((x281*x288))+((x282*x288)));
                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j6;
                                                                vinfos[0].indices[0] = _ij6[0];
                                                                vinfos[0].indices[1] = _ij6[1];
                                                                vinfos[0].maxsolutions = _nj6;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j7;
                                                                vinfos[1].indices[0] = _ij7[0];
                                                                vinfos[1].indices[1] = _ij7[1];
                                                                vinfos[1].maxsolutions = _nj7;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j8;
                                                                vinfos[2].indices[0] = _ij8[0];
                                                                vinfos[2].indices[1] = _ij8[1];
                                                                vinfos[2].maxsolutions = _nj8;
                                                                int vfree[0];
                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                bool j7valid[1]= {false};
                                                _nj7 = 1;
                                                IkReal x289=(cj6*px);
                                                IkReal x290=((3300.0)*cj8);
                                                IkReal x291=((3300.0)*sj8);
                                                IkReal x292=((3300.0)*py*sj6);
                                                CheckValue<IkReal> x293=IKPowWithIntegerCheck<IkReal>(IKsign(((2385.0)+(((2376.0)*cj8)))),-1);
                                                if(!x293.valid)
                                                {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal((((x289*x291))+(((3600.0)*pz))+((pz*x290))+((py*sj6*x291))+(((-1188.0)*sj8)))),IkReal(((-1296.0)+((x289*x290))+(((-1.0)*pz*x291))+(((-1188.0)*cj8))+((py*sj6*x290))+(((3600.0)*x289))+(((3600.0)*py*sj6)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x294.valid)
                                                {
                                                    continue;
                                                }
                                                j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x293.value)))+(x294.value));
                                                sj7array[0]=IKsin(j7array[0]);
                                                cj7array[0]=IKcos(j7array[0]);
                                                if( j7array[0] > IKPI )
                                                {
                                                    j7array[0]-=IK2PI;
                                                }
                                                else if( j7array[0] < -IKPI )
                                                {
                                                    j7array[0]+=IK2PI;
                                                }
                                                j7valid[0] = true;
                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                {
                                                    if( !j7valid[ij7] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij7[0] = ij7;
                                                    _ij7[1] = -1;
                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                    {
                                                        if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j7valid[iij7]=false;
                                                            _ij7[1] = iij7;
                                                            break;
                                                        }
                                                    }
                                                    j7 = j7array[ij7];
                                                    cj7 = cj7array[ij7];
                                                    sj7 = sj7array[ij7];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x295=IKsin(j7);
                                                        IkReal x296=IKcos(j7);
                                                        IkReal x297=((0.33)*cj8);
                                                        IkReal x298=(py*sj6);
                                                        IkReal x299=(cj6*px);
                                                        IkReal x300=((0.33)*sj8);
                                                        IkReal x301=((0.36)*x296);
                                                        IkReal x302=((0.36)*x295);
                                                        IkReal x303=((0.33)*x296);
                                                        IkReal x304=(pz*x295);
                                                        IkReal x305=((0.72)*x296);
                                                        evalcond[0]=(pz+((x296*x300))+(((-1.0)*x295*x297))+(((-1.0)*x302)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x296*x297))+(((-1.0)*x295*x300))+x298+x299+(((-1.0)*x301)));
                                                        evalcond[2]=((-0.36)+(((-1.0)*x297))+x304+((x296*x299))+((x296*x298))+(((-1.0)*x301)));
                                                        evalcond[3]=((((-1.0)*pz*x296))+((x295*x299))+((x295*x298))+(((-1.0)*x300))+(((-1.0)*x302)));
                                                        evalcond[4]=((-0.1503)+(((0.72)*x299))+(((0.72)*x298))+(((0.72)*x304))+(((-1.0)*(px*px)))+((x299*x305))+((x298*x305))+(((-0.2592)*x296))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j6;
                                                        vinfos[0].indices[0] = _ij6[0];
                                                        vinfos[0].indices[1] = _ij6[1];
                                                        vinfos[0].maxsolutions = _nj6;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j7;
                                                        vinfos[1].indices[0] = _ij7[0];
                                                        vinfos[1].indices[1] = _ij7[1];
                                                        vinfos[1].maxsolutions = _nj7;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j8;
                                                        vinfos[2].indices[0] = _ij8[0];
                                                        vinfos[2].indices[1] = _ij8[1];
                                                        vinfos[2].maxsolutions = _nj8;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
    return "<robot:GenericRobot - Hunker (9a2ab31e56b7c896fa8ed10d7389ec5f)>";
}

IKFAST_API const char* GetIkFastVersion()
{
    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
