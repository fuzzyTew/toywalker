#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_frontRightFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-19 12:37:12.505568
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return -IKPI_2;
    }
    else if( f >= 1 )
    {
        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if( f < 0 )
    {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 )
    {
        ret.value = f*f;
    }
    else if( num == 3 )
    {
        ret.value = f*f*f;
    }
    else
    {
        ret.value = 1.0;
        while(num>0)
        {
            if( num & 1 )
            {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 )
    {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[1]);
    x1=IKsin(j[0]);
    x2=IKcos(j[2]);
    x3=IKcos(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x3);
    x8=((0.33)*x2);
    x9=(x0*x1);
    eetrans[0]=(((x1*x4*x6))+((x8*x9))+(((0.36)*x1))+(((0.36)*x9)));
    IkReal x10=((1.0)*x7);
    IkReal x11=((1.0)*x3);
    eetrans[1]=((-0.36)+(((-1.0)*x11*x4*x6))+(((-1.0)*x10))+(((-1.0)*x0*x10))+(((-1.0)*x0*x11*x8)));
    eetrans[2]=((0.15)+(((-1.0)*x0*x6))+((x4*x8))+(((0.36)*x4)));
}

IKFAST_API int GetNumFreeParameters()
{
    return 0;
}
IKFAST_API int* GetFreeParameters()
{
    return NULL;
}
IKFAST_API int GetNumJoints()
{
    return 3;
}

IKFAST_API int GetIkRealSize()
{
    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j9=numeric_limits<IkReal>::quiet_NaN();
        _ij9[0] = -1;
        _ij9[1] = -1;
        _nj9 = -1;
        j10=numeric_limits<IkReal>::quiet_NaN();
        _ij10[0] = -1;
        _ij10[1] = -1;
        _nj10 = -1;
        j11=numeric_limits<IkReal>::quiet_NaN();
        _ij11[0] = -1;
        _ij11[1] = -1;
        _nj11 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=px;
            new_py=((0.36)+py);
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j9eval[1];
                j9eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j9eval[0]) < 0.0000010000000000  )
                {
                    continue; // 0 cases reached

                }
                else
                {
                    {
                        IkReal j9array[2], cj9array[2], sj9array[2];
                        bool j9valid[2]= {false};
                        _nj9 = 2;
                        CheckValue<IkReal> x13 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x13.valid)
                        {
                            continue;
                        }
                        IkReal x12=x13.value;
                        j9array[0]=((-1.0)*x12);
                        sj9array[0]=IKsin(j9array[0]);
                        cj9array[0]=IKcos(j9array[0]);
                        j9array[1]=((3.14159265358979)+(((-1.0)*x12)));
                        sj9array[1]=IKsin(j9array[1]);
                        cj9array[1]=IKcos(j9array[1]);
                        if( j9array[0] > IKPI )
                        {
                            j9array[0]-=IK2PI;
                        }
                        else if( j9array[0] < -IKPI )
                        {
                            j9array[0]+=IK2PI;
                        }
                        j9valid[0] = true;
                        if( j9array[1] > IKPI )
                        {
                            j9array[1]-=IK2PI;
                        }
                        else if( j9array[1] < -IKPI )
                        {
                            j9array[1]+=IK2PI;
                        }
                        j9valid[1] = true;
                        for(int ij9 = 0; ij9 < 2; ++ij9)
                        {
                            if( !j9valid[ij9] )
                            {
                                continue;
                            }
                            _ij9[0] = ij9;
                            _ij9[1] = -1;
                            for(int iij9 = ij9+1; iij9 < 2; ++iij9)
                            {
                                if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
                                {
                                    j9valid[iij9]=false;
                                    _ij9[1] = iij9;
                                    break;
                                }
                            }
                            j9 = j9array[ij9];
                            cj9 = cj9array[ij9];
                            sj9 = sj9array[ij9];

                            {
                                IkReal j11array[2], cj11array[2], sj11array[2];
                                bool j11valid[2]= {false};
                                _nj11 = 2;
                                cj11array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz)))+(((4.20875420875421)*(py*py)))+(((3.03030303030303)*cj9*py))+(((4.20875420875421)*(px*px)))+(((-3.03030303030303)*px*sj9)));
                                if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j11valid[0] = j11valid[1] = true;
                                    j11array[0] = IKacos(cj11array[0]);
                                    sj11array[0] = IKsin(j11array[0]);
                                    cj11array[1] = cj11array[0];
                                    j11array[1] = -j11array[0];
                                    sj11array[1] = -sj11array[0];
                                }
                                else if( isnan(cj11array[0]) )
                                {
                                    // probably any value will work
                                    j11valid[0] = true;
                                    cj11array[0] = 1;
                                    sj11array[0] = 0;
                                    j11array[0] = 0;
                                }
                                for(int ij11 = 0; ij11 < 2; ++ij11)
                                {
                                    if( !j11valid[ij11] )
                                    {
                                        continue;
                                    }
                                    _ij11[0] = ij11;
                                    _ij11[1] = -1;
                                    for(int iij11 = ij11+1; iij11 < 2; ++iij11)
                                    {
                                        if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
                                        {
                                            j11valid[iij11]=false;
                                            _ij11[1] = iij11;
                                            break;
                                        }
                                    }
                                    j11 = j11array[ij11];
                                    cj11 = cj11array[ij11];
                                    sj11 = sj11array[ij11];

                                    {
                                        IkReal j10eval[3];
                                        IkReal x14=(px*sj9);
                                        IkReal x15=((3300.0)*cj11);
                                        IkReal x16=(cj9*py);
                                        IkReal x17=((3300.0)*sj11);
                                        j10eval[0]=((1.00378787878788)+cj11);
                                        j10eval[1]=((IKabs(((-1296.0)+(((3600.0)*x14))+(((-3600.0)*x16))+((x14*x15))+(((-1.0)*pz*x17))+(((-1188.0)*cj11))+(((-1.0)*x15*x16)))))+(IKabs((((pz*x15))+(((3600.0)*pz))+(((-1188.0)*sj11))+((x14*x17))+(((-1.0)*x16*x17))))));
                                        j10eval[2]=IKsign(((2385.0)+(((2376.0)*cj11))));
                                        if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j10eval[3];
                                                IkReal x18=(cj9*py);
                                                IkReal x19=((2.77777777777778)*cj11);
                                                IkReal x20=(pz*sj11);
                                                IkReal x21=(px*sj9);
                                                IkReal x22=((100.0)*pz);
                                                IkReal x23=((33.0)*cj11);
                                                j10eval[0]=((1.09090909090909)+(((-1.0)*x19*x21))+((x18*x19))+(((-3.03030303030303)*x21))+cj11+(((3.03030303030303)*x18))+(((-2.77777777777778)*x20)));
                                                j10eval[1]=IKsign(((12.96)+((x18*x23))+(((-33.0)*x20))+(((-1.0)*x21*x23))+(((-36.0)*x21))+(((11.88)*cj11))+(((36.0)*x18))));
                                                j10eval[2]=((IKabs(((-12.96)+(((-10.89)*(cj11*cj11)))+((pz*x22))+(((-23.76)*cj11)))))+(IKabs((((x18*x22))+(((-1.0)*x21*x22))+(((-10.89)*cj11*sj11))+(((36.0)*pz))+(((-11.88)*sj11))))));
                                                if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j10eval[3];
                                                        IkReal x24=cj9*cj9;
                                                        IkReal x25=px*px;
                                                        IkReal x26=py*py;
                                                        IkReal x27=pz*pz;
                                                        IkReal x28=(px*sj9);
                                                        IkReal x29=((33.0)*sj11);
                                                        IkReal x30=((33.0)*cj11);
                                                        IkReal x31=(cj9*py);
                                                        IkReal x32=((7.71604938271605)*x24);
                                                        IkReal x33=((100.0)*x24);
                                                        j10eval[0]=((1.0)+(((5.55555555555556)*x31))+((x26*x32))+(((7.71604938271605)*x27))+(((7.71604938271605)*x25))+(((-1.0)*x25*x32))+(((-5.55555555555556)*x28))+(((-15.4320987654321)*x28*x31)));
                                                        j10eval[1]=IKsign(((12.96)+(((-72.0)*x28))+((x26*x33))+(((100.0)*x25))+(((100.0)*x27))+(((72.0)*x31))+(((-200.0)*x28*x31))+(((-1.0)*x25*x33))));
                                                        j10eval[2]=((IKabs(((-12.96)+(((-1.0)*x30*x31))+((x28*x30))+(((-1.0)*pz*x29))+(((-36.0)*x31))+(((-11.88)*cj11))+(((36.0)*x28)))))+(IKabs(((((-1.0)*x29*x31))+((pz*x30))+((x28*x29))+(((36.0)*pz))+(((-11.88)*sj11))))));
                                                        if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
                                                        {
                                                            continue; // 0 cases reached

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                                bool j10valid[1]= {false};
                                                                _nj10 = 1;
                                                                IkReal x34=cj9*cj9;
                                                                IkReal x35=px*px;
                                                                IkReal x36=((33.0)*cj11);
                                                                IkReal x37=(cj9*py);
                                                                IkReal x38=(px*sj9);
                                                                IkReal x39=((33.0)*sj11);
                                                                IkReal x40=((100.0)*x35);
                                                                CheckValue<IkReal> x41 = IKatan2WithCheck(IkReal(((((-1.0)*x37*x39))+((pz*x36))+((x38*x39))+(((36.0)*pz))+(((-11.88)*sj11)))),IkReal(((-12.96)+(((-1.0)*x36*x37))+(((36.0)*x38))+(((-1.0)*pz*x39))+((x36*x38))+(((-36.0)*x37))+(((-11.88)*cj11)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if(!x41.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x42=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+(((-200.0)*x37*x38))+(((-72.0)*x38))+(((100.0)*(pz*pz)))+(((100.0)*x34*(py*py)))+(((72.0)*x37))+x40+(((-1.0)*x34*x40)))),-1);
                                                                if(!x42.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j10array[0]=((-1.5707963267949)+(x41.value)+(((1.5707963267949)*(x42.value))));
                                                                sj10array[0]=IKsin(j10array[0]);
                                                                cj10array[0]=IKcos(j10array[0]);
                                                                if( j10array[0] > IKPI )
                                                                {
                                                                    j10array[0]-=IK2PI;
                                                                }
                                                                else if( j10array[0] < -IKPI )
                                                                {
                                                                    j10array[0]+=IK2PI;
                                                                }
                                                                j10valid[0] = true;
                                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                                {
                                                                    if( !j10valid[ij10] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij10[0] = ij10;
                                                                    _ij10[1] = -1;
                                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                                    {
                                                                        if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                        {
                                                                            j10valid[iij10]=false;
                                                                            _ij10[1] = iij10;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j10 = j10array[ij10];
                                                                    cj10 = cj10array[ij10];
                                                                    sj10 = sj10array[ij10];
                                                                    {
                                                                        IkReal evalcond[5];
                                                                        IkReal x43=IKsin(j10);
                                                                        IkReal x44=IKcos(j10);
                                                                        IkReal x45=(px*sj9);
                                                                        IkReal x46=((0.33)*cj11);
                                                                        IkReal x47=(cj9*py);
                                                                        IkReal x48=((0.33)*sj11);
                                                                        IkReal x49=((0.36)*x44);
                                                                        IkReal x50=((0.36)*x43);
                                                                        IkReal x51=(pz*x43);
                                                                        IkReal x52=((1.0)*x44);
                                                                        IkReal x53=((0.72)*x44);
                                                                        evalcond[0]=((((-1.0)*x43*x46))+pz+((x44*x48))+(((-1.0)*x50)));
                                                                        evalcond[1]=((-0.36)+(((-1.0)*x47))+(((-1.0)*x49))+(((-1.0)*x43*x48))+(((-1.0)*x44*x46))+x45);
                                                                        evalcond[2]=((-0.36)+(((-1.0)*x46))+(((-1.0)*x49))+(((-1.0)*x47*x52))+x51+((x44*x45)));
                                                                        evalcond[3]=((((-1.0)*x48))+((x43*x45))+(((-1.0)*x43*x47))+(((-1.0)*pz*x52))+(((-1.0)*x50)));
                                                                        evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.2592)*x44))+(((0.72)*x45))+((x45*x53))+(((-0.72)*x47))+(((-1.0)*x47*x53))+(((0.72)*x51))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j9;
                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                        vinfos[0].maxsolutions = _nj9;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j10;
                                                                        vinfos[1].indices[0] = _ij10[0];
                                                                        vinfos[1].indices[1] = _ij10[1];
                                                                        vinfos[1].maxsolutions = _nj10;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j11;
                                                                        vinfos[2].indices[0] = _ij11[0];
                                                                        vinfos[2].indices[1] = _ij11[1];
                                                                        vinfos[2].maxsolutions = _nj11;
                                                                        int vfree[0];
                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                                        bool j10valid[1]= {false};
                                                        _nj10 = 1;
                                                        IkReal x54=(cj9*py);
                                                        IkReal x55=((33.0)*cj11);
                                                        IkReal x56=((100.0)*pz);
                                                        IkReal x57=(px*sj9);
                                                        CheckValue<IkReal> x58 = IKatan2WithCheck(IkReal(((((-1.0)*x56*x57))+(((-10.89)*cj11*sj11))+(((36.0)*pz))+(((-11.88)*sj11))+((x54*x56)))),IkReal(((-12.96)+(((-10.89)*(cj11*cj11)))+(((-23.76)*cj11))+((pz*x56)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if(!x58.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x59=IKPowWithIntegerCheck<IkReal>(IKsign(((12.96)+(((-36.0)*x57))+(((36.0)*x54))+(((-1.0)*x55*x57))+(((-33.0)*pz*sj11))+(((11.88)*cj11))+((x54*x55)))),-1);
                                                        if(!x59.valid)
                                                        {
                                                            continue;
                                                        }
                                                        j10array[0]=((-1.5707963267949)+(x58.value)+(((1.5707963267949)*(x59.value))));
                                                        sj10array[0]=IKsin(j10array[0]);
                                                        cj10array[0]=IKcos(j10array[0]);
                                                        if( j10array[0] > IKPI )
                                                        {
                                                            j10array[0]-=IK2PI;
                                                        }
                                                        else if( j10array[0] < -IKPI )
                                                        {
                                                            j10array[0]+=IK2PI;
                                                        }
                                                        j10valid[0] = true;
                                                        for(int ij10 = 0; ij10 < 1; ++ij10)
                                                        {
                                                            if( !j10valid[ij10] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij10[0] = ij10;
                                                            _ij10[1] = -1;
                                                            for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                            {
                                                                if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j10valid[iij10]=false;
                                                                    _ij10[1] = iij10;
                                                                    break;
                                                                }
                                                            }
                                                            j10 = j10array[ij10];
                                                            cj10 = cj10array[ij10];
                                                            sj10 = sj10array[ij10];
                                                            {
                                                                IkReal evalcond[5];
                                                                IkReal x60=IKsin(j10);
                                                                IkReal x61=IKcos(j10);
                                                                IkReal x62=(px*sj9);
                                                                IkReal x63=((0.33)*cj11);
                                                                IkReal x64=(cj9*py);
                                                                IkReal x65=((0.33)*sj11);
                                                                IkReal x66=((0.36)*x61);
                                                                IkReal x67=((0.36)*x60);
                                                                IkReal x68=(pz*x60);
                                                                IkReal x69=((1.0)*x61);
                                                                IkReal x70=((0.72)*x61);
                                                                evalcond[0]=(((x61*x65))+pz+(((-1.0)*x67))+(((-1.0)*x60*x63)));
                                                                evalcond[1]=((-0.36)+(((-1.0)*x61*x63))+x62+(((-1.0)*x66))+(((-1.0)*x60*x65))+(((-1.0)*x64)));
                                                                evalcond[2]=((-0.36)+((x61*x62))+x68+(((-1.0)*x64*x69))+(((-1.0)*x63))+(((-1.0)*x66)));
                                                                evalcond[3]=((((-1.0)*x60*x64))+((x60*x62))+(((-1.0)*pz*x69))+(((-1.0)*x67))+(((-1.0)*x65)));
                                                                evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+(((-0.72)*x64))+(((0.72)*x62))+(((0.72)*x68))+((x62*x70))+(((-0.2592)*x61))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*x64*x70)));
                                                                if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j9;
                                                                vinfos[0].indices[0] = _ij9[0];
                                                                vinfos[0].indices[1] = _ij9[1];
                                                                vinfos[0].maxsolutions = _nj9;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j10;
                                                                vinfos[1].indices[0] = _ij10[0];
                                                                vinfos[1].indices[1] = _ij10[1];
                                                                vinfos[1].maxsolutions = _nj10;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j11;
                                                                vinfos[2].indices[0] = _ij11[0];
                                                                vinfos[2].indices[1] = _ij11[1];
                                                                vinfos[2].maxsolutions = _nj11;
                                                                int vfree[0];
                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                bool j10valid[1]= {false};
                                                _nj10 = 1;
                                                IkReal x71=((3300.0)*cj11);
                                                IkReal x72=(cj9*py);
                                                IkReal x73=((3300.0)*sj11);
                                                IkReal x74=(px*sj9);
                                                CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal((((pz*x71))+(((3600.0)*pz))+(((-1188.0)*sj11))+(((-1.0)*x72*x73))+((x73*x74)))),IkReal(((-1296.0)+(((3600.0)*x74))+(((-3600.0)*x72))+(((-1188.0)*cj11))+(((-1.0)*x71*x72))+(((-1.0)*pz*x73))+((x71*x74)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x75.valid)
                                                {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x76=IKPowWithIntegerCheck<IkReal>(IKsign(((2385.0)+(((2376.0)*cj11)))),-1);
                                                if(!x76.valid)
                                                {
                                                    continue;
                                                }
                                                j10array[0]=((-1.5707963267949)+(x75.value)+(((1.5707963267949)*(x76.value))));
                                                sj10array[0]=IKsin(j10array[0]);
                                                cj10array[0]=IKcos(j10array[0]);
                                                if( j10array[0] > IKPI )
                                                {
                                                    j10array[0]-=IK2PI;
                                                }
                                                else if( j10array[0] < -IKPI )
                                                {
                                                    j10array[0]+=IK2PI;
                                                }
                                                j10valid[0] = true;
                                                for(int ij10 = 0; ij10 < 1; ++ij10)
                                                {
                                                    if( !j10valid[ij10] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij10[0] = ij10;
                                                    _ij10[1] = -1;
                                                    for(int iij10 = ij10+1; iij10 < 1; ++iij10)
                                                    {
                                                        if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j10valid[iij10]=false;
                                                            _ij10[1] = iij10;
                                                            break;
                                                        }
                                                    }
                                                    j10 = j10array[ij10];
                                                    cj10 = cj10array[ij10];
                                                    sj10 = sj10array[ij10];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x77=IKsin(j10);
                                                        IkReal x78=IKcos(j10);
                                                        IkReal x79=(px*sj9);
                                                        IkReal x80=((0.33)*cj11);
                                                        IkReal x81=(cj9*py);
                                                        IkReal x82=((0.33)*sj11);
                                                        IkReal x83=((0.36)*x78);
                                                        IkReal x84=((0.36)*x77);
                                                        IkReal x85=(pz*x77);
                                                        IkReal x86=((1.0)*x78);
                                                        IkReal x87=((0.72)*x78);
                                                        evalcond[0]=(((x78*x82))+(((-1.0)*x77*x80))+pz+(((-1.0)*x84)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x77*x82))+(((-1.0)*x78*x80))+x79+(((-1.0)*x81))+(((-1.0)*x83)));
                                                        evalcond[2]=((-0.36)+(((-1.0)*x81*x86))+((x78*x79))+x85+(((-1.0)*x80))+(((-1.0)*x83)));
                                                        evalcond[3]=((((-1.0)*x77*x81))+(((-1.0)*x84))+(((-1.0)*x82))+((x77*x79))+(((-1.0)*pz*x86)));
                                                        evalcond[4]=((-0.1503)+(((-1.0)*x81*x87))+(((-0.72)*x81))+(((-1.0)*(px*px)))+((x79*x87))+(((-1.0)*(pz*pz)))+(((-0.2592)*x78))+(((-1.0)*(py*py)))+(((0.72)*x79))+(((0.72)*x85)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j9;
                                                        vinfos[0].indices[0] = _ij9[0];
                                                        vinfos[0].indices[1] = _ij9[1];
                                                        vinfos[0].maxsolutions = _nj9;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j10;
                                                        vinfos[1].indices[0] = _ij10[0];
                                                        vinfos[1].indices[1] = _ij10[1];
                                                        vinfos[1].maxsolutions = _nj10;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j11;
                                                        vinfos[2].indices[0] = _ij11[0];
                                                        vinfos[2].indices[1] = _ij11[1];
                                                        vinfos[2].maxsolutions = _nj11;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
    return "<robot:GenericRobot - Hunker (f7071dcf5459c249fade087ece139e54)>";
}

IKFAST_API const char* GetIkFastVersion()
{
    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
