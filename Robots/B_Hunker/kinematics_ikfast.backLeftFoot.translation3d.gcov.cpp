#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL float
#define IKFAST_NAMESPACE kinematics_ikfast_backLeftFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-26 16:20:50.913801
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return float(-IKPI_2);
    }
    else if (false)//else if( f >= 1 )
    {
//        return float(IKPI_2);
    }
//    return asinf(f);
}
inline double IKasin(double f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if (false)//else if( f >= 1 )
    {
//        return IKPI_2;
    }
//    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return float(IKPI);
    }
    else if( f >= 1 )
    {
//        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if (false)//if( f <= 0.0f )
    {
//        return 0.0f;
    }
//    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if (false)//if( f <= 0.0 )
    {
//        return 0.0;
    }
//    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKsin(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKcos(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.24)*x5);
    x7=((0.36)*x3);
    x8=((0.36)*x0);
    x9=((0.24)*x1*x2);
    IkReal x10=((1.0)*x0);
    IkReal x11=((1.0)*x8);
    eetrans[0]=((((-1.0)*x10*x9))+(((-1.0)*x11))+(((-1.0)*x10*x4*x6))+(((-1.0)*x1*x11)));
    eetrans[1]=((0.36)+((x1*x7))+x7+((x3*x9))+((x3*x4*x6)));
    eetrans[2]=((0.15)+(((-0.36)*x4))+(((-0.24)*x2*x4))+((x1*x6)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j0=numeric_limits<IkReal>::quiet_NaN();
        _ij0[0] = -1;
        _ij0[1] = -1;
        _nj0 = -1;
        j1=numeric_limits<IkReal>::quiet_NaN();
        _ij1[0] = -1;
        _ij1[1] = -1;
        _nj1 = -1;
        j2=numeric_limits<IkReal>::quiet_NaN();
        _ij2[0] = -1;
        _ij2[1] = -1;
        _nj2 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=px;
            new_py=((-0.36)+py);
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j0eval[1];
                j0eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j0eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
//                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
//                                bgotonextstatement=false;
                                {
                                    IkReal j2array[2], cj2array[2], sj2array[2];
                                    bool j2valid[2]= {false};
//                                    _nj2 = 2;
//                                    cj2array[0]=((-0.333333333333333)+(((5.78703703703704)*(pz*pz))));
                                    if (false)//if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
//                                        j2valid[0] = j2valid[1] = true;
//                                        j2array[0] = IKacos(cj2array[0]);
//                                        sj2array[0] = IKsin(j2array[0]);
//                                        cj2array[1] = cj2array[0];
//                                        j2array[1] = -j2array[0];
//                                        sj2array[1] = -sj2array[0];
                                    }
                                    else if (false)//else if( isnan(cj2array[0]) )
                                    {
                                        // probably any value will work
//                                        j2valid[0] = true;
//                                        cj2array[0] = 1;
//                                        sj2array[0] = 0;
//                                        j2array[0] = 0;
                                    }
//                                    for(int ij2 = 0; ij2 < 2; ++ij2)
                                    {
                                        if (false)//if( !j2valid[ij2] )
                                        {
//                                            continue;
                                        }
//                                        _ij2[0] = ij2;
//                                        _ij2[1] = -1;
//                                        for(int iij2 = ij2+1; iij2 < 2; ++iij2)
                                        {
                                            if (false)//if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
                                            {
//                                                j2valid[iij2]=false;
//                                                _ij2[1] = iij2;
//                                                break;
                                            }
                                        }
//                                        j2 = j2array[ij2];
//                                        cj2 = cj2array[ij2];
//                                        sj2 = sj2array[ij2];

                                        {
                                            IkReal j1eval[3];
//                                            px=0;
//                                            py=0;
//                                            pp=pz*pz;
//                                            IkReal x12=pz*pz;
//                                            IkReal x13=((150.0)*pz);
//                                            j1eval[0]=((1.0)+(((7.71604938271605)*x12)));
//                                            j1eval[1]=IKsign(((81.0)+(((625.0)*x12))));
//                                            j1eval[2]=((IKabs(((((-54.0)*sj2))+(((-1.0)*cj2*x13))+(((-225.0)*pz)))))+(IKabs(((-81.0)+(((-54.0)*cj2))+((sj2*x13))))));
                                            if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j1eval[3];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    IkReal x14=((54.0)*sj2);
//                                                    IkReal x15=((225.0)*pz);
//                                                    IkReal x16=(cj2*pz);
//                                                    j1eval[0]=(sj2+(((-4.16666666666667)*pz))+(((-2.77777777777778)*x16)));
//                                                    j1eval[1]=((IKabs(((-36.0)+(((36.0)*(cj2*cj2)))+(((625.0)*(pz*pz))))))+(IKabs(((((-1.0)*x14))+(((-36.0)*cj2*sj2))+x15))));
//                                                    j1eval[2]=IKsign(((((-1.0)*x15))+x14+(((-150.0)*x16))));
                                                    if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j1eval[1];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j1eval[0]=((-1.5)+(((-2.77777777777778)*pz*sj2))+(((-1.0)*cj2)));
                                                            if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
//                                                                        IkReal x17=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                        if (false)//if((x17) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x18=IKabs(IKsqrt(x17));
//                                                                        IkReal x24 = x17;
                                                                        if (false)//if(IKabs(x24)==0)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x19=pow(x24,-0.5);
//                                                                        CheckValue<IkReal> x25=IKPowWithIntegerCheck<IKFAST_REAL>(x18,-1);
                                                                        if (false)//if(!x25.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x20=x25.value;
//                                                                        IkReal x21=((1.5)*x20);
                                                                        if (false)//if((((1.0)+(((-2.25)*(x20*x20))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x22=IKsqrt(((1.0)+(((-2.25)*(x20*x20)))));
//                                                                        IkReal x23=(x19*x22);
                                                                        if (false)//if( (x21) < -1-IKFAST_SINCOS_THRESH || (x21) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x26 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x26.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal gconst0=((IKasin(x21))+(((-1.0)*(x26.value))));
//                                                                        IkReal gconst1=((((-4.16666666666667)*pz*x19*x20))+x23);
//                                                                        IkReal gconst2=((((-1.0)*x19*x21))+(((-2.77777777777778)*pz*x23)));
                                                                        if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x27=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if (false)//if(!x27.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((1.5)*(x27.value))) < -1-IKFAST_SINCOS_THRESH || (((1.5)*(x27.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x28 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x28.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((1.5)*(x27.value))))))+(x28.value)+j2)))), 6.28318530717959)));
                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
//                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j1eval[2];
//                                                                                IkReal x29=pz*pz;
//                                                                                IkReal x30=x17;
                                                                                if (false)//if((x30) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x31=IKabs(IKsqrt(x30));
//                                                                                IkReal x38 = x30;
                                                                                if (false)//if(IKabs(x38)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x32=pow(x38,-0.5);
//                                                                                CheckValue<IkReal> x39=IKPowWithIntegerCheck<IKFAST_REAL>(x31,-1);
                                                                                if (false)//if(!x39.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x33=x39.value;
//                                                                                IkReal x34=((1.5)*x33);
                                                                                if (false)//if((((1.0)+(((-2.25)*(x33*x33))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x35=IKsqrt(((1.0)+(((-2.25)*(x33*x33)))));
//                                                                                CheckValue<IkReal> x40 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x40.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (x34) < -1-IKFAST_SINCOS_THRESH || (x34) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x36=((((-1.0)*(x40.value)))+(IKasin(x34)));
//                                                                                IkReal x37=(x32*x35);
//                                                                                px=0;
//                                                                                py=0;
//                                                                                pp=x29;
//                                                                                sj2=gconst1;
//                                                                                cj2=gconst2;
//                                                                                j2=x36;
//                                                                                IkReal gconst0=x36;
//                                                                                IkReal gconst1=((((-4.16666666666667)*pz*x32*x33))+x37);
//                                                                                IkReal gconst2=((((-2.77777777777778)*pz*x37))+(((-1.0)*x32*x34)));
//                                                                                IkReal x41=pz*pz;
//                                                                                j1eval[0]=((1.0)+(((7.71604938271605)*x41)));
//                                                                                j1eval[1]=IKsign(((81.0)+(((625.0)*x41))));
                                                                                if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]= {false};
//                                                                                        _nj1 = 1;
//                                                                                        IkReal x42=((225.0)*pz);
//                                                                                        IkReal x43=((54.0)*gconst1);
//                                                                                        CheckValue<IkReal> x44 = IKatan2WithCheck(IkReal(((((36.0)*(gconst2*gconst2)))+(((108.0)*gconst2)))),IkReal(((((-1.0)*x43))+x42+(((-36.0)*gconst1*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x44.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x45=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-1.0)*x42))+x43+(((-150.0)*gconst2*pz)))),-1);
                                                                                        if (false)//if(!x45.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j1array[0]=((-1.5707963267949)+(x44.value)+(((1.5707963267949)*(x45.value))));
//                                                                                        sj1array[0]=IKsin(j1array[0]);
//                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if (false)//if( j1array[0] > IKPI )
                                                                                        {
//                                                                                            j1array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j1array[0] < -IKPI )
                                                                                        {
//                                                                                            j1array[0]+=IK2PI;
                                                                                        }
//                                                                                        j1valid[0] = true;
//                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if (false)//if( !j1valid[ij1] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij1[0] = ij1;
//                                                                                            _ij1[1] = -1;
//                                                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j1valid[iij1]=false;
//                                                                                                    _ij1[1] = iij1;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j1 = j1array[ij1];
//                                                                                            cj1 = cj1array[ij1];
//                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x46=IKcos(j1);
//                                                                                                IkReal x47=IKsin(j1);
//                                                                                                IkReal x48=((0.24)*gconst2);
//                                                                                                IkReal x49=((0.24)*gconst1);
//                                                                                                IkReal x50=((0.36)*x46);
//                                                                                                IkReal x51=((0.36)*x47);
//                                                                                                IkReal x52=(pz*x47);
//                                                                                                evalcond[0]=(((pz*x46))+(((-1.0)*x49))+(((-1.0)*x51)));
//                                                                                                evalcond[1]=((-0.36)+(((-1.0)*x48))+(((-1.0)*x50))+(((-1.0)*x52)));
//                                                                                                evalcond[2]=((-0.2016)+(((-0.2592)*x46))+(((-1.0)*(pz*pz)))+(((-0.72)*x52)));
//                                                                                                evalcond[3]=((-0.36)+(((-1.0)*x50))+(((-1.0)*x47*x49))+(((-1.0)*x46*x48)));
//                                                                                                evalcond[4]=(((x46*x49))+(((-1.0)*pz))+(((-1.0)*x51))+(((-1.0)*x47*x48)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                bool j0valid[1]= {false};
//                                                                                                _nj0 = 1;
//                                                                                                j0array[0]=0;
//                                                                                                sj0array[0]=IKsin(j0array[0]);
//                                                                                                cj0array[0]=IKcos(j0array[0]);
                                                                                                if (false)//if( j0array[0] > IKPI )
                                                                                                {
//                                                                                                    j0array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j0array[0] < -IKPI )
                                                                                                {
//                                                                                                    j0array[0]+=IK2PI;
                                                                                                }
//                                                                                                j0valid[0] = true;
//                                                                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                {
                                                                                                    if (false)//if( !j0valid[ij0] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij0[0] = ij0;
//                                                                                                    _ij0[1] = -1;
//                                                                                                    for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                    {
                                                                                                        if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j0valid[iij0]=false;
//                                                                                                            _ij0[1] = iij0;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j0 = j0array[ij0];
//                                                                                                    cj0 = cj0array[ij0];
//                                                                                                    sj0 = sj0array[ij0];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j0;
//                                                                                                        vinfos[0].indices[0] = _ij0[0];
//                                                                                                        vinfos[0].indices[1] = _ij0[1];
//                                                                                                        vinfos[0].maxsolutions = _nj0;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j1;
//                                                                                                        vinfos[1].indices[0] = _ij1[0];
//                                                                                                        vinfos[1].indices[1] = _ij1[1];
//                                                                                                        vinfos[1].maxsolutions = _nj1;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j2;
//                                                                                                        vinfos[2].indices[0] = _ij2[0];
//                                                                                                        vinfos[2].indices[1] = _ij2[1];
//                                                                                                        vinfos[2].maxsolutions = _nj2;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]= {false};
//                                                                                        _nj1 = 1;
//                                                                                        IkReal x53=((150.0)*pz);
//                                                                                        CheckValue<IkReal> x54=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                                                        if (false)//if(!x54.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x55 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x53))+(((-225.0)*pz))+(((-54.0)*gconst1)))),IkReal(((-81.0)+((gconst1*x53))+(((-54.0)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x55.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x54.value)))+(x55.value));
//                                                                                        sj1array[0]=IKsin(j1array[0]);
//                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if (false)//if( j1array[0] > IKPI )
                                                                                        {
//                                                                                            j1array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j1array[0] < -IKPI )
                                                                                        {
//                                                                                            j1array[0]+=IK2PI;
                                                                                        }
//                                                                                        j1valid[0] = true;
//                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if (false)//if( !j1valid[ij1] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij1[0] = ij1;
//                                                                                            _ij1[1] = -1;
//                                                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j1valid[iij1]=false;
//                                                                                                    _ij1[1] = iij1;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j1 = j1array[ij1];
//                                                                                            cj1 = cj1array[ij1];
//                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x56=IKcos(j1);
//                                                                                                IkReal x57=IKsin(j1);
//                                                                                                IkReal x58=((0.24)*gconst2);
//                                                                                                IkReal x59=((0.24)*gconst1);
//                                                                                                IkReal x60=((0.36)*x56);
//                                                                                                IkReal x61=((0.36)*x57);
//                                                                                                IkReal x62=(pz*x57);
//                                                                                                evalcond[0]=(((pz*x56))+(((-1.0)*x61))+(((-1.0)*x59)));
//                                                                                                evalcond[1]=((-0.36)+(((-1.0)*x60))+(((-1.0)*x58))+(((-1.0)*x62)));
//                                                                                                evalcond[2]=((-0.2016)+(((-0.72)*x62))+(((-0.2592)*x56))+(((-1.0)*(pz*pz))));
//                                                                                                evalcond[3]=((-0.36)+(((-1.0)*x56*x58))+(((-1.0)*x60))+(((-1.0)*x57*x59)));
//                                                                                                evalcond[4]=((((-1.0)*pz))+((x56*x59))+(((-1.0)*x61))+(((-1.0)*x57*x58)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                bool j0valid[1]= {false};
//                                                                                                _nj0 = 1;
//                                                                                                j0array[0]=0;
//                                                                                                sj0array[0]=IKsin(j0array[0]);
//                                                                                                cj0array[0]=IKcos(j0array[0]);
                                                                                                if (false)//if( j0array[0] > IKPI )
                                                                                                {
//                                                                                                    j0array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j0array[0] < -IKPI )
                                                                                                {
//                                                                                                    j0array[0]+=IK2PI;
                                                                                                }
//                                                                                                j0valid[0] = true;
//                                                                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                {
                                                                                                    if (false)//if( !j0valid[ij0] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij0[0] = ij0;
//                                                                                                    _ij0[1] = -1;
//                                                                                                    for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                    {
                                                                                                        if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j0valid[iij0]=false;
//                                                                                                            _ij0[1] = iij0;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j0 = j0array[ij0];
//                                                                                                    cj0 = cj0array[ij0];
//                                                                                                    sj0 = sj0array[ij0];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j0;
//                                                                                                        vinfos[0].indices[0] = _ij0[0];
//                                                                                                        vinfos[0].indices[1] = _ij0[1];
//                                                                                                        vinfos[0].maxsolutions = _nj0;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j1;
//                                                                                                        vinfos[1].indices[0] = _ij1[0];
//                                                                                                        vinfos[1].indices[1] = _ij1[1];
//                                                                                                        vinfos[1].maxsolutions = _nj1;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j2;
//                                                                                                        vinfos[2].indices[0] = _ij2[0];
//                                                                                                        vinfos[2].indices[1] = _ij2[1];
//                                                                                                        vinfos[2].maxsolutions = _nj2;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if (false)//if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            IkReal x63=((1.0)+(((7.71604938271605)*(pz*pz))));
//                                                                            IkReal x70 = x63;
                                                                            if (false)//if(IKabs(x70)==0)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x64=pow(x70,-0.5);
                                                                            if (false)//if((x63) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x65=IKabs(IKsqrt(x63));
//                                                                            IkReal x66=(pz*x64);
//                                                                            CheckValue<IkReal> x71=IKPowWithIntegerCheck<IKFAST_REAL>(x65,-1);
                                                                            if (false)//if(!x71.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x67=x71.value;
//                                                                            IkReal x68=((1.5)*x67);
                                                                            if (false)//if((((1.0)+(((-2.25)*(x67*x67))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x69=IKsqrt(((1.0)+(((-2.25)*(x67*x67)))));
//                                                                            CheckValue<IkReal> x72 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x72.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (x68) < -1-IKFAST_SINCOS_THRESH || (x68) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(x72.value)))+(((-1.0)*(IKasin(x68)))));
//                                                                            IkReal gconst4=((((-1.0)*x64*x69))+(((-4.16666666666667)*x66*x67)));
//                                                                            IkReal gconst5=((((2.77777777777778)*x66*x69))+(((-1.0)*x64*x68)));
                                                                            if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x73=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if (false)//if(!x73.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (((1.5)*(x73.value))) < -1-IKFAST_SINCOS_THRESH || (((1.5)*(x73.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x74 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x74.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((1.5)*(x73.value))))+(x74.value)+j2)))), 6.28318530717959)));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j1eval[2];
//                                                                                    IkReal x75=pz*pz;
//                                                                                    IkReal x76=x63;
//                                                                                    IkReal x84 = x76;
                                                                                    if (false)//if(IKabs(x84)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x77=pow(x84,-0.5);
                                                                                    if (false)//if((x76) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x78=IKabs(IKsqrt(x76));
//                                                                                    IkReal x79=(pz*x77);
//                                                                                    CheckValue<IkReal> x85=IKPowWithIntegerCheck<IKFAST_REAL>(x78,-1);
                                                                                    if (false)//if(!x85.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x80=x85.value;
//                                                                                    IkReal x81=((1.5)*x80);
                                                                                    if (false)//if((((1.0)+(((-2.25)*(x80*x80))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x82=IKsqrt(((1.0)+(((-2.25)*(x80*x80)))));
//                                                                                    CheckValue<IkReal> x86 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x86.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (x81) < -1-IKFAST_SINCOS_THRESH || (x81) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x83=((((1.0)*(x86.value)))+(((1.0)*(IKasin(x81)))));
//                                                                                    px=0;
//                                                                                    py=0;
//                                                                                    pp=x75;
//                                                                                    sj2=gconst4;
//                                                                                    cj2=gconst5;
//                                                                                    j2=((3.14159265)+(((-1.0)*x83)));
//                                                                                    IkReal gconst3=((3.14159265358979)+(((-1.0)*x83)));
//                                                                                    IkReal gconst4=((((-1.0)*x77*x82))+(((-4.16666666666667)*x79*x80)));
//                                                                                    IkReal gconst5=((((-1.0)*x77*x81))+(((2.77777777777778)*x79*x82)));
//                                                                                    IkReal x87=pz*pz;
//                                                                                    j1eval[0]=((1.0)+(((7.71604938271605)*x87)));
//                                                                                    j1eval[1]=IKsign(((81.0)+(((625.0)*x87))));
                                                                                    if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1]= {false};
//                                                                                            _nj1 = 1;
//                                                                                            IkReal x88=((54.0)*gconst4);
//                                                                                            IkReal x89=((225.0)*pz);
//                                                                                            CheckValue<IkReal> x90=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*gconst5*pz))+x88+(((-1.0)*x89)))),-1);
                                                                                            if (false)//if(!x90.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x91 = IKatan2WithCheck(IkReal(((((-36.0)*(gconst4*gconst4)))+(((625.0)*(pz*pz))))),IkReal((x89+(((-1.0)*x88))+(((-36.0)*gconst4*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x91.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x90.value)))+(x91.value));
//                                                                                            sj1array[0]=IKsin(j1array[0]);
//                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                            if (false)//if( j1array[0] > IKPI )
                                                                                            {
//                                                                                                j1array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j1array[0] < -IKPI )
                                                                                            {
//                                                                                                j1array[0]+=IK2PI;
                                                                                            }
//                                                                                            j1valid[0] = true;
//                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if (false)//if( !j1valid[ij1] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij1[0] = ij1;
//                                                                                                _ij1[1] = -1;
//                                                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j1valid[iij1]=false;
//                                                                                                        _ij1[1] = iij1;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j1 = j1array[ij1];
//                                                                                                cj1 = cj1array[ij1];
//                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x92=IKcos(j1);
//                                                                                                    IkReal x93=IKsin(j1);
//                                                                                                    IkReal x94=((0.24)*gconst4);
//                                                                                                    IkReal x95=((0.24)*gconst5);
//                                                                                                    IkReal x96=((0.36)*x92);
//                                                                                                    IkReal x97=((0.36)*x93);
//                                                                                                    IkReal x98=((0.24)*x92);
//                                                                                                    IkReal x99=(pz*x93);
//                                                                                                    evalcond[0]=(((pz*x92))+(((-1.0)*x97))+(((-1.0)*x94)));
//                                                                                                    evalcond[1]=((-0.36)+(((-1.0)*x99))+(((-1.0)*x96))+(((-1.0)*x95)));
//                                                                                                    evalcond[2]=((-0.2016)+(((-0.72)*x99))+(((-0.2592)*x92))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=((-0.36)+(((-1.0)*x92*x95))+(((-1.0)*x96))+(((-1.0)*x93*x94)));
//                                                                                                    evalcond[4]=(((x92*x94))+(((-1.0)*pz))+(((-1.0)*x97))+(((-1.0)*x93*x95)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                    bool j0valid[1]= {false};
//                                                                                                    _nj0 = 1;
//                                                                                                    j0array[0]=0;
//                                                                                                    sj0array[0]=IKsin(j0array[0]);
//                                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                                    if (false)//if( j0array[0] > IKPI )
                                                                                                    {
//                                                                                                        j0array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j0array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j0array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j0valid[0] = true;
//                                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                    {
                                                                                                        if (false)//if( !j0valid[ij0] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij0[0] = ij0;
//                                                                                                        _ij0[1] = -1;
//                                                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                        {
                                                                                                            if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j0valid[iij0]=false;
//                                                                                                                _ij0[1] = iij0;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j0 = j0array[ij0];
//                                                                                                        cj0 = cj0array[ij0];
//                                                                                                        sj0 = sj0array[ij0];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j0;
//                                                                                                            vinfos[0].indices[0] = _ij0[0];
//                                                                                                            vinfos[0].indices[1] = _ij0[1];
//                                                                                                            vinfos[0].maxsolutions = _nj0;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j1;
//                                                                                                            vinfos[1].indices[0] = _ij1[0];
//                                                                                                            vinfos[1].indices[1] = _ij1[1];
//                                                                                                            vinfos[1].maxsolutions = _nj1;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j2;
//                                                                                                            vinfos[2].indices[0] = _ij2[0];
//                                                                                                            vinfos[2].indices[1] = _ij2[1];
//                                                                                                            vinfos[2].maxsolutions = _nj2;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1]= {false};
//                                                                                            _nj1 = 1;
//                                                                                            IkReal x100=((150.0)*pz);
//                                                                                            CheckValue<IkReal> x101=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                                                            if (false)//if(!x101.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x102 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x100))+(((-225.0)*pz))+(((-54.0)*gconst4)))),IkReal(((-81.0)+((gconst4*x100))+(((-54.0)*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x102.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x101.value)))+(x102.value));
//                                                                                            sj1array[0]=IKsin(j1array[0]);
//                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                            if (false)//if( j1array[0] > IKPI )
                                                                                            {
//                                                                                                j1array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j1array[0] < -IKPI )
                                                                                            {
//                                                                                                j1array[0]+=IK2PI;
                                                                                            }
//                                                                                            j1valid[0] = true;
//                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if (false)//if( !j1valid[ij1] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij1[0] = ij1;
//                                                                                                _ij1[1] = -1;
//                                                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j1valid[iij1]=false;
//                                                                                                        _ij1[1] = iij1;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j1 = j1array[ij1];
//                                                                                                cj1 = cj1array[ij1];
//                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x103=IKcos(j1);
//                                                                                                    IkReal x104=IKsin(j1);
//                                                                                                    IkReal x105=((0.24)*gconst4);
//                                                                                                    IkReal x106=((0.24)*gconst5);
//                                                                                                    IkReal x107=((0.36)*x103);
//                                                                                                    IkReal x108=((0.36)*x104);
//                                                                                                    IkReal x109=((0.24)*x103);
//                                                                                                    IkReal x110=(pz*x104);
//                                                                                                    evalcond[0]=(((pz*x103))+(((-1.0)*x108))+(((-1.0)*x105)));
//                                                                                                    evalcond[1]=((-0.36)+(((-1.0)*x107))+(((-1.0)*x106))+(((-1.0)*x110)));
//                                                                                                    evalcond[2]=((-0.2016)+(((-0.72)*x110))+(((-0.2592)*x103))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=((-0.36)+(((-1.0)*x104*x105))+(((-1.0)*x107))+(((-1.0)*x103*x106)));
//                                                                                                    evalcond[4]=((((-1.0)*x104*x106))+(((-1.0)*x108))+((x103*x105))+(((-1.0)*pz)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                    bool j0valid[1]= {false};
//                                                                                                    _nj0 = 1;
//                                                                                                    j0array[0]=0;
//                                                                                                    sj0array[0]=IKsin(j0array[0]);
//                                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                                    if (false)//if( j0array[0] > IKPI )
                                                                                                    {
//                                                                                                        j0array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j0array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j0array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j0valid[0] = true;
//                                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                    {
                                                                                                        if (false)//if( !j0valid[ij0] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij0[0] = ij0;
//                                                                                                        _ij0[1] = -1;
//                                                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                        {
                                                                                                            if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j0valid[iij0]=false;
//                                                                                                                _ij0[1] = iij0;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j0 = j0array[ij0];
//                                                                                                        cj0 = cj0array[ij0];
//                                                                                                        sj0 = sj0array[ij0];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j0;
//                                                                                                            vinfos[0].indices[0] = _ij0[0];
//                                                                                                            vinfos[0].indices[1] = _ij0[1];
//                                                                                                            vinfos[0].maxsolutions = _nj0;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j1;
//                                                                                                            vinfos[1].indices[0] = _ij1[0];
//                                                                                                            vinfos[1].indices[1] = _ij1[1];
//                                                                                                            vinfos[1].maxsolutions = _nj1;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j2;
//                                                                                                            vinfos[2].indices[0] = _ij2[0];
//                                                                                                            vinfos[2].indices[1] = _ij2[1];
//                                                                                                            vinfos[2].maxsolutions = _nj2;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
//                                                                                IkReal x111=pz*pz;
//                                                                                IkReal x112=((4.16666666666667)*pz);
//                                                                                IkReal x113=((1.0)+(((7.71604938271605)*x111)));
//                                                                                IkReal x120 = x113;
                                                                                if (false)//if(IKabs(x120)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x114=pow(x120,-0.5);
                                                                                if (false)//if((x113) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x115=IKabs(IKsqrt(x113));
//                                                                                CheckValue<IkReal> x121=IKPowWithIntegerCheck<IKFAST_REAL>(x115,-1);
                                                                                if (false)//if(!x121.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x116=x121.value;
                                                                                if (false)//if((((1.0)+(((-17.3611111111111)*x111*(x116*x116))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x117=IKsqrt(((1.0)+(((-17.3611111111111)*x111*(x116*x116)))));
//                                                                                IkReal x118=(x114*x116);
//                                                                                IkReal x119=(x114*x117);
//                                                                                CheckValue<IkReal> x122 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x122.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( ((x112*x116)) < -1-IKFAST_SINCOS_THRESH || ((x112*x116)) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal gconst6=((((-1.0)*(x122.value)))+(IKasin((x112*x116))));
//                                                                                IkReal gconst7=(((x112*x118))+(((2.77777777777778)*pz*x119)));
//                                                                                IkReal gconst8=((((-11.5740740740741)*x111*x118))+x119);
                                                                                if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x123=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                if (false)//if(!x123.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                                if (false)//if( (((4.16666666666667)*pz*(x123.value))) < -1-IKFAST_SINCOS_THRESH || (((4.16666666666667)*pz*(x123.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x124.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j2+(((-1.0)*(IKasin(((4.16666666666667)*pz*(x123.value))))))+(x124.value))))), 6.28318530717959)));
                                                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
//                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j1eval[2];
//                                                                                        IkReal x125=pz*pz;
//                                                                                        IkReal x126=((4.16666666666667)*pz);
//                                                                                        IkReal x127=x113;
//                                                                                        IkReal x135 = x127;
                                                                                        if (false)//if(IKabs(x135)==0)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x128=pow(x135,-0.5);
                                                                                        if (false)//if((x127) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x129=IKabs(IKsqrt(x127));
//                                                                                        CheckValue<IkReal> x136=IKPowWithIntegerCheck<IKFAST_REAL>(x129,-1);
                                                                                        if (false)//if(!x136.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x130=x136.value;
//                                                                                        CheckValue<IkReal> x137 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x137.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
                                                                                        if (false)//if( ((x126*x130)) < -1-IKFAST_SINCOS_THRESH || ((x126*x130)) > 1+IKFAST_SINCOS_THRESH )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x131=((((-1.0)*(x137.value)))+(IKasin((x126*x130))));
                                                                                        if (false)//if((((1.0)+(((-17.3611111111111)*x125*(x130*x130))))) < -0.00001)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        IkReal x132=IKsqrt(((1.0)+(((-17.3611111111111)*x125*(x130*x130)))));
//                                                                                        IkReal x133=(x128*x130);
//                                                                                        IkReal x134=(x128*x132);
//                                                                                        px=0;
//                                                                                        py=0;
//                                                                                        pp=x125;
//                                                                                        sj2=gconst7;
//                                                                                        cj2=gconst8;
//                                                                                        j2=x131;
//                                                                                        IkReal gconst6=x131;
//                                                                                        IkReal gconst7=((((2.77777777777778)*pz*x134))+((x126*x133)));
//                                                                                        IkReal gconst8=((((-11.5740740740741)*x125*x133))+x134);
//                                                                                        IkReal x138=pz*pz;
//                                                                                        j1eval[0]=((1.0)+(((7.71604938271605)*x138)));
//                                                                                        j1eval[1]=IKsign(((81.0)+(((625.0)*x138))));
                                                                                        if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]= {false};
//                                                                                                _nj1 = 1;
//                                                                                                IkReal x139=(gconst7*pz);
//                                                                                                CheckValue<IkReal> x140=IKPowWithIntegerCheck<IKFAST_REAL>(((-1.08)+(((-2.0)*x139))+(((-0.72)*gconst8))),-1);
                                                                                                if (false)//if(!x140.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x141=IKPowWithIntegerCheck<IKFAST_REAL>(((-27.0)+(((-18.0)*gconst8))+(((-50.0)*x139))),-1);
                                                                                                if (false)//if(!x141.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                                if (false)//if( IKabs(((x140.value)*(((((0.72)*gconst7))+(((0.48)*gconst7*gconst8))+(((3.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x141.value)*(((27.0)+(((-12.0)*(gconst7*gconst7))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x140.value)*(((((0.72)*gconst7))+(((0.48)*gconst7*gconst8))+(((3.0)*pz))))))+IKsqr(((x141.value)*(((27.0)+(((-12.0)*(gconst7*gconst7)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j1array[0]=IKatan2(((x140.value)*(((((0.72)*gconst7))+(((0.48)*gconst7*gconst8))+(((3.0)*pz))))), ((x141.value)*(((27.0)+(((-12.0)*(gconst7*gconst7)))))));
//                                                                                                sj1array[0]=IKsin(j1array[0]);
//                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if (false)//if( j1array[0] > IKPI )
                                                                                                {
//                                                                                                    j1array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j1array[0] < -IKPI )
                                                                                                {
//                                                                                                    j1array[0]+=IK2PI;
                                                                                                }
//                                                                                                j1valid[0] = true;
//                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                    if (false)//if( !j1valid[ij1] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij1[0] = ij1;
//                                                                                                    _ij1[1] = -1;
//                                                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                    {
                                                                                                        if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j1valid[iij1]=false;
//                                                                                                            _ij1[1] = iij1;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j1 = j1array[ij1];
//                                                                                                    cj1 = cj1array[ij1];
//                                                                                                    sj1 = sj1array[ij1];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x142=IKcos(j1);
//                                                                                                        IkReal x143=IKsin(j1);
//                                                                                                        IkReal x144=((0.24)*gconst7);
//                                                                                                        IkReal x145=((0.24)*gconst8);
//                                                                                                        IkReal x146=((0.36)*x142);
//                                                                                                        IkReal x147=((0.36)*x143);
//                                                                                                        IkReal x148=(pz*x143);
//                                                                                                        evalcond[0]=((((-1.0)*x144))+(((-1.0)*x147))+((pz*x142)));
//                                                                                                        evalcond[1]=((-0.36)+(((-1.0)*x146))+(((-1.0)*x145))+(((-1.0)*x148)));
//                                                                                                        evalcond[2]=((-0.2016)+(((-0.2592)*x142))+(((-0.72)*x148))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((-0.36)+(((-1.0)*x146))+(((-1.0)*x143*x144))+(((-1.0)*x142*x145)));
//                                                                                                        evalcond[4]=((((-1.0)*x147))+((x142*x144))+(((-1.0)*x143*x145))+(((-1.0)*pz)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                        bool j0valid[1]= {false};
//                                                                                                        _nj0 = 1;
//                                                                                                        j0array[0]=0;
//                                                                                                        sj0array[0]=IKsin(j0array[0]);
//                                                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                                                        if (false)//if( j0array[0] > IKPI )
                                                                                                        {
//                                                                                                            j0array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j0array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j0array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j0valid[0] = true;
//                                                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                        {
                                                                                                            if (false)//if( !j0valid[ij0] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij0[0] = ij0;
//                                                                                                            _ij0[1] = -1;
//                                                                                                            for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                            {
                                                                                                                if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j0valid[iij0]=false;
//                                                                                                                    _ij0[1] = iij0;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j0 = j0array[ij0];
//                                                                                                            cj0 = cj0array[ij0];
//                                                                                                            sj0 = sj0array[ij0];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j0;
//                                                                                                                vinfos[0].indices[0] = _ij0[0];
//                                                                                                                vinfos[0].indices[1] = _ij0[1];
//                                                                                                                vinfos[0].maxsolutions = _nj0;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j1;
//                                                                                                                vinfos[1].indices[0] = _ij1[0];
//                                                                                                                vinfos[1].indices[1] = _ij1[1];
//                                                                                                                vinfos[1].maxsolutions = _nj1;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j2;
//                                                                                                                vinfos[2].indices[0] = _ij2[0];
//                                                                                                                vinfos[2].indices[1] = _ij2[1];
//                                                                                                                vinfos[2].maxsolutions = _nj2;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]= {false};
//                                                                                                _nj1 = 1;
//                                                                                                IkReal x149=((150.0)*pz);
//                                                                                                CheckValue<IkReal> x150=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                                                                if (false)//if(!x150.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x151 = IKatan2WithCheck(IkReal(((((-1.0)*gconst8*x149))+(((-225.0)*pz))+(((-54.0)*gconst7)))),IkReal(((-81.0)+((gconst7*x149))+(((-54.0)*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x151.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x150.value)))+(x151.value));
//                                                                                                sj1array[0]=IKsin(j1array[0]);
//                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if (false)//if( j1array[0] > IKPI )
                                                                                                {
//                                                                                                    j1array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j1array[0] < -IKPI )
                                                                                                {
//                                                                                                    j1array[0]+=IK2PI;
                                                                                                }
//                                                                                                j1valid[0] = true;
//                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                    if (false)//if( !j1valid[ij1] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij1[0] = ij1;
//                                                                                                    _ij1[1] = -1;
//                                                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                    {
                                                                                                        if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j1valid[iij1]=false;
//                                                                                                            _ij1[1] = iij1;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j1 = j1array[ij1];
//                                                                                                    cj1 = cj1array[ij1];
//                                                                                                    sj1 = sj1array[ij1];
                                                                                                    {
                                                                                                        IkReal evalcond[5];
//                                                                                                        IkReal x152=IKcos(j1);
//                                                                                                        IkReal x153=IKsin(j1);
//                                                                                                        IkReal x154=((0.24)*gconst7);
//                                                                                                        IkReal x155=((0.24)*gconst8);
//                                                                                                        IkReal x156=((0.36)*x152);
//                                                                                                        IkReal x157=((0.36)*x153);
//                                                                                                        IkReal x158=(pz*x153);
//                                                                                                        evalcond[0]=((((-1.0)*x157))+(((-1.0)*x154))+((pz*x152)));
//                                                                                                        evalcond[1]=((-0.36)+(((-1.0)*x155))+(((-1.0)*x156))+(((-1.0)*x158)));
//                                                                                                        evalcond[2]=((-0.2016)+(((-0.2592)*x152))+(((-0.72)*x158))+(((-1.0)*(pz*pz))));
//                                                                                                        evalcond[3]=((-0.36)+(((-1.0)*x156))+(((-1.0)*x153*x154))+(((-1.0)*x152*x155)));
//                                                                                                        evalcond[4]=((((-1.0)*x157))+(((-1.0)*x153*x155))+((x152*x154))+(((-1.0)*pz)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                        bool j0valid[1]= {false};
//                                                                                                        _nj0 = 1;
//                                                                                                        j0array[0]=0;
//                                                                                                        sj0array[0]=IKsin(j0array[0]);
//                                                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                                                        if (false)//if( j0array[0] > IKPI )
                                                                                                        {
//                                                                                                            j0array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j0array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j0array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j0valid[0] = true;
//                                                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                        {
                                                                                                            if (false)//if( !j0valid[ij0] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij0[0] = ij0;
//                                                                                                            _ij0[1] = -1;
//                                                                                                            for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                            {
                                                                                                                if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j0valid[iij0]=false;
//                                                                                                                    _ij0[1] = iij0;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j0 = j0array[ij0];
//                                                                                                            cj0 = cj0array[ij0];
//                                                                                                            sj0 = sj0array[ij0];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j0;
//                                                                                                                vinfos[0].indices[0] = _ij0[0];
//                                                                                                                vinfos[0].indices[1] = _ij0[1];
//                                                                                                                vinfos[0].maxsolutions = _nj0;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j1;
//                                                                                                                vinfos[1].indices[0] = _ij1[0];
//                                                                                                                vinfos[1].indices[1] = _ij1[1];
//                                                                                                                vinfos[1].maxsolutions = _nj1;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j2;
//                                                                                                                vinfos[2].indices[0] = _ij2[0];
//                                                                                                                vinfos[2].indices[1] = _ij2[1];
//                                                                                                                vinfos[2].maxsolutions = _nj2;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if (false)//if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
//                                                                                    IkReal x159=pz*pz;
//                                                                                    IkReal x160=((4.16666666666667)*pz);
//                                                                                    IkReal x161=((1.0)+(((7.71604938271605)*x159)));
//                                                                                    IkReal x168 = x161;
                                                                                    if (false)//if(IKabs(x168)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x162=pow(x168,-0.5);
                                                                                    if (false)//if((x161) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x163=IKabs(IKsqrt(x161));
//                                                                                    CheckValue<IkReal> x169=IKPowWithIntegerCheck<IKFAST_REAL>(x163,-1);
                                                                                    if (false)//if(!x169.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x164=x169.value;
                                                                                    if (false)//if((((1.0)+(((-17.3611111111111)*x159*(x164*x164))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x165=IKsqrt(((1.0)+(((-17.3611111111111)*x159*(x164*x164)))));
//                                                                                    IkReal x166=(x162*x164);
//                                                                                    IkReal x167=(x162*x165);
//                                                                                    CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x170.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( ((x160*x164)) < -1-IKFAST_SINCOS_THRESH || ((x160*x164)) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal gconst9=((3.14159265358979)+(((-1.0)*(x170.value)))+(((-1.0)*(IKasin((x160*x164))))));
//                                                                                    IkReal gconst10=((((-2.77777777777778)*pz*x167))+((x160*x166)));
//                                                                                    IkReal gconst11=((((-1.0)*x167))+(((-11.5740740740741)*x159*x166)));
                                                                                    if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x171=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                                    if (false)//if(!x171.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
                                                                                    if (false)//if( (((4.16666666666667)*pz*(x171.value))) < -1-IKFAST_SINCOS_THRESH || (((4.16666666666667)*pz*(x171.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x172.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((4.16666666666667)*pz*(x171.value))))+j2+(x172.value))))), 6.28318530717959)));
                                                                                    if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
//                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j1eval[2];
//                                                                                            IkReal x173=pz*pz;
//                                                                                            IkReal x174=((4.16666666666667)*pz);
//                                                                                            IkReal x175=x161;
//                                                                                            IkReal x183 = x175;
                                                                                            if (false)//if(IKabs(x183)==0)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x176=pow(x183,-0.5);
                                                                                            if (false)//if((x175) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x177=IKabs(IKsqrt(x175));
//                                                                                            CheckValue<IkReal> x184=IKPowWithIntegerCheck<IKFAST_REAL>(x177,-1);
                                                                                            if (false)//if(!x184.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x178=x184.value;
                                                                                            if (false)//if((((1.0)+(((-17.3611111111111)*x173*(x178*x178))))) < -0.00001)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x179=IKsqrt(((1.0)+(((-17.3611111111111)*x173*(x178*x178)))));
//                                                                                            IkReal x180=(x176*x178);
//                                                                                            CheckValue<IkReal> x185 = IKatan2WithCheck(IkReal(((-2.77777777777778)*pz)),IkReal(1.0),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x185.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
                                                                                            if (false)//if( ((x174*x178)) < -1-IKFAST_SINCOS_THRESH || ((x174*x178)) > 1+IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            IkReal x181=((((1.0)*(x185.value)))+(((1.0)*(IKasin((x174*x178))))));
//                                                                                            IkReal x182=(x176*x179);
//                                                                                            px=0;
//                                                                                            py=0;
//                                                                                            pp=x173;
//                                                                                            sj2=gconst10;
//                                                                                            cj2=gconst11;
//                                                                                            j2=((3.14159265)+(((-1.0)*x181)));
//                                                                                            IkReal gconst9=((3.14159265358979)+(((-1.0)*x181)));
//                                                                                            IkReal gconst10=((((-2.77777777777778)*pz*x182))+((x174*x180)));
//                                                                                            IkReal gconst11=((((-1.0)*x182))+(((-11.5740740740741)*x173*x180)));
//                                                                                            IkReal x186=pz*pz;
//                                                                                            j1eval[0]=((1.0)+(((7.71604938271605)*x186)));
//                                                                                            j1eval[1]=IKsign(((81.0)+(((625.0)*x186))));
                                                                                            if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                    bool j1valid[1]= {false};
//                                                                                                    _nj1 = 1;
//                                                                                                    IkReal x187=((225.0)*pz);
//                                                                                                    IkReal x188=((54.0)*gconst10);
//                                                                                                    CheckValue<IkReal> x189 = IKatan2WithCheck(IkReal(((((625.0)*(pz*pz)))+(((-36.0)*(gconst10*gconst10))))),IkReal(((((-36.0)*gconst10*gconst11))+(((-1.0)*x188))+x187)),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x189.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x190=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-150.0)*gconst11*pz))+(((-1.0)*x187))+x188)),-1);
                                                                                                    if (false)//if(!x190.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j1array[0]=((-1.5707963267949)+(x189.value)+(((1.5707963267949)*(x190.value))));
//                                                                                                    sj1array[0]=IKsin(j1array[0]);
//                                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                                    if (false)//if( j1array[0] > IKPI )
                                                                                                    {
//                                                                                                        j1array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j1array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j1array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j1valid[0] = true;
//                                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                    {
                                                                                                        if (false)//if( !j1valid[ij1] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij1[0] = ij1;
//                                                                                                        _ij1[1] = -1;
//                                                                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                        {
                                                                                                            if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j1valid[iij1]=false;
//                                                                                                                _ij1[1] = iij1;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j1 = j1array[ij1];
//                                                                                                        cj1 = cj1array[ij1];
//                                                                                                        sj1 = sj1array[ij1];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x191=IKcos(j1);
//                                                                                                            IkReal x192=IKsin(j1);
//                                                                                                            IkReal x193=((0.24)*gconst10);
//                                                                                                            IkReal x194=((0.24)*gconst11);
//                                                                                                            IkReal x195=((0.36)*x191);
//                                                                                                            IkReal x196=((0.36)*x192);
//                                                                                                            IkReal x197=(pz*x192);
//                                                                                                            evalcond[0]=((((-1.0)*x193))+(((-1.0)*x196))+((pz*x191)));
//                                                                                                            evalcond[1]=((-0.36)+(((-1.0)*x197))+(((-1.0)*x194))+(((-1.0)*x195)));
//                                                                                                            evalcond[2]=((-0.2016)+(((-0.72)*x197))+(((-1.0)*(pz*pz)))+(((-0.2592)*x191)));
//                                                                                                            evalcond[3]=((-0.36)+(((-1.0)*x192*x193))+(((-1.0)*x191*x194))+(((-1.0)*x195)));
//                                                                                                            evalcond[4]=((((-1.0)*x192*x194))+(((-1.0)*x196))+(((-1.0)*pz))+((x191*x193)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                            bool j0valid[1]= {false};
//                                                                                                            _nj0 = 1;
//                                                                                                            j0array[0]=0;
//                                                                                                            sj0array[0]=IKsin(j0array[0]);
//                                                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                                                            if (false)//if( j0array[0] > IKPI )
                                                                                                            {
//                                                                                                                j0array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j0array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j0array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j0valid[0] = true;
//                                                                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                            {
                                                                                                                if (false)//if( !j0valid[ij0] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij0[0] = ij0;
//                                                                                                                _ij0[1] = -1;
//                                                                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                                {
                                                                                                                    if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j0valid[iij0]=false;
//                                                                                                                        _ij0[1] = iij0;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j0 = j0array[ij0];
//                                                                                                                cj0 = cj0array[ij0];
//                                                                                                                sj0 = sj0array[ij0];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j0;
//                                                                                                                    vinfos[0].indices[0] = _ij0[0];
//                                                                                                                    vinfos[0].indices[1] = _ij0[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj0;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j1;
//                                                                                                                    vinfos[1].indices[0] = _ij1[0];
//                                                                                                                    vinfos[1].indices[1] = _ij1[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj1;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j2;
//                                                                                                                    vinfos[2].indices[0] = _ij2[0];
//                                                                                                                    vinfos[2].indices[1] = _ij2[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj2;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                                    bool j1valid[1]= {false};
//                                                                                                    _nj1 = 1;
//                                                                                                    IkReal x198=((150.0)*pz);
//                                                                                                    CheckValue<IkReal> x199=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                                                                    if (false)//if(!x199.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x200 = IKatan2WithCheck(IkReal(((((-54.0)*gconst10))+(((-225.0)*pz))+(((-1.0)*gconst11*x198)))),IkReal(((-81.0)+(((-54.0)*gconst11))+((gconst10*x198)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x200.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x199.value)))+(x200.value));
//                                                                                                    sj1array[0]=IKsin(j1array[0]);
//                                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                                    if (false)//if( j1array[0] > IKPI )
                                                                                                    {
//                                                                                                        j1array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j1array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j1array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j1valid[0] = true;
//                                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                    {
                                                                                                        if (false)//if( !j1valid[ij1] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij1[0] = ij1;
//                                                                                                        _ij1[1] = -1;
//                                                                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                        {
                                                                                                            if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j1valid[iij1]=false;
//                                                                                                                _ij1[1] = iij1;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j1 = j1array[ij1];
//                                                                                                        cj1 = cj1array[ij1];
//                                                                                                        sj1 = sj1array[ij1];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
//                                                                                                            IkReal x201=IKcos(j1);
//                                                                                                            IkReal x202=IKsin(j1);
//                                                                                                            IkReal x203=((0.24)*gconst10);
//                                                                                                            IkReal x204=((0.24)*gconst11);
//                                                                                                            IkReal x205=((0.36)*x201);
//                                                                                                            IkReal x206=((0.36)*x202);
//                                                                                                            IkReal x207=(pz*x202);
//                                                                                                            evalcond[0]=((((-1.0)*x206))+(((-1.0)*x203))+((pz*x201)));
//                                                                                                            evalcond[1]=((-0.36)+(((-1.0)*x205))+(((-1.0)*x204))+(((-1.0)*x207)));
//                                                                                                            evalcond[2]=((-0.2016)+(((-0.2592)*x201))+(((-0.72)*x207))+(((-1.0)*(pz*pz))));
//                                                                                                            evalcond[3]=((-0.36)+(((-1.0)*x201*x204))+(((-1.0)*x202*x203))+(((-1.0)*x205)));
//                                                                                                            evalcond[4]=(((x201*x203))+(((-1.0)*x202*x204))+(((-1.0)*x206))+(((-1.0)*pz)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                            bool j0valid[1]= {false};
//                                                                                                            _nj0 = 1;
//                                                                                                            j0array[0]=0;
//                                                                                                            sj0array[0]=IKsin(j0array[0]);
//                                                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                                                            if (false)//if( j0array[0] > IKPI )
                                                                                                            {
//                                                                                                                j0array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j0array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j0array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j0valid[0] = true;
//                                                                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                            {
                                                                                                                if (false)//if( !j0valid[ij0] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij0[0] = ij0;
//                                                                                                                _ij0[1] = -1;
//                                                                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                                {
                                                                                                                    if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j0valid[iij0]=false;
//                                                                                                                        _ij0[1] = iij0;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j0 = j0array[ij0];
//                                                                                                                cj0 = cj0array[ij0];
//                                                                                                                sj0 = sj0array[ij0];

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j0;
//                                                                                                                    vinfos[0].indices[0] = _ij0[0];
//                                                                                                                    vinfos[0].indices[1] = _ij0[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj0;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j1;
//                                                                                                                    vinfos[1].indices[0] = _ij1[0];
//                                                                                                                    vinfos[1].indices[1] = _ij1[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj1;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j2;
//                                                                                                                    vinfos[2].indices[0] = _ij2[0];
//                                                                                                                    vinfos[2].indices[1] = _ij2[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj2;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if (false)//if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
//                                                                                            bgotonextstatement=false;
//                                                                                            continue; // branch miss [j0, j1]

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if( bgotonextstatement )
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                    bool j1valid[1]= {false};
//                                                                    _nj1 = 1;
//                                                                    IkReal x208=(pz*sj2);
//                                                                    CheckValue<IkReal> x209=IKPowWithIntegerCheck<IKFAST_REAL>(((-1.08)+(((-2.0)*x208))+(((-0.72)*cj2))),-1);
                                                                    if (false)//if(!x209.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x210=IKPowWithIntegerCheck<IKFAST_REAL>(((-27.0)+(((-50.0)*x208))+(((-18.0)*cj2))),-1);
                                                                    if (false)//if(!x210.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((x209.value)*(((((0.72)*sj2))+(((0.48)*cj2*sj2))+(((3.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x210.value)*(((15.0)+(((12.0)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x209.value)*(((((0.72)*sj2))+(((0.48)*cj2*sj2))+(((3.0)*pz))))))+IKsqr(((x210.value)*(((15.0)+(((12.0)*(cj2*cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j1array[0]=IKatan2(((x209.value)*(((((0.72)*sj2))+(((0.48)*cj2*sj2))+(((3.0)*pz))))), ((x210.value)*(((15.0)+(((12.0)*(cj2*cj2)))))));
//                                                                    sj1array[0]=IKsin(j1array[0]);
//                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                    if (false)//if( j1array[0] > IKPI )
                                                                    {
//                                                                        j1array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j1array[0] < -IKPI )
                                                                    {
//                                                                        j1array[0]+=IK2PI;
                                                                    }
//                                                                    j1valid[0] = true;
//                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                    {
                                                                        if (false)//if( !j1valid[ij1] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij1[0] = ij1;
//                                                                        _ij1[1] = -1;
//                                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                        {
                                                                            if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j1valid[iij1]=false;
//                                                                                _ij1[1] = iij1;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j1 = j1array[ij1];
//                                                                        cj1 = cj1array[ij1];
//                                                                        sj1 = sj1array[ij1];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x211=IKcos(j1);
//                                                                            IkReal x212=IKsin(j1);
//                                                                            IkReal x213=((0.24)*sj2);
//                                                                            IkReal x214=((0.24)*cj2);
//                                                                            IkReal x215=((0.36)*x211);
//                                                                            IkReal x216=((0.36)*x212);
//                                                                            IkReal x217=(pz*x212);
//                                                                            evalcond[0]=(((pz*x211))+(((-1.0)*x216))+(((-1.0)*x213)));
//                                                                            evalcond[1]=((-0.36)+(((-1.0)*x217))+(((-1.0)*x215))+(((-1.0)*x214)));
//                                                                            evalcond[2]=((-0.2016)+(((-0.2592)*x211))+(((-0.72)*x217))+(((-1.0)*(pz*pz))));
//                                                                            evalcond[3]=((-0.36)+(((-1.0)*x211*x214))+(((-1.0)*x212*x213))+(((-1.0)*x215)));
//                                                                            evalcond[4]=(((x211*x213))+(((-1.0)*pz))+(((-1.0)*x212*x214))+(((-1.0)*x216)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                            bool j0valid[1]= {false};
//                                                                            _nj0 = 1;
//                                                                            j0array[0]=0;
//                                                                            sj0array[0]=IKsin(j0array[0]);
//                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                            if (false)//if( j0array[0] > IKPI )
                                                                            {
//                                                                                j0array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j0array[0] < -IKPI )
                                                                            {
//                                                                                j0array[0]+=IK2PI;
                                                                            }
//                                                                            j0valid[0] = true;
//                                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                            {
                                                                                if (false)//if( !j0valid[ij0] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij0[0] = ij0;
//                                                                                _ij0[1] = -1;
//                                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                {
                                                                                    if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j0valid[iij0]=false;
//                                                                                        _ij0[1] = iij0;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j0 = j0array[ij0];
//                                                                                cj0 = cj0array[ij0];
//                                                                                sj0 = sj0array[ij0];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j0;
//                                                                                    vinfos[0].indices[0] = _ij0[0];
//                                                                                    vinfos[0].indices[1] = _ij0[1];
//                                                                                    vinfos[0].maxsolutions = _nj0;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j1;
//                                                                                    vinfos[1].indices[0] = _ij1[0];
//                                                                                    vinfos[1].indices[1] = _ij1[1];
//                                                                                    vinfos[1].maxsolutions = _nj1;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j2;
//                                                                                    vinfos[2].indices[0] = _ij2[0];
//                                                                                    vinfos[2].indices[1] = _ij2[1];
//                                                                                    vinfos[2].maxsolutions = _nj2;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                            bool j1valid[1]= {false};
//                                                            _nj1 = 1;
//                                                            IkReal x218=((54.0)*sj2);
//                                                            IkReal x219=((225.0)*pz);
//                                                            CheckValue<IkReal> x220=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign((x218+(((-1.0)*x219))+(((-150.0)*cj2*pz)))),-1);
                                                            if (false)//if(!x220.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal(((-36.0)+(((36.0)*(cj2*cj2)))+(((625.0)*(pz*pz))))),IkReal((x219+(((-36.0)*cj2*sj2))+(((-1.0)*x218)))),IKFAST_ATAN2_MAGTHRESH);
                                                            if (false)//if(!x221.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x220.value)))+(x221.value));
//                                                            sj1array[0]=IKsin(j1array[0]);
//                                                            cj1array[0]=IKcos(j1array[0]);
                                                            if (false)//if( j1array[0] > IKPI )
                                                            {
//                                                                j1array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j1array[0] < -IKPI )
                                                            {
//                                                                j1array[0]+=IK2PI;
                                                            }
//                                                            j1valid[0] = true;
//                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                            {
                                                                if (false)//if( !j1valid[ij1] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij1[0] = ij1;
//                                                                _ij1[1] = -1;
//                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                {
                                                                    if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j1valid[iij1]=false;
//                                                                        _ij1[1] = iij1;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j1 = j1array[ij1];
//                                                                cj1 = cj1array[ij1];
//                                                                sj1 = sj1array[ij1];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x222=IKcos(j1);
//                                                                    IkReal x223=IKsin(j1);
//                                                                    IkReal x224=((0.24)*sj2);
//                                                                    IkReal x225=((0.24)*cj2);
//                                                                    IkReal x226=((0.36)*x222);
//                                                                    IkReal x227=((0.36)*x223);
//                                                                    IkReal x228=(pz*x223);
//                                                                    evalcond[0]=(((pz*x222))+(((-1.0)*x227))+(((-1.0)*x224)));
//                                                                    evalcond[1]=((-0.36)+(((-1.0)*x226))+(((-1.0)*x225))+(((-1.0)*x228)));
//                                                                    evalcond[2]=((-0.2016)+(((-0.72)*x228))+(((-0.2592)*x222))+(((-1.0)*(pz*pz))));
//                                                                    evalcond[3]=((-0.36)+(((-1.0)*x222*x225))+(((-1.0)*x223*x224))+(((-1.0)*x226)));
//                                                                    evalcond[4]=(((x222*x224))+(((-1.0)*pz))+(((-1.0)*x223*x225))+(((-1.0)*x227)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                    bool j0valid[1]= {false};
//                                                                    _nj0 = 1;
//                                                                    j0array[0]=0;
//                                                                    sj0array[0]=IKsin(j0array[0]);
//                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                    if (false)//if( j0array[0] > IKPI )
                                                                    {
//                                                                        j0array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j0array[0] < -IKPI )
                                                                    {
//                                                                        j0array[0]+=IK2PI;
                                                                    }
//                                                                    j0valid[0] = true;
//                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                    {
                                                                        if (false)//if( !j0valid[ij0] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij0[0] = ij0;
//                                                                        _ij0[1] = -1;
//                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                        {
                                                                            if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j0valid[iij0]=false;
//                                                                                _ij0[1] = iij0;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j0 = j0array[ij0];
//                                                                        cj0 = cj0array[ij0];
//                                                                        sj0 = sj0array[ij0];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j0;
//                                                                            vinfos[0].indices[0] = _ij0[0];
//                                                                            vinfos[0].indices[1] = _ij0[1];
//                                                                            vinfos[0].maxsolutions = _nj0;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j1;
//                                                                            vinfos[1].indices[0] = _ij1[0];
//                                                                            vinfos[1].indices[1] = _ij1[1];
//                                                                            vinfos[1].maxsolutions = _nj1;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j2;
//                                                                            vinfos[2].indices[0] = _ij2[0];
//                                                                            vinfos[2].indices[1] = _ij2[1];
//                                                                            vinfos[2].maxsolutions = _nj2;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]= {false};
//                                                    _nj1 = 1;
//                                                    IkReal x229=((150.0)*pz);
//                                                    CheckValue<IkReal> x230=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((81.0)+(((625.0)*(pz*pz))))),-1);
                                                    if (false)//if(!x230.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    CheckValue<IkReal> x231 = IKatan2WithCheck(IkReal(((((-54.0)*sj2))+(((-1.0)*cj2*x229))+(((-225.0)*pz)))),IkReal(((-81.0)+(((-54.0)*cj2))+((sj2*x229)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if (false)//if(!x231.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x230.value)))+(x231.value));
//                                                    sj1array[0]=IKsin(j1array[0]);
//                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if (false)//if( j1array[0] > IKPI )
                                                    {
//                                                        j1array[0]-=IK2PI;
                                                    }
                                                    else if (false)//else if( j1array[0] < -IKPI )
                                                    {
//                                                        j1array[0]+=IK2PI;
                                                    }
//                                                    j1valid[0] = true;
//                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                        if (false)//if( !j1valid[ij1] )
                                                        {
//                                                            continue;
                                                        }
//                                                        _ij1[0] = ij1;
//                                                        _ij1[1] = -1;
//                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                        {
                                                            if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                            {
//                                                                j1valid[iij1]=false;
//                                                                _ij1[1] = iij1;
//                                                                break;
                                                            }
                                                        }
//                                                        j1 = j1array[ij1];
//                                                        cj1 = cj1array[ij1];
//                                                        sj1 = sj1array[ij1];
                                                        {
                                                            IkReal evalcond[5];
//                                                            IkReal x232=IKcos(j1);
//                                                            IkReal x233=IKsin(j1);
//                                                            IkReal x234=((0.24)*sj2);
//                                                            IkReal x235=((0.24)*cj2);
//                                                            IkReal x236=((0.36)*x232);
//                                                            IkReal x237=((0.36)*x233);
//                                                            IkReal x238=(pz*x233);
//                                                            evalcond[0]=(((pz*x232))+(((-1.0)*x234))+(((-1.0)*x237)));
//                                                            evalcond[1]=((-0.36)+(((-1.0)*x235))+(((-1.0)*x236))+(((-1.0)*x238)));
//                                                            evalcond[2]=((-0.2016)+(((-0.2592)*x232))+(((-0.72)*x238))+(((-1.0)*(pz*pz))));
//                                                            evalcond[3]=((-0.36)+(((-1.0)*x233*x234))+(((-1.0)*x236))+(((-1.0)*x232*x235)));
//                                                            evalcond[4]=((((-1.0)*x233*x235))+((x232*x234))+(((-1.0)*pz))+(((-1.0)*x237)));
                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
//                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]= {false};
//                                                            _nj0 = 1;
//                                                            j0array[0]=0;
//                                                            sj0array[0]=IKsin(j0array[0]);
//                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if (false)//if( j0array[0] > IKPI )
                                                            {
//                                                                j0array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j0array[0] < -IKPI )
                                                            {
//                                                                j0array[0]+=IK2PI;
                                                            }
//                                                            j0valid[0] = true;
//                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                                if (false)//if( !j0valid[ij0] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij0[0] = ij0;
//                                                                _ij0[1] = -1;
//                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                {
                                                                    if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j0valid[iij0]=false;
//                                                                        _ij0[1] = iij0;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j0 = j0array[ij0];
//                                                                cj0 = cj0array[ij0];
//                                                                sj0 = sj0array[ij0];

                                                                {
//                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                    vinfos[0].jointtype = 1;
//                                                                    vinfos[0].foffset = j0;
//                                                                    vinfos[0].indices[0] = _ij0[0];
//                                                                    vinfos[0].indices[1] = _ij0[1];
//                                                                    vinfos[0].maxsolutions = _nj0;
//                                                                    vinfos[1].jointtype = 1;
//                                                                    vinfos[1].foffset = j1;
//                                                                    vinfos[1].indices[0] = _ij1[0];
//                                                                    vinfos[1].indices[1] = _ij1[1];
//                                                                    vinfos[1].maxsolutions = _nj1;
//                                                                    vinfos[2].jointtype = 1;
//                                                                    vinfos[2].foffset = j2;
//                                                                    vinfos[2].indices[0] = _ij2[0];
//                                                                    vinfos[2].indices[1] = _ij2[1];
//                                                                    vinfos[2].maxsolutions = _nj2;
//                                                                    int vfree[0];
//                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if (false)//if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
//                                    bgotonextstatement=false;
//                                    continue; // branch miss [j0, j1, j2]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j0array[2], cj0array[2], sj0array[2];
                        bool j0valid[2]= {false};
                        _nj0 = 2;
                        CheckValue<IkReal> x240 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x240.valid)
                        {
//                            continue;
                        }
                        IkReal x239=x240.value;
                        j0array[0]=((-1.0)*x239);
                        sj0array[0]=IKsin(j0array[0]);
                        cj0array[0]=IKcos(j0array[0]);
                        j0array[1]=((3.14159265358979)+(((-1.0)*x239)));
                        sj0array[1]=IKsin(j0array[1]);
                        cj0array[1]=IKcos(j0array[1]);
                        if( j0array[0] > IKPI )
                        {
//                            j0array[0]-=IK2PI;
                        }
                        else if( j0array[0] < -IKPI )
                        {
//                            j0array[0]+=IK2PI;
                        }
                        j0valid[0] = true;
                        if( j0array[1] > IKPI )
                        {
                            j0array[1]-=IK2PI;
                        }
                        else if( j0array[1] < -IKPI )
                        {
//                            j0array[1]+=IK2PI;
                        }
                        j0valid[1] = true;
                        for(int ij0 = 0; ij0 < 2; ++ij0)
                        {
                            if( !j0valid[ij0] )
                            {
//                                continue;
                            }
                            _ij0[0] = ij0;
                            _ij0[1] = -1;
                            for(int iij0 = ij0+1; iij0 < 2; ++iij0)
                            {
                                if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                {
//                                    j0valid[iij0]=false;
//                                    _ij0[1] = iij0;
//                                    break;
                                }
                            }
                            j0 = j0array[ij0];
                            cj0 = cj0array[ij0];
                            sj0 = sj0array[ij0];

                            {
                                IkReal j2array[2], cj2array[2], sj2array[2];
                                bool j2valid[2]= {false};
                                _nj2 = 2;
                                cj2array[0]=((-0.333333333333333)+(((5.78703703703704)*(py*py)))+(((-4.16666666666667)*cj0*py))+(((5.78703703703704)*(pz*pz)))+(((5.78703703703704)*(px*px)))+(((4.16666666666667)*px*sj0)));
                                if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j2valid[0] = j2valid[1] = true;
                                    j2array[0] = IKacos(cj2array[0]);
                                    sj2array[0] = IKsin(j2array[0]);
                                    cj2array[1] = cj2array[0];
                                    j2array[1] = -j2array[0];
                                    sj2array[1] = -sj2array[0];
                                }
                                else if( isnan(cj2array[0]) )
                                {
                                    // probably any value will work
//                                    j2valid[0] = true;
//                                    cj2array[0] = 1;
//                                    sj2array[0] = 0;
//                                    j2array[0] = 0;
                                }
                                for(int ij2 = 0; ij2 < 2; ++ij2)
                                {
                                    if( !j2valid[ij2] )
                                    {
                                        continue;
                                    }
                                    _ij2[0] = ij2;
                                    _ij2[1] = -1;
                                    for(int iij2 = ij2+1; iij2 < 2; ++iij2)
                                    {
                                        if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j2valid[iij2]=false;
//                                            _ij2[1] = iij2;
//                                            break;
                                        }
                                    }
                                    j2 = j2array[ij2];
                                    cj2 = cj2array[ij2];
                                    sj2 = sj2array[ij2];

                                    {
                                        IkReal j1eval[3];
                                        IkReal x241=((150.0)*cj2);
                                        IkReal x242=(cj0*py);
                                        IkReal x243=(px*sj0);
                                        IkReal x244=((150.0)*sj2);
                                        j1eval[0]=((1.08333333333333)+cj2);
                                        j1eval[1]=IKsign(((117.0)+(((108.0)*cj2))));
                                        j1eval[2]=((IKabs(((-81.0)+(((-54.0)*cj2))+(((-1.0)*x241*x243))+((x241*x242))+(((-225.0)*x243))+((pz*x244))+(((225.0)*x242)))))+(IKabs(((((-1.0)*pz*x241))+(((-1.0)*x243*x244))+(((-54.0)*sj2))+((x242*x244))+(((-225.0)*pz))))));
                                        if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j1eval[3];
//                                                IkReal x245=(cj0*py);
//                                                IkReal x246=((25.0)*pz);
//                                                IkReal x247=(px*sj0);
//                                                IkReal x248=((6.0)*cj2);
//                                                IkReal x249=((2.77777777777778)*cj2);
//                                                IkReal x250=(pz*sj2);
//                                                j1eval[0]=((1.5)+cj2+(((2.77777777777778)*x250))+(((-1.0)*x245*x249))+(((-4.16666666666667)*x245))+((x247*x249))+(((4.16666666666667)*x247)));
//                                                j1eval[1]=IKsign(((3.24)+(((2.16)*cj2))+(((-9.0)*x245))+(((9.0)*x247))+(((6.0)*x250))+(((-1.0)*x245*x248))+((x247*x248))));
//                                                j1eval[2]=((IKabs(((-3.24)+(((-4.32)*cj2))+(((-1.44)*(cj2*cj2)))+((pz*x246)))))+(IKabs(((((-2.16)*sj2))+(((-9.0)*pz))+(((-1.44)*cj2*sj2))+((x245*x246))+(((-1.0)*x246*x247))))));
                                                if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j1eval[1];
//                                                        IkReal x251=((2.77777777777778)*sj2);
//                                                        j1eval[0]=(sj2+(((-4.16666666666667)*pz))+((px*sj0*x251))+(((-1.0)*cj0*py*x251))+(((-2.77777777777778)*cj2*pz)));
                                                        if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j1]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]= {false};
//                                                                _nj1 = 1;
//                                                                IkReal x252=((2.16)*sj2);
//                                                                IkReal x253=((9.0)*pz);
//                                                                IkReal x254=(cj2*pz);
//                                                                IkReal x255=((25.0)*pz);
//                                                                IkReal x256=(px*sj0*sj2);
//                                                                IkReal x257=(cj0*py*sj2);
//                                                                CheckValue<IkReal> x258=IKPowWithIntegerCheck<IKFAST_REAL>(((((54.0)*sj2))+(((-150.0)*x257))+(((-150.0)*x254))+(((150.0)*x256))+(((-225.0)*pz))),-1);
                                                                if (false)//if(!x258.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x259=IKPowWithIntegerCheck<IKFAST_REAL>(((((6.0)*x256))+x252+(((-6.0)*x257))+(((-6.0)*x254))+(((-1.0)*x253))),-1);
                                                                if (false)//if(!x259.valid)
                                                                {
//                                                                    continue;
                                                                }
                                                                if (false)//if( IKabs(((x258.value)*(((-36.0)+(((36.0)*(cj2*cj2)))+(((625.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x259.value)*((((px*sj0*x255))+(((-1.0)*cj0*py*x255))+x253+(((-1.44)*cj2*sj2))+(((-1.0)*x252)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x258.value)*(((-36.0)+(((36.0)*(cj2*cj2)))+(((625.0)*(pz*pz)))))))+IKsqr(((x259.value)*((((px*sj0*x255))+(((-1.0)*cj0*py*x255))+x253+(((-1.44)*cj2*sj2))+(((-1.0)*x252))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                {
//                                                                    continue;
                                                                }
//                                                                j1array[0]=IKatan2(((x258.value)*(((-36.0)+(((36.0)*(cj2*cj2)))+(((625.0)*(pz*pz)))))), ((x259.value)*((((px*sj0*x255))+(((-1.0)*cj0*py*x255))+x253+(((-1.44)*cj2*sj2))+(((-1.0)*x252))))));
//                                                                sj1array[0]=IKsin(j1array[0]);
//                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if (false)//if( j1array[0] > IKPI )
                                                                {
//                                                                    j1array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j1array[0] < -IKPI )
                                                                {
//                                                                    j1array[0]+=IK2PI;
                                                                }
//                                                                j1valid[0] = true;
//                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                    if (false)//if( !j1valid[ij1] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij1[0] = ij1;
//                                                                    _ij1[1] = -1;
//                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                    {
                                                                        if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j1valid[iij1]=false;
//                                                                            _ij1[1] = iij1;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j1 = j1array[ij1];
//                                                                    cj1 = cj1array[ij1];
//                                                                    sj1 = sj1array[ij1];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x260=IKsin(j1);
//                                                                        IkReal x261=IKcos(j1);
//                                                                        IkReal x262=(px*sj0);
//                                                                        IkReal x263=(cj0*py);
//                                                                        IkReal x264=((0.24)*cj2);
//                                                                        IkReal x265=((1.0)*pz);
//                                                                        IkReal x266=((0.24)*sj2);
//                                                                        IkReal x267=((0.36)*x260);
//                                                                        IkReal x268=((0.36)*x261);
//                                                                        IkReal x269=((0.72)*x261);
//                                                                        evalcond[0]=(((x261*x266))+(((-1.0)*x265))+(((-1.0)*x267))+(((-1.0)*x260*x264)));
//                                                                        evalcond[1]=((-0.36)+(((-1.0)*x262))+x263+(((-1.0)*x261*x264))+(((-1.0)*x268))+(((-1.0)*x260*x266)));
//                                                                        evalcond[2]=(((x260*x263))+(((-1.0)*x260*x262))+((pz*x261))+(((-1.0)*x266))+(((-1.0)*x267)));
//                                                                        evalcond[3]=((-0.36)+((x261*x263))+(((-1.0)*x264))+(((-1.0)*x268))+(((-1.0)*x261*x262))+(((-1.0)*x260*x265)));
//                                                                        evalcond[4]=((-0.2016)+(((-1.0)*x262*x269))+(((-0.72)*pz*x260))+(((-1.0)*(px*px)))+(((-0.72)*x262))+((x263*x269))+(((-0.2592)*x261))+(((-1.0)*(py*py)))+(((-1.0)*pz*x265))+(((0.72)*x263)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j0;
//                                                                        vinfos[0].indices[0] = _ij0[0];
//                                                                        vinfos[0].indices[1] = _ij0[1];
//                                                                        vinfos[0].maxsolutions = _nj0;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j1;
//                                                                        vinfos[1].indices[0] = _ij1[0];
//                                                                        vinfos[1].indices[1] = _ij1[1];
//                                                                        vinfos[1].maxsolutions = _nj1;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j2;
//                                                                        vinfos[2].indices[0] = _ij2[0];
//                                                                        vinfos[2].indices[1] = _ij2[1];
//                                                                        vinfos[2].maxsolutions = _nj2;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                        bool j1valid[1]= {false};
//                                                        _nj1 = 1;
//                                                        IkReal x270=(cj0*py);
//                                                        IkReal x271=((25.0)*pz);
//                                                        IkReal x272=((6.0)*cj2);
//                                                        IkReal x273=(px*sj0);
//                                                        CheckValue<IkReal> x274=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((3.24)+((x272*x273))+(((2.16)*cj2))+(((6.0)*pz*sj2))+(((9.0)*x273))+(((-9.0)*x270))+(((-1.0)*x270*x272)))),-1);
                                                        if (false)//if(!x274.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x275 = IKatan2WithCheck(IkReal(((((-1.0)*x271*x273))+(((-2.16)*sj2))+(((-9.0)*pz))+((x270*x271))+(((-1.44)*cj2*sj2)))),IkReal(((-3.24)+(((-4.32)*cj2))+(((-1.44)*(cj2*cj2)))+((pz*x271)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x275.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x274.value)))+(x275.value));
//                                                        sj1array[0]=IKsin(j1array[0]);
//                                                        cj1array[0]=IKcos(j1array[0]);
                                                        if (false)//if( j1array[0] > IKPI )
                                                        {
//                                                            j1array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j1array[0] < -IKPI )
                                                        {
//                                                            j1array[0]+=IK2PI;
                                                        }
//                                                        j1valid[0] = true;
//                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                        {
                                                            if (false)//if( !j1valid[ij1] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij1[0] = ij1;
//                                                            _ij1[1] = -1;
//                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                            {
                                                                if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j1valid[iij1]=false;
//                                                                    _ij1[1] = iij1;
//                                                                    break;
                                                                }
                                                            }
//                                                            j1 = j1array[ij1];
//                                                            cj1 = cj1array[ij1];
//                                                            sj1 = sj1array[ij1];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x276=IKsin(j1);
//                                                                IkReal x277=IKcos(j1);
//                                                                IkReal x278=(px*sj0);
//                                                                IkReal x279=(cj0*py);
//                                                                IkReal x280=((0.24)*cj2);
//                                                                IkReal x281=((1.0)*pz);
//                                                                IkReal x282=((0.24)*sj2);
//                                                                IkReal x283=((0.36)*x276);
//                                                                IkReal x284=((0.36)*x277);
//                                                                IkReal x285=((0.72)*x277);
//                                                                evalcond[0]=((((-1.0)*x276*x280))+(((-1.0)*x281))+(((-1.0)*x283))+((x277*x282)));
//                                                                evalcond[1]=((-0.36)+(((-1.0)*x277*x280))+(((-1.0)*x278))+(((-1.0)*x276*x282))+x279+(((-1.0)*x284)));
//                                                                evalcond[2]=((((-1.0)*x276*x278))+(((-1.0)*x282))+(((-1.0)*x283))+((x276*x279))+((pz*x277)));
//                                                                evalcond[3]=((-0.36)+(((-1.0)*x276*x281))+(((-1.0)*x277*x278))+((x277*x279))+(((-1.0)*x280))+(((-1.0)*x284)));
//                                                                evalcond[4]=((-0.2016)+(((-1.0)*(px*px)))+((x279*x285))+(((-0.72)*x278))+(((-1.0)*pz*x281))+(((-0.2592)*x277))+(((-1.0)*(py*py)))+(((0.72)*x279))+(((-1.0)*x278*x285))+(((-0.72)*pz*x276)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j0;
//                                                                vinfos[0].indices[0] = _ij0[0];
//                                                                vinfos[0].indices[1] = _ij0[1];
//                                                                vinfos[0].maxsolutions = _nj0;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j1;
//                                                                vinfos[1].indices[0] = _ij1[0];
//                                                                vinfos[1].indices[1] = _ij1[1];
//                                                                vinfos[1].maxsolutions = _nj1;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j2;
//                                                                vinfos[2].indices[0] = _ij2[0];
//                                                                vinfos[2].indices[1] = _ij2[1];
//                                                                vinfos[2].maxsolutions = _nj2;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                bool j1valid[1]= {false};
                                                _nj1 = 1;
                                                IkReal x286=((150.0)*cj2);
                                                IkReal x287=(cj0*py);
                                                IkReal x288=(px*sj0);
                                                IkReal x289=((150.0)*sj2);
                                                CheckValue<IkReal> x290=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((117.0)+(((108.0)*cj2)))),-1);
                                                if(!x290.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal(((((-1.0)*x288*x289))+(((-54.0)*sj2))+(((-1.0)*pz*x286))+(((-225.0)*pz))+((x287*x289)))),IkReal(((-81.0)+((x286*x287))+(((-54.0)*cj2))+(((-225.0)*x288))+(((225.0)*x287))+(((-1.0)*x286*x288))+((pz*x289)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x291.valid)
                                                {
//                                                    continue;
                                                }
                                                j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x290.value)))+(x291.value));
                                                sj1array[0]=IKsin(j1array[0]);
                                                cj1array[0]=IKcos(j1array[0]);
                                                if( j1array[0] > IKPI )
                                                {
//                                                    j1array[0]-=IK2PI;
                                                }
                                                else if( j1array[0] < -IKPI )
                                                {
//                                                    j1array[0]+=IK2PI;
                                                }
                                                j1valid[0] = true;
                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                {
                                                    if( !j1valid[ij1] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij1[0] = ij1;
                                                    _ij1[1] = -1;
                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                    {
                                                        if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j1valid[iij1]=false;
//                                                            _ij1[1] = iij1;
//                                                            break;
                                                        }
                                                    }
                                                    j1 = j1array[ij1];
                                                    cj1 = cj1array[ij1];
                                                    sj1 = sj1array[ij1];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x292=IKsin(j1);
                                                        IkReal x293=IKcos(j1);
                                                        IkReal x294=(px*sj0);
                                                        IkReal x295=(cj0*py);
                                                        IkReal x296=((0.24)*cj2);
                                                        IkReal x297=((1.0)*pz);
                                                        IkReal x298=((0.24)*sj2);
                                                        IkReal x299=((0.36)*x292);
                                                        IkReal x300=((0.36)*x293);
                                                        IkReal x301=((0.72)*x293);
                                                        evalcond[0]=((((-1.0)*x299))+(((-1.0)*x297))+((x293*x298))+(((-1.0)*x292*x296)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x294))+(((-1.0)*x293*x296))+x295+(((-1.0)*x300))+(((-1.0)*x292*x298)));
                                                        evalcond[2]=((((-1.0)*x299))+(((-1.0)*x298))+((pz*x293))+(((-1.0)*x292*x294))+((x292*x295)));
                                                        evalcond[3]=((-0.36)+(((-1.0)*x293*x294))+(((-1.0)*x296))+((x293*x295))+(((-1.0)*x300))+(((-1.0)*x292*x297)));
                                                        evalcond[4]=((-0.2016)+(((0.72)*x295))+(((-1.0)*(px*px)))+(((-0.72)*pz*x292))+(((-1.0)*pz*x297))+(((-1.0)*x294*x301))+((x295*x301))+(((-0.2592)*x293))+(((-0.72)*x294))+(((-1.0)*(py*py))));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Hunker (478e384d3e70b2b7bae27b584cda0040)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
