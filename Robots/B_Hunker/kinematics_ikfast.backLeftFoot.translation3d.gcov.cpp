#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL float
#define IKFAST_NAMESPACE kinematics_ikfast_backLeftFoot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-20 01:59:42.044710
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return float(-IKPI_2);
    }
    else if (false)//else if( f >= 1 )
    {
//        return float(IKPI_2);
    }
//    return asinf(f);
}
inline double IKasin(double f)
{
//    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if (false)//if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if (false)//else if( f >= 1 )
    {
//        return IKPI_2;
    }
//    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return float(IKPI);
    }
    else if( f >= 1 )
    {
//        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if (false)//if( f <= 0.0f )
    {
//        return 0.0f;
    }
//    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if (false)//if( f <= 0.0 )
    {
//        return 0.0;
    }
//    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[1]);
    x1=IKsin(j[0]);
    x2=IKcos(j[2]);
    x3=IKcos(j[0]);
    x4=IKsin(j[1]);
    x5=IKsin(j[2]);
    x6=((0.33)*x5);
    x7=((0.36)*x3);
    x8=((0.33)*x2);
    x9=(x0*x1);
    eetrans[0]=((((-0.36)*x1))+(((-0.36)*x9))+(((-1.0)*x1*x4*x6))+(((-1.0)*x8*x9)));
    eetrans[1]=((0.36)+((x0*x7))+((x0*x3*x8))+x7+((x3*x4*x6)));
    eetrans[2]=((0.15)+(((-0.36)*x4))+((x0*x6))+(((-1.0)*x4*x8)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j0=numeric_limits<IkReal>::quiet_NaN();
        _ij0[0] = -1;
        _ij0[1] = -1;
        _nj0 = -1;
        j1=numeric_limits<IkReal>::quiet_NaN();
        _ij1[0] = -1;
        _ij1[1] = -1;
        _nj1 = -1;
        j2=numeric_limits<IkReal>::quiet_NaN();
        _ij2[0] = -1;
        _ij2[1] = -1;
        _nj2 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=px;
            new_py=((-0.36)+py);
            new_pz=((-0.15)+pz);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j0eval[1];
                j0eval[0]=((IKabs(px))+(IKabs(py)));
                if( IKabs(j0eval[0]) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
//                            evalcond[0]=((IKabs(px))+(IKabs(py)));
                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                            {
//                                bgotonextstatement=false;
                                {
                                    IkReal j2array[2], cj2array[2], sj2array[2];
                                    bool j2valid[2]= {false};
//                                    _nj2 = 2;
//                                    cj2array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz))));
                                    if (false)//if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
                                    {
//                                        j2valid[0] = j2valid[1] = true;
//                                        j2array[0] = IKacos(cj2array[0]);
//                                        sj2array[0] = IKsin(j2array[0]);
//                                        cj2array[1] = cj2array[0];
//                                        j2array[1] = -j2array[0];
//                                        sj2array[1] = -sj2array[0];
                                    }
                                    else if (false)//else if( isnan(cj2array[0]) )
                                    {
                                        // probably any value will work
//                                        j2valid[0] = true;
//                                        cj2array[0] = 1;
//                                        sj2array[0] = 0;
//                                        j2array[0] = 0;
                                    }
//                                    for(int ij2 = 0; ij2 < 2; ++ij2)
                                    {
                                        if (false)//if( !j2valid[ij2] )
                                        {
//                                            continue;
                                        }
//                                        _ij2[0] = ij2;
//                                        _ij2[1] = -1;
//                                        for(int iij2 = ij2+1; iij2 < 2; ++iij2)
                                        {
                                            if (false)//if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
                                            {
//                                                j2valid[iij2]=false;
//                                                _ij2[1] = iij2;
//                                                break;
                                            }
                                        }
//                                        j2 = j2array[ij2];
//                                        cj2 = cj2array[ij2];
//                                        sj2 = sj2array[ij2];

                                        {
                                            IkReal j1eval[3];
//                                            px=0;
//                                            py=0;
//                                            pp=pz*pz;
//                                            IkReal x10=pz*pz;
//                                            IkReal x11=((825.0)*pz);
//                                            j1eval[0]=((1.0)+(((7.71604938271605)*x10)));
//                                            j1eval[1]=IKsign(((324.0)+(((2500.0)*x10))));
//                                            j1eval[2]=((IKabs(((((-1.0)*cj2*x11))+(((-297.0)*sj2))+(((-900.0)*pz)))))+(IKabs(((-324.0)+((sj2*x11))+(((-297.0)*cj2))))));
                                            if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                            {
                                                {
                                                    IkReal j1eval[1];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    j1eval[0]=((-1.09090909090909)+(((-2.77777777777778)*pz*sj2))+(((-1.0)*cj2)));
                                                    if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j1eval[1];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j1eval[0]=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                            if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  )
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
//                                                                        IkReal x12=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                        if (false)//if((x12) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x13=IKabs(IKsqrt(x12));
//                                                                        IkReal x19 = x12;
                                                                        if (false)//if(IKabs(x19)==0)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x14=pow(x19,-0.5);
//                                                                        CheckValue<IkReal> x20=IKPowWithIntegerCheck<IKFAST_REAL>(x13,-1);
                                                                        if (false)//if(!x20.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x15=x20.value;
                                                                        if (false)//if((((1.0)+(((-1.1900826446281)*(x15*x15))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal x16=IKsqrt(((1.0)+(((-1.1900826446281)*(x15*x15)))));
//                                                                        IkReal x17=(x14*x15);
//                                                                        IkReal x18=(x14*x16);
//                                                                        CheckValue<IkReal> x21 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x21.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((1.09090909090909)*x15)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x15)) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        IkReal gconst0=((((-1.0)*(x21.value)))+(IKasin(((1.09090909090909)*x15))));
//                                                                        IkReal gconst1=((((-3.03030303030303)*pz*x17))+x18);
//                                                                        IkReal gconst2=((((-2.77777777777778)*pz*x18))+(((-1.09090909090909)*x17)));
                                                                        if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x22=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                        if (false)//if(!x22.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( (((1.09090909090909)*(x22.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x22.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x23.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((1.09090909090909)*(x22.value))))))+(x23.value)+j2)))), 6.28318530717959)));
                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                        {
//                                                                            bgotonextstatement=false;
                                                                            {
                                                                                IkReal j1eval[2];
//                                                                                IkReal x24=pz*pz;
//                                                                                CheckValue<IkReal> x33 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                if (false)//if(!x33.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x25=((1.0)*(x33.value));
//                                                                                IkReal x26=x12;
                                                                                if (false)//if((x26) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x27=IKabs(IKsqrt(x26));
//                                                                                IkReal x34 = x26;
                                                                                if (false)//if(IKabs(x34)==0)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x28=pow(x34,-0.5);
//                                                                                CheckValue<IkReal> x35=IKPowWithIntegerCheck<IKFAST_REAL>(x27,-1);
                                                                                if (false)//if(!x35.valid)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x29=x35.value;
                                                                                if (false)//if((((1.0)+(((-1.1900826446281)*(x29*x29))))) < -0.00001)
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal x30=IKsqrt(((1.0)+(((-1.1900826446281)*(x29*x29)))));
//                                                                                IkReal x31=(x28*x29);
//                                                                                IkReal x32=(x28*x30);
//                                                                                px=0;
//                                                                                py=0;
//                                                                                pp=x24;
//                                                                                sj2=gconst1;
//                                                                                cj2=gconst2;
                                                                                if (false)//if( (((1.09090908694215)*x29)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x29)) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                j2=((((-1.0)*x25))+(IKasin(((1.09090908694215)*x29))));
                                                                                if (false)//if( (((1.09090909090909)*x29)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x29)) > 1+IKFAST_SINCOS_THRESH )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                IkReal gconst0=((((-1.0)*x25))+(IKasin(((1.09090909090909)*x29))));
//                                                                                IkReal gconst1=((((-3.03030303030303)*pz*x31))+x32);
//                                                                                IkReal gconst2=((((-2.77777777777778)*pz*x32))+(((-1.09090909090909)*x31)));
//                                                                                IkReal x36=pz*pz;
//                                                                                j1eval[0]=((1.0)+(((7.71604938271605)*x36)));
//                                                                                j1eval[1]=IKsign(((324.0)+(((2500.0)*x36))));
                                                                                if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]= {false};
//                                                                                        _nj1 = 1;
//                                                                                        IkReal x37=((297.0)*gconst1);
//                                                                                        IkReal x38=((900.0)*pz);
//                                                                                        CheckValue<IkReal> x39 = IKatan2WithCheck(IkReal(((((594.0)*gconst2))+(((272.25)*(gconst2*gconst2))))),IkReal(((((-1.0)*x37))+(((-272.25)*gconst1*gconst2))+x38)),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x39.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x40=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((((-825.0)*gconst2*pz))+(((-1.0)*x38))+x37)),-1);
                                                                                        if (false)//if(!x40.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j1array[0]=((-1.5707963267949)+(x39.value)+(((1.5707963267949)*(x40.value))));
//                                                                                        sj1array[0]=IKsin(j1array[0]);
//                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if (false)//if( j1array[0] > IKPI )
                                                                                        {
//                                                                                            j1array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j1array[0] < -IKPI )
                                                                                        {
//                                                                                            j1array[0]+=IK2PI;
                                                                                        }
//                                                                                        j1valid[0] = true;
//                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if (false)//if( !j1valid[ij1] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij1[0] = ij1;
//                                                                                            _ij1[1] = -1;
//                                                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j1valid[iij1]=false;
//                                                                                                    _ij1[1] = iij1;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j1 = j1array[ij1];
//                                                                                            cj1 = cj1array[ij1];
//                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x41=IKcos(j1);
//                                                                                                IkReal x42=IKsin(j1);
//                                                                                                IkReal x43=((0.33)*gconst1);
//                                                                                                IkReal x44=((1.0)*pz);
//                                                                                                IkReal x45=((0.33)*gconst2);
//                                                                                                IkReal x46=((0.36)*x41);
//                                                                                                IkReal x47=((0.36)*x42);
//                                                                                                IkReal x48=((0.33)*x42);
//                                                                                                evalcond[0]=(((pz*x41))+(((-1.0)*x47))+(((-1.0)*x43)));
//                                                                                                evalcond[1]=((-0.36)+(((-1.0)*x42*x44))+(((-1.0)*x45))+(((-1.0)*x46)));
//                                                                                                evalcond[2]=((-0.1503)+(((-0.2592)*x41))+(((-1.0)*pz*x44))+(((-0.72)*pz*x42)));
//                                                                                                evalcond[3]=((-0.36)+(((-1.0)*x42*x43))+(((-1.0)*x46))+(((-1.0)*x41*x45)));
//                                                                                                evalcond[4]=(((x41*x43))+(((-1.0)*x42*x45))+(((-1.0)*x44))+(((-1.0)*x47)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                bool j0valid[1]= {false};
//                                                                                                _nj0 = 1;
//                                                                                                j0array[0]=0;
//                                                                                                sj0array[0]=IKsin(j0array[0]);
//                                                                                                cj0array[0]=IKcos(j0array[0]);
                                                                                                if (false)//if( j0array[0] > IKPI )
                                                                                                {
//                                                                                                    j0array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j0array[0] < -IKPI )
                                                                                                {
//                                                                                                    j0array[0]+=IK2PI;
                                                                                                }
//                                                                                                j0valid[0] = true;
//                                                                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                {
                                                                                                    if (false)//if( !j0valid[ij0] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij0[0] = ij0;
//                                                                                                    _ij0[1] = -1;
//                                                                                                    for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                    {
                                                                                                        if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j0valid[iij0]=false;
//                                                                                                            _ij0[1] = iij0;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j0 = j0array[ij0];
//                                                                                                    cj0 = cj0array[ij0];
//                                                                                                    sj0 = sj0array[ij0];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j0;
//                                                                                                        vinfos[0].indices[0] = _ij0[0];
//                                                                                                        vinfos[0].indices[1] = _ij0[1];
//                                                                                                        vinfos[0].maxsolutions = _nj0;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j1;
//                                                                                                        vinfos[1].indices[0] = _ij1[0];
//                                                                                                        vinfos[1].indices[1] = _ij1[1];
//                                                                                                        vinfos[1].maxsolutions = _nj1;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j2;
//                                                                                                        vinfos[2].indices[0] = _ij2[0];
//                                                                                                        vinfos[2].indices[1] = _ij2[1];
//                                                                                                        vinfos[2].maxsolutions = _nj2;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]= {false};
//                                                                                        _nj1 = 1;
//                                                                                        IkReal x49=((825.0)*pz);
//                                                                                        CheckValue<IkReal> x50=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((324.0)+(((2500.0)*(pz*pz))))),-1);
                                                                                        if (false)//if(!x50.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        CheckValue<IkReal> x51 = IKatan2WithCheck(IkReal(((((-297.0)*gconst1))+(((-1.0)*gconst2*x49))+(((-900.0)*pz)))),IkReal(((-324.0)+(((-297.0)*gconst2))+((gconst1*x49)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (false)//if(!x51.valid)
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x50.value)))+(x51.value));
//                                                                                        sj1array[0]=IKsin(j1array[0]);
//                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if (false)//if( j1array[0] > IKPI )
                                                                                        {
//                                                                                            j1array[0]-=IK2PI;
                                                                                        }
                                                                                        else if (false)//else if( j1array[0] < -IKPI )
                                                                                        {
//                                                                                            j1array[0]+=IK2PI;
                                                                                        }
//                                                                                        j1valid[0] = true;
//                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                            if (false)//if( !j1valid[ij1] )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            _ij1[0] = ij1;
//                                                                                            _ij1[1] = -1;
//                                                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                            {
                                                                                                if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                {
//                                                                                                    j1valid[iij1]=false;
//                                                                                                    _ij1[1] = iij1;
//                                                                                                    break;
                                                                                                }
                                                                                            }
//                                                                                            j1 = j1array[ij1];
//                                                                                            cj1 = cj1array[ij1];
//                                                                                            sj1 = sj1array[ij1];
                                                                                            {
                                                                                                IkReal evalcond[5];
//                                                                                                IkReal x52=IKcos(j1);
//                                                                                                IkReal x53=IKsin(j1);
//                                                                                                IkReal x54=((0.33)*gconst1);
//                                                                                                IkReal x55=((1.0)*pz);
//                                                                                                IkReal x56=((0.33)*gconst2);
//                                                                                                IkReal x57=((0.36)*x52);
//                                                                                                IkReal x58=((0.36)*x53);
//                                                                                                IkReal x59=((0.33)*x53);
//                                                                                                evalcond[0]=(((pz*x52))+(((-1.0)*x58))+(((-1.0)*x54)));
//                                                                                                evalcond[1]=((-0.36)+(((-1.0)*x53*x55))+(((-1.0)*x56))+(((-1.0)*x57)));
//                                                                                                evalcond[2]=((-0.1503)+(((-0.72)*pz*x53))+(((-0.2592)*x52))+(((-1.0)*pz*x55)));
//                                                                                                evalcond[3]=((-0.36)+(((-1.0)*x53*x54))+(((-1.0)*x52*x56))+(((-1.0)*x57)));
//                                                                                                evalcond[4]=((((-1.0)*x53*x56))+((x52*x54))+(((-1.0)*x58))+(((-1.0)*x55)));
                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                bool j0valid[1]= {false};
//                                                                                                _nj0 = 1;
//                                                                                                j0array[0]=0;
//                                                                                                sj0array[0]=IKsin(j0array[0]);
//                                                                                                cj0array[0]=IKcos(j0array[0]);
                                                                                                if (false)//if( j0array[0] > IKPI )
                                                                                                {
//                                                                                                    j0array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j0array[0] < -IKPI )
                                                                                                {
//                                                                                                    j0array[0]+=IK2PI;
                                                                                                }
//                                                                                                j0valid[0] = true;
//                                                                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                {
                                                                                                    if (false)//if( !j0valid[ij0] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij0[0] = ij0;
//                                                                                                    _ij0[1] = -1;
//                                                                                                    for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                    {
                                                                                                        if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j0valid[iij0]=false;
//                                                                                                            _ij0[1] = iij0;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j0 = j0array[ij0];
//                                                                                                    cj0 = cj0array[ij0];
//                                                                                                    sj0 = sj0array[ij0];

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j0;
//                                                                                                        vinfos[0].indices[0] = _ij0[0];
//                                                                                                        vinfos[0].indices[1] = _ij0[1];
//                                                                                                        vinfos[0].maxsolutions = _nj0;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j1;
//                                                                                                        vinfos[1].indices[0] = _ij1[0];
//                                                                                                        vinfos[1].indices[1] = _ij1[1];
//                                                                                                        vinfos[1].maxsolutions = _nj1;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j2;
//                                                                                                        vinfos[2].indices[0] = _ij2[0];
//                                                                                                        vinfos[2].indices[1] = _ij2[1];
//                                                                                                        vinfos[2].maxsolutions = _nj2;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    }
                                                                    while(0);
                                                                    if (false)//if( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            IkReal x60=((1.0)+(((7.71604938271605)*(pz*pz))));
                                                                            if (false)//if((x60) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x61=IKabs(IKsqrt(x60));
//                                                                            IkReal x67 = x60;
                                                                            if (false)//if(IKabs(x67)==0)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x62=pow(x67,-0.5);
//                                                                            IkReal x63=(pz*x62);
//                                                                            CheckValue<IkReal> x68=IKPowWithIntegerCheck<IKFAST_REAL>(x61,-1);
                                                                            if (false)//if(!x68.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x64=x68.value;
//                                                                            IkReal x65=((1.09090909090909)*x64);
                                                                            if (false)//if((((1.0)+(((-1.1900826446281)*(x64*x64))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal x66=IKsqrt(((1.0)+(((-1.1900826446281)*(x64*x64)))));
//                                                                            CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x69.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (x65) < -1-IKFAST_SINCOS_THRESH || (x65) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            IkReal gconst3=((3.14159265358979)+(((-1.0)*(x69.value)))+(((-1.0)*(IKasin(x65)))));
//                                                                            IkReal gconst4=((((-1.0)*x62*x66))+(((-3.03030303030303)*x63*x64)));
//                                                                            IkReal gconst5=((((2.77777777777778)*x63*x66))+(((-1.0)*x62*x65)));
                                                                            if (false)//if((((1.0)+(((7.71604938271605)*(pz*pz))))) < -0.00001)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x70=IKPowWithIntegerCheck<IKFAST_REAL>(IKabs(IKsqrt(((1.0)+(((7.71604938271605)*(pz*pz)))))),-1);
                                                                            if (false)//if(!x70.valid)
                                                                            {
//                                                                                continue;
                                                                            }
                                                                            if (false)//if( (((1.09090909090909)*(x70.value))) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*(x70.value))) > 1+IKFAST_SINCOS_THRESH )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                            if (false)//if(!x71.valid)
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((1.09090909090909)*(x70.value))))+(x71.value)+j2)))), 6.28318530717959)));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j1eval[2];
//                                                                                    IkReal x72=pz*pz;
//                                                                                    CheckValue<IkReal> x81 = IKatan2WithCheck(IkReal(-1.0),IkReal(((-2.77777777777778)*pz)),IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (false)//if(!x81.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x73=((1.0)*(x81.value));
//                                                                                    IkReal x74=x60;
                                                                                    if (false)//if((x74) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x75=IKabs(IKsqrt(x74));
//                                                                                    IkReal x82 = x74;
                                                                                    if (false)//if(IKabs(x82)==0)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x76=pow(x82,-0.5);
//                                                                                    CheckValue<IkReal> x83=IKPowWithIntegerCheck<IKFAST_REAL>(x75,-1);
                                                                                    if (false)//if(!x83.valid)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x77=x83.value;
                                                                                    if (false)//if((((1.0)+(((-1.1900826446281)*(x77*x77))))) < -0.00001)
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal x78=IKsqrt(((1.0)+(((-1.1900826446281)*(x77*x77)))));
//                                                                                    IkReal x79=(x76*x77);
//                                                                                    IkReal x80=(x76*x78);
//                                                                                    px=0;
//                                                                                    py=0;
//                                                                                    pp=x72;
//                                                                                    sj2=gconst4;
//                                                                                    cj2=gconst5;
                                                                                    if (false)//if( (((1.09090908694215)*x77)) < -1-IKFAST_SINCOS_THRESH || (((1.09090908694215)*x77)) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    j2=((3.14159265)+(((-1.0)*(IKasin(((1.09090908694215)*x77)))))+(((-1.0)*x73)));
                                                                                    if (false)//if( (((1.09090909090909)*x77)) < -1-IKFAST_SINCOS_THRESH || (((1.09090909090909)*x77)) > 1+IKFAST_SINCOS_THRESH )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    IkReal gconst3=((3.14159265358979)+(((-1.0)*x73))+(((-1.0)*(IKasin(((1.09090909090909)*x77))))));
//                                                                                    IkReal gconst4=((((-1.0)*x80))+(((-3.03030303030303)*pz*x79)));
//                                                                                    IkReal gconst5=((((-1.09090909090909)*x79))+(((2.77777777777778)*pz*x80)));
//                                                                                    IkReal x84=pz*pz;
//                                                                                    j1eval[0]=((1.0)+(((7.71604938271605)*x84)));
//                                                                                    j1eval[1]=IKsign(((324.0)+(((2500.0)*x84))));
                                                                                    if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1]= {false};
//                                                                                            _nj1 = 1;
//                                                                                            IkReal x85=(gconst4*pz);
//                                                                                            CheckValue<IkReal> x86=IKPowWithIntegerCheck<IKFAST_REAL>(((-4.32)+(((-3.96)*gconst5))+(((-11.0)*x85))),-1);
                                                                                            if (false)//if(!x86.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x87=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((-1100.0)*x85))+(((-396.0)*gconst5))),-1);
                                                                                            if (false)//if(!x87.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
                                                                                            if (false)//if( IKabs(((x86.value)*(((((12.0)*pz))+(((3.63)*gconst4*gconst5))+(((3.96)*gconst4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x87.value)*(((432.0)+(((-363.0)*(gconst4*gconst4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x86.value)*(((((12.0)*pz))+(((3.63)*gconst4*gconst5))+(((3.96)*gconst4))))))+IKsqr(((x87.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j1array[0]=IKatan2(((x86.value)*(((((12.0)*pz))+(((3.63)*gconst4*gconst5))+(((3.96)*gconst4))))), ((x87.value)*(((432.0)+(((-363.0)*(gconst4*gconst4)))))));
//                                                                                            sj1array[0]=IKsin(j1array[0]);
//                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                            if (false)//if( j1array[0] > IKPI )
                                                                                            {
//                                                                                                j1array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j1array[0] < -IKPI )
                                                                                            {
//                                                                                                j1array[0]+=IK2PI;
                                                                                            }
//                                                                                            j1valid[0] = true;
//                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if (false)//if( !j1valid[ij1] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij1[0] = ij1;
//                                                                                                _ij1[1] = -1;
//                                                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j1valid[iij1]=false;
//                                                                                                        _ij1[1] = iij1;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j1 = j1array[ij1];
//                                                                                                cj1 = cj1array[ij1];
//                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x88=IKcos(j1);
//                                                                                                    IkReal x89=IKsin(j1);
//                                                                                                    IkReal x90=((0.33)*gconst5);
//                                                                                                    IkReal x91=((0.33)*gconst4);
//                                                                                                    IkReal x92=((0.36)*x88);
//                                                                                                    IkReal x93=((0.36)*x89);
//                                                                                                    IkReal x94=(pz*x89);
//                                                                                                    evalcond[0]=(((pz*x88))+(((-1.0)*x93))+(((-1.0)*x91)));
//                                                                                                    evalcond[1]=((-0.36)+(((-1.0)*x94))+(((-1.0)*x90))+(((-1.0)*x92)));
//                                                                                                    evalcond[2]=((-0.1503)+(((-0.72)*x94))+(((-0.2592)*x88))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=((-0.36)+(((-1.0)*x92))+(((-1.0)*x88*x90))+(((-1.0)*x89*x91)));
//                                                                                                    evalcond[4]=((((-1.0)*pz))+((x88*x91))+(((-1.0)*x93))+(((-1.0)*x89*x90)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                    bool j0valid[1]= {false};
//                                                                                                    _nj0 = 1;
//                                                                                                    j0array[0]=0;
//                                                                                                    sj0array[0]=IKsin(j0array[0]);
//                                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                                    if (false)//if( j0array[0] > IKPI )
                                                                                                    {
//                                                                                                        j0array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j0array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j0array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j0valid[0] = true;
//                                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                    {
                                                                                                        if (false)//if( !j0valid[ij0] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij0[0] = ij0;
//                                                                                                        _ij0[1] = -1;
//                                                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                        {
                                                                                                            if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j0valid[iij0]=false;
//                                                                                                                _ij0[1] = iij0;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j0 = j0array[ij0];
//                                                                                                        cj0 = cj0array[ij0];
//                                                                                                        sj0 = sj0array[ij0];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j0;
//                                                                                                            vinfos[0].indices[0] = _ij0[0];
//                                                                                                            vinfos[0].indices[1] = _ij0[1];
//                                                                                                            vinfos[0].maxsolutions = _nj0;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j1;
//                                                                                                            vinfos[1].indices[0] = _ij1[0];
//                                                                                                            vinfos[1].indices[1] = _ij1[1];
//                                                                                                            vinfos[1].maxsolutions = _nj1;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j2;
//                                                                                                            vinfos[2].indices[0] = _ij2[0];
//                                                                                                            vinfos[2].indices[1] = _ij2[1];
//                                                                                                            vinfos[2].maxsolutions = _nj2;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                                                            bool j1valid[1]= {false};
//                                                                                            _nj1 = 1;
//                                                                                            IkReal x95=((825.0)*pz);
//                                                                                            CheckValue<IkReal> x96=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((324.0)+(((2500.0)*(pz*pz))))),-1);
                                                                                            if (false)//if(!x96.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            CheckValue<IkReal> x97 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x95))+(((-297.0)*gconst4))+(((-900.0)*pz)))),IkReal(((-324.0)+(((-297.0)*gconst5))+((gconst4*x95)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (false)//if(!x97.valid)
                                                                                            {
//                                                                                                continue;
                                                                                            }
//                                                                                            j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x96.value)))+(x97.value));
//                                                                                            sj1array[0]=IKsin(j1array[0]);
//                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                            if (false)//if( j1array[0] > IKPI )
                                                                                            {
//                                                                                                j1array[0]-=IK2PI;
                                                                                            }
                                                                                            else if (false)//else if( j1array[0] < -IKPI )
                                                                                            {
//                                                                                                j1array[0]+=IK2PI;
                                                                                            }
//                                                                                            j1valid[0] = true;
//                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                            {
                                                                                                if (false)//if( !j1valid[ij1] )
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                _ij1[0] = ij1;
//                                                                                                _ij1[1] = -1;
//                                                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                                                {
                                                                                                    if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
//                                                                                                        j1valid[iij1]=false;
//                                                                                                        _ij1[1] = iij1;
//                                                                                                        break;
                                                                                                    }
                                                                                                }
//                                                                                                j1 = j1array[ij1];
//                                                                                                cj1 = cj1array[ij1];
//                                                                                                sj1 = sj1array[ij1];
                                                                                                {
                                                                                                    IkReal evalcond[5];
//                                                                                                    IkReal x98=IKcos(j1);
//                                                                                                    IkReal x99=IKsin(j1);
//                                                                                                    IkReal x100=((0.33)*gconst5);
//                                                                                                    IkReal x101=((0.33)*gconst4);
//                                                                                                    IkReal x102=((0.36)*x98);
//                                                                                                    IkReal x103=((0.36)*x99);
//                                                                                                    IkReal x104=(pz*x99);
//                                                                                                    evalcond[0]=((((-1.0)*x101))+(((-1.0)*x103))+((pz*x98)));
//                                                                                                    evalcond[1]=((-0.36)+(((-1.0)*x100))+(((-1.0)*x102))+(((-1.0)*x104)));
//                                                                                                    evalcond[2]=((-0.1503)+(((-0.2592)*x98))+(((-0.72)*x104))+(((-1.0)*(pz*pz))));
//                                                                                                    evalcond[3]=((-0.36)+(((-1.0)*x102))+(((-1.0)*x101*x99))+(((-1.0)*x100*x98)));
//                                                                                                    evalcond[4]=(((x101*x98))+(((-1.0)*x103))+(((-1.0)*pz))+(((-1.0)*x100*x99)));
                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                                    bool j0valid[1]= {false};
//                                                                                                    _nj0 = 1;
//                                                                                                    j0array[0]=0;
//                                                                                                    sj0array[0]=IKsin(j0array[0]);
//                                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                                    if (false)//if( j0array[0] > IKPI )
                                                                                                    {
//                                                                                                        j0array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j0array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j0array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j0valid[0] = true;
//                                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                                    {
                                                                                                        if (false)//if( !j0valid[ij0] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij0[0] = ij0;
//                                                                                                        _ij0[1] = -1;
//                                                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                                        {
                                                                                                            if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j0valid[iij0]=false;
//                                                                                                                _ij0[1] = iij0;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j0 = j0array[ij0];
//                                                                                                        cj0 = cj0array[ij0];
//                                                                                                        sj0 = sj0array[ij0];

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j0;
//                                                                                                            vinfos[0].indices[0] = _ij0[0];
//                                                                                                            vinfos[0].indices[1] = _ij0[1];
//                                                                                                            vinfos[0].maxsolutions = _nj0;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j1;
//                                                                                                            vinfos[1].indices[0] = _ij1[0];
//                                                                                                            vinfos[1].indices[1] = _ij1[1];
//                                                                                                            vinfos[1].maxsolutions = _nj1;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j2;
//                                                                                                            vinfos[2].indices[0] = _ij2[0];
//                                                                                                            vinfos[2].indices[1] = _ij2[1];
//                                                                                                            vinfos[2].maxsolutions = _nj2;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                if( 1 )
                                                                                {
//                                                                                    bgotonextstatement=false;
//                                                                                    continue; // branch miss [j0, j1]

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if( bgotonextstatement )
                                                                            {
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                                    bool j1valid[1]= {false};
//                                                                    _nj1 = 1;
//                                                                    IkReal x105=pz*pz;
//                                                                    CheckValue<IkReal> x106=IKPowWithIntegerCheck<IKFAST_REAL>(((2916.0)+(((22500.0)*x105))),-1);
                                                                    if (false)//if(!x106.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x107=IKPowWithIntegerCheck<IKFAST_REAL>(((324.0)+(((2500.0)*x105))),-1);
                                                                    if (false)//if(!x107.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((x106.value)*(((((-2673.0)*sj2))+(((-31250.0)*(pz*pz*pz)))+(((-4696.875)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x107.value)*(((-187.875)+(((-1250.0)*x105))+(((825.0)*pz*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x106.value)*(((((-2673.0)*sj2))+(((-31250.0)*(pz*pz*pz)))+(((-4696.875)*pz))))))+IKsqr(((x107.value)*(((-187.875)+(((-1250.0)*x105))+(((825.0)*pz*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j1array[0]=IKatan2(((x106.value)*(((((-2673.0)*sj2))+(((-31250.0)*(pz*pz*pz)))+(((-4696.875)*pz))))), ((x107.value)*(((-187.875)+(((-1250.0)*x105))+(((825.0)*pz*sj2))))));
//                                                                    sj1array[0]=IKsin(j1array[0]);
//                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                    if (false)//if( j1array[0] > IKPI )
                                                                    {
//                                                                        j1array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j1array[0] < -IKPI )
                                                                    {
//                                                                        j1array[0]+=IK2PI;
                                                                    }
//                                                                    j1valid[0] = true;
//                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                    {
                                                                        if (false)//if( !j1valid[ij1] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij1[0] = ij1;
//                                                                        _ij1[1] = -1;
//                                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                        {
                                                                            if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j1valid[iij1]=false;
//                                                                                _ij1[1] = iij1;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j1 = j1array[ij1];
//                                                                        cj1 = cj1array[ij1];
//                                                                        sj1 = sj1array[ij1];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x108=IKcos(j1);
//                                                                            IkReal x109=IKsin(j1);
//                                                                            IkReal x110=((0.33)*cj2);
//                                                                            IkReal x111=((0.33)*sj2);
//                                                                            IkReal x112=((0.36)*x108);
//                                                                            IkReal x113=((0.36)*x109);
//                                                                            IkReal x114=(pz*x109);
//                                                                            evalcond[0]=(((pz*x108))+(((-1.0)*x111))+(((-1.0)*x113)));
//                                                                            evalcond[1]=((-0.36)+(((-1.0)*x112))+(((-1.0)*x110))+(((-1.0)*x114)));
//                                                                            evalcond[2]=((-0.1503)+(((-0.72)*x114))+(((-0.2592)*x108))+(((-1.0)*(pz*pz))));
//                                                                            evalcond[3]=((-0.36)+(((-1.0)*x112))+(((-1.0)*x108*x110))+(((-1.0)*x109*x111)));
//                                                                            evalcond[4]=((((-1.0)*x113))+(((-1.0)*pz))+(((-1.0)*x109*x110))+((x108*x111)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                            bool j0valid[1]= {false};
//                                                                            _nj0 = 1;
//                                                                            j0array[0]=0;
//                                                                            sj0array[0]=IKsin(j0array[0]);
//                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                            if (false)//if( j0array[0] > IKPI )
                                                                            {
//                                                                                j0array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j0array[0] < -IKPI )
                                                                            {
//                                                                                j0array[0]+=IK2PI;
                                                                            }
//                                                                            j0valid[0] = true;
//                                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                            {
                                                                                if (false)//if( !j0valid[ij0] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij0[0] = ij0;
//                                                                                _ij0[1] = -1;
//                                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                                {
                                                                                    if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j0valid[iij0]=false;
//                                                                                        _ij0[1] = iij0;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j0 = j0array[ij0];
//                                                                                cj0 = cj0array[ij0];
//                                                                                sj0 = sj0array[ij0];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j0;
//                                                                                    vinfos[0].indices[0] = _ij0[0];
//                                                                                    vinfos[0].indices[1] = _ij0[1];
//                                                                                    vinfos[0].maxsolutions = _nj0;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j1;
//                                                                                    vinfos[1].indices[0] = _ij1[0];
//                                                                                    vinfos[1].indices[1] = _ij1[1];
//                                                                                    vinfos[1].maxsolutions = _nj1;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j2;
//                                                                                    vinfos[2].indices[0] = _ij2[0];
//                                                                                    vinfos[2].indices[1] = _ij2[1];
//                                                                                    vinfos[2].maxsolutions = _nj2;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j1array[1], cj1array[1], sj1array[1];
                                                            bool j1valid[1]= {false};
//                                                            _nj1 = 1;
//                                                            IkReal x115=(pz*sj2);
//                                                            CheckValue<IkReal> x116=IKPowWithIntegerCheck<IKFAST_REAL>(((-4.32)+(((-3.96)*cj2))+(((-11.0)*x115))),-1);
                                                            if (false)//if(!x116.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            CheckValue<IkReal> x117=IKPowWithIntegerCheck<IKFAST_REAL>(((-432.0)+(((-1100.0)*x115))+(((-396.0)*cj2))),-1);
                                                            if (false)//if(!x117.valid)
                                                            {
//                                                                continue;
                                                            }
                                                            if (false)//if( IKabs(((x116.value)*(((((12.0)*pz))+(((3.63)*cj2*sj2))+(((3.96)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x117.value)*(((69.0)+(((363.0)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x116.value)*(((((12.0)*pz))+(((3.63)*cj2*sj2))+(((3.96)*sj2))))))+IKsqr(((x117.value)*(((69.0)+(((363.0)*(cj2*cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                            {
//                                                                continue;
                                                            }
//                                                            j1array[0]=IKatan2(((x116.value)*(((((12.0)*pz))+(((3.63)*cj2*sj2))+(((3.96)*sj2))))), ((x117.value)*(((69.0)+(((363.0)*(cj2*cj2)))))));
//                                                            sj1array[0]=IKsin(j1array[0]);
//                                                            cj1array[0]=IKcos(j1array[0]);
                                                            if (false)//if( j1array[0] > IKPI )
                                                            {
//                                                                j1array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j1array[0] < -IKPI )
                                                            {
//                                                                j1array[0]+=IK2PI;
                                                            }
//                                                            j1valid[0] = true;
//                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                            {
                                                                if (false)//if( !j1valid[ij1] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij1[0] = ij1;
//                                                                _ij1[1] = -1;
//                                                                for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                {
                                                                    if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j1valid[iij1]=false;
//                                                                        _ij1[1] = iij1;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j1 = j1array[ij1];
//                                                                cj1 = cj1array[ij1];
//                                                                sj1 = sj1array[ij1];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x118=IKcos(j1);
//                                                                    IkReal x119=IKsin(j1);
//                                                                    IkReal x120=((0.33)*cj2);
//                                                                    IkReal x121=((0.33)*sj2);
//                                                                    IkReal x122=((0.36)*x118);
//                                                                    IkReal x123=((0.36)*x119);
//                                                                    IkReal x124=(pz*x119);
//                                                                    evalcond[0]=(((pz*x118))+(((-1.0)*x121))+(((-1.0)*x123)));
//                                                                    evalcond[1]=((-0.36)+(((-1.0)*x120))+(((-1.0)*x122))+(((-1.0)*x124)));
//                                                                    evalcond[2]=((-0.1503)+(((-0.72)*x124))+(((-0.2592)*x118))+(((-1.0)*(pz*pz))));
//                                                                    evalcond[3]=((-0.36)+(((-1.0)*x119*x121))+(((-1.0)*x118*x120))+(((-1.0)*x122)));
//                                                                    evalcond[4]=((((-1.0)*x119*x120))+(((-1.0)*x123))+(((-1.0)*pz))+((x118*x121)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                    bool j0valid[1]= {false};
//                                                                    _nj0 = 1;
//                                                                    j0array[0]=0;
//                                                                    sj0array[0]=IKsin(j0array[0]);
//                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                    if (false)//if( j0array[0] > IKPI )
                                                                    {
//                                                                        j0array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j0array[0] < -IKPI )
                                                                    {
//                                                                        j0array[0]+=IK2PI;
                                                                    }
//                                                                    j0valid[0] = true;
//                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                    {
                                                                        if (false)//if( !j0valid[ij0] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij0[0] = ij0;
//                                                                        _ij0[1] = -1;
//                                                                        for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                        {
                                                                            if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j0valid[iij0]=false;
//                                                                                _ij0[1] = iij0;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j0 = j0array[ij0];
//                                                                        cj0 = cj0array[ij0];
//                                                                        sj0 = sj0array[ij0];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j0;
//                                                                            vinfos[0].indices[0] = _ij0[0];
//                                                                            vinfos[0].indices[1] = _ij0[1];
//                                                                            vinfos[0].maxsolutions = _nj0;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j1;
//                                                                            vinfos[1].indices[0] = _ij1[0];
//                                                                            vinfos[1].indices[1] = _ij1[1];
//                                                                            vinfos[1].maxsolutions = _nj1;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j2;
//                                                                            vinfos[2].indices[0] = _ij2[0];
//                                                                            vinfos[2].indices[1] = _ij2[1];
//                                                                            vinfos[2].maxsolutions = _nj2;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                            else
                                            {
                                                {
                                                    IkReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]= {false};
//                                                    _nj1 = 1;
//                                                    IkReal x125=((825.0)*pz);
//                                                    CheckValue<IkReal> x126=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((324.0)+(((2500.0)*(pz*pz))))),-1);
                                                    if (false)//if(!x126.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    CheckValue<IkReal> x127 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x125))+(((-297.0)*sj2))+(((-900.0)*pz)))),IkReal(((-324.0)+((sj2*x125))+(((-297.0)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
                                                    if (false)//if(!x127.valid)
                                                    {
//                                                        continue;
                                                    }
//                                                    j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x126.value)))+(x127.value));
//                                                    sj1array[0]=IKsin(j1array[0]);
//                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if (false)//if( j1array[0] > IKPI )
                                                    {
//                                                        j1array[0]-=IK2PI;
                                                    }
                                                    else if (false)//else if( j1array[0] < -IKPI )
                                                    {
//                                                        j1array[0]+=IK2PI;
                                                    }
//                                                    j1valid[0] = true;
//                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                        if (false)//if( !j1valid[ij1] )
                                                        {
//                                                            continue;
                                                        }
//                                                        _ij1[0] = ij1;
//                                                        _ij1[1] = -1;
//                                                        for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                        {
                                                            if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                            {
//                                                                j1valid[iij1]=false;
//                                                                _ij1[1] = iij1;
//                                                                break;
                                                            }
                                                        }
//                                                        j1 = j1array[ij1];
//                                                        cj1 = cj1array[ij1];
//                                                        sj1 = sj1array[ij1];
                                                        {
                                                            IkReal evalcond[5];
//                                                            IkReal x128=IKcos(j1);
//                                                            IkReal x129=IKsin(j1);
//                                                            IkReal x130=((0.33)*cj2);
//                                                            IkReal x131=((0.33)*sj2);
//                                                            IkReal x132=((0.36)*x128);
//                                                            IkReal x133=((0.36)*x129);
//                                                            IkReal x134=(pz*x129);
//                                                            evalcond[0]=(((pz*x128))+(((-1.0)*x133))+(((-1.0)*x131)));
//                                                            evalcond[1]=((-0.36)+(((-1.0)*x132))+(((-1.0)*x130))+(((-1.0)*x134)));
//                                                            evalcond[2]=((-0.1503)+(((-0.72)*x134))+(((-0.2592)*x128))+(((-1.0)*(pz*pz))));
//                                                            evalcond[3]=((-0.36)+(((-1.0)*x128*x130))+(((-1.0)*x132))+(((-1.0)*x129*x131)));
//                                                            evalcond[4]=((((-1.0)*pz))+(((-1.0)*x133))+((x128*x131))+(((-1.0)*x129*x130)));
                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                            {
//                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]= {false};
//                                                            _nj0 = 1;
//                                                            j0array[0]=0;
//                                                            sj0array[0]=IKsin(j0array[0]);
//                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if (false)//if( j0array[0] > IKPI )
                                                            {
//                                                                j0array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j0array[0] < -IKPI )
                                                            {
//                                                                j0array[0]+=IK2PI;
                                                            }
//                                                            j0valid[0] = true;
//                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                                if (false)//if( !j0valid[ij0] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij0[0] = ij0;
//                                                                _ij0[1] = -1;
//                                                                for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                {
                                                                    if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j0valid[iij0]=false;
//                                                                        _ij0[1] = iij0;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j0 = j0array[ij0];
//                                                                cj0 = cj0array[ij0];
//                                                                sj0 = sj0array[ij0];

                                                                {
//                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                    vinfos[0].jointtype = 1;
//                                                                    vinfos[0].foffset = j0;
//                                                                    vinfos[0].indices[0] = _ij0[0];
//                                                                    vinfos[0].indices[1] = _ij0[1];
//                                                                    vinfos[0].maxsolutions = _nj0;
//                                                                    vinfos[1].jointtype = 1;
//                                                                    vinfos[1].foffset = j1;
//                                                                    vinfos[1].indices[0] = _ij1[0];
//                                                                    vinfos[1].indices[1] = _ij1[1];
//                                                                    vinfos[1].maxsolutions = _nj1;
//                                                                    vinfos[2].jointtype = 1;
//                                                                    vinfos[2].foffset = j2;
//                                                                    vinfos[2].indices[0] = _ij2[0];
//                                                                    vinfos[2].indices[1] = _ij2[1];
//                                                                    vinfos[2].maxsolutions = _nj2;
//                                                                    int vfree[0];
//                                                                    solutions.AddSolution(vinfos,vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }

                            }
                        }
                        while(0);
                        if (false)//if( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                if( 1 )
                                {
//                                    bgotonextstatement=false;
//                                    continue; // branch miss [j0, j1, j2]

                                }
                            }
                            while(0);
                            if( bgotonextstatement )
                            {
                            }
                        }
                    }

                }
                else
                {
                    {
                        IkReal j0array[2], cj0array[2], sj0array[2];
                        bool j0valid[2]= {false};
                        _nj0 = 2;
                        CheckValue<IkReal> x136 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
                        if(!x136.valid)
                        {
//                            continue;
                        }
                        IkReal x135=x136.value;
                        j0array[0]=((-1.0)*x135);
                        sj0array[0]=IKsin(j0array[0]);
                        cj0array[0]=IKcos(j0array[0]);
                        j0array[1]=((3.14159265358979)+(((-1.0)*x135)));
                        sj0array[1]=IKsin(j0array[1]);
                        cj0array[1]=IKcos(j0array[1]);
                        if( j0array[0] > IKPI )
                        {
//                            j0array[0]-=IK2PI;
                        }
                        else if( j0array[0] < -IKPI )
                        {
//                            j0array[0]+=IK2PI;
                        }
                        j0valid[0] = true;
                        if( j0array[1] > IKPI )
                        {
                            j0array[1]-=IK2PI;
                        }
                        else if( j0array[1] < -IKPI )
                        {
//                            j0array[1]+=IK2PI;
                        }
                        j0valid[1] = true;
                        for(int ij0 = 0; ij0 < 2; ++ij0)
                        {
                            if( !j0valid[ij0] )
                            {
//                                continue;
                            }
                            _ij0[0] = ij0;
                            _ij0[1] = -1;
                            for(int iij0 = ij0+1; iij0 < 2; ++iij0)
                            {
                                if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                {
//                                    j0valid[iij0]=false;
//                                    _ij0[1] = iij0;
//                                    break;
                                }
                            }
                            j0 = j0array[ij0];
                            cj0 = cj0array[ij0];
                            sj0 = sj0array[ij0];

                            {
                                IkReal j2array[2], cj2array[2], sj2array[2];
                                bool j2valid[2]= {false};
                                _nj2 = 2;
                                cj2array[0]=((-0.458333333333333)+(((4.20875420875421)*(pz*pz)))+(((3.03030303030303)*px*sj0))+(((4.20875420875421)*(py*py)))+(((4.20875420875421)*(px*px)))+(((-3.03030303030303)*cj0*py)));
                                if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
                                {
                                    j2valid[0] = j2valid[1] = true;
                                    j2array[0] = IKacos(cj2array[0]);
                                    sj2array[0] = IKsin(j2array[0]);
                                    cj2array[1] = cj2array[0];
                                    j2array[1] = -j2array[0];
                                    sj2array[1] = -sj2array[0];
                                }
                                else if( isnan(cj2array[0]) )
                                {
                                    // probably any value will work
//                                    j2valid[0] = true;
//                                    cj2array[0] = 1;
//                                    sj2array[0] = 0;
//                                    j2array[0] = 0;
                                }
                                for(int ij2 = 0; ij2 < 2; ++ij2)
                                {
                                    if( !j2valid[ij2] )
                                    {
                                        continue;
                                    }
                                    _ij2[0] = ij2;
                                    _ij2[1] = -1;
                                    for(int iij2 = ij2+1; iij2 < 2; ++iij2)
                                    {
                                        if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j2valid[iij2]=false;
//                                            _ij2[1] = iij2;
//                                            break;
                                        }
                                    }
                                    j2 = j2array[ij2];
                                    cj2 = cj2array[ij2];
                                    sj2 = sj2array[ij2];

                                    {
                                        IkReal j1eval[3];
                                        IkReal x137=(px*sj0);
                                        IkReal x138=((3300.0)*sj2);
                                        IkReal x139=(cj0*py);
                                        IkReal x140=((3300.0)*cj2);
                                        j1eval[0]=((1.00378787878788)+cj2);
                                        j1eval[1]=IKsign(((2385.0)+(((2376.0)*cj2))));
                                        j1eval[2]=((IKabs((((x138*x139))+(((-1.0)*pz*x140))+(((-1.0)*x137*x138))+(((-3600.0)*pz))+(((-1188.0)*sj2)))))+(IKabs(((-1296.0)+(((-3600.0)*x137))+(((-1.0)*x137*x140))+((pz*x138))+(((-1188.0)*cj2))+(((3600.0)*x139))+((x139*x140))))));
                                        if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j1eval[3];
//                                                IkReal x141=(px*sj0);
//                                                IkReal x142=((100.0)*pz);
//                                                IkReal x143=(pz*sj2);
//                                                IkReal x144=(cj0*py);
//                                                IkReal x145=((2.77777777777778)*cj2);
//                                                IkReal x146=((33.0)*cj2);
//                                                j1eval[0]=((1.09090909090909)+(((3.03030303030303)*x141))+cj2+(((-1.0)*x144*x145))+(((-3.03030303030303)*x144))+((x141*x145))+(((2.77777777777778)*x143)));
//                                                j1eval[1]=((IKabs(((-12.96)+((pz*x142))+(((-23.76)*cj2))+(((-10.89)*(cj2*cj2))))))+(IKabs((((x142*x144))+(((-11.88)*sj2))+(((-10.89)*cj2*sj2))+(((-1.0)*x141*x142))+(((-36.0)*pz))))));
//                                                j1eval[2]=IKsign(((12.96)+(((33.0)*x143))+(((11.88)*cj2))+(((36.0)*x141))+(((-36.0)*x144))+(((-1.0)*x144*x146))+((x141*x146))));
                                                if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j1eval[1];
//                                                        IkReal x147=((2.77777777777778)*sj2);
//                                                        j1eval[0]=(sj2+(((-1.0)*cj0*py*x147))+((px*sj0*x147))+(((-2.77777777777778)*cj2*pz))+(((-3.03030303030303)*pz)));
                                                        if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j1]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]= {false};
//                                                                _nj1 = 1;
//                                                                IkReal x148=((11.88)*sj2);
//                                                                IkReal x149=((36.0)*pz);
//                                                                IkReal x150=((100.0)*pz);
//                                                                IkReal x151=(px*sj0);
//                                                                IkReal x152=(cj2*pz);
//                                                                IkReal x153=(cj0*py);
//                                                                IkReal x154=((3300.0)*sj2);
//                                                                IkReal x155=((33.0)*sj2);
//                                                                CheckValue<IkReal> x156=IKPowWithIntegerCheck<IKFAST_REAL>(((((-1.0)*x153*x154))+((x151*x154))+(((-3600.0)*pz))+(((-3300.0)*x152))+(((1188.0)*sj2))),-1);
                                                                if (false)//if(!x156.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x157=IKPowWithIntegerCheck<IKFAST_REAL>(((((-1.0)*x149))+(((-1.0)*x153*x155))+(((-33.0)*x152))+((x151*x155))+x148),-1);
                                                                if (false)//if(!x157.valid)
                                                                {
//                                                                    continue;
                                                                }
                                                                if (false)//if( IKabs(((x156.value)*(((-1089.0)+(((10000.0)*(pz*pz)))+(((1089.0)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x157.value)*(((((-1.0)*x148))+((x150*x151))+(((-1.0)*x150*x153))+(((-10.89)*cj2*sj2))+x149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x156.value)*(((-1089.0)+(((10000.0)*(pz*pz)))+(((1089.0)*(cj2*cj2)))))))+IKsqr(((x157.value)*(((((-1.0)*x148))+((x150*x151))+(((-1.0)*x150*x153))+(((-10.89)*cj2*sj2))+x149))))-1) <= IKFAST_SINCOS_THRESH )
                                                                {
//                                                                    continue;
                                                                }
//                                                                j1array[0]=IKatan2(((x156.value)*(((-1089.0)+(((10000.0)*(pz*pz)))+(((1089.0)*(cj2*cj2)))))), ((x157.value)*(((((-1.0)*x148))+((x150*x151))+(((-1.0)*x150*x153))+(((-10.89)*cj2*sj2))+x149))));
//                                                                sj1array[0]=IKsin(j1array[0]);
//                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if (false)//if( j1array[0] > IKPI )
                                                                {
//                                                                    j1array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j1array[0] < -IKPI )
                                                                {
//                                                                    j1array[0]+=IK2PI;
                                                                }
//                                                                j1valid[0] = true;
//                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                    if (false)//if( !j1valid[ij1] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij1[0] = ij1;
//                                                                    _ij1[1] = -1;
//                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                    {
                                                                        if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j1valid[iij1]=false;
//                                                                            _ij1[1] = iij1;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j1 = j1array[ij1];
//                                                                    cj1 = cj1array[ij1];
//                                                                    sj1 = sj1array[ij1];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x158=IKsin(j1);
//                                                                        IkReal x159=IKcos(j1);
//                                                                        IkReal x160=(cj0*py);
//                                                                        IkReal x161=((1.0)*pz);
//                                                                        IkReal x162=((0.33)*sj2);
//                                                                        IkReal x163=((0.33)*cj2);
//                                                                        IkReal x164=(px*sj0);
//                                                                        IkReal x165=((0.36)*x158);
//                                                                        IkReal x166=((0.36)*x159);
//                                                                        IkReal x167=((0.33)*x159);
//                                                                        IkReal x168=((1.0)*x164);
//                                                                        IkReal x169=((0.72)*x159);
//                                                                        evalcond[0]=((((-1.0)*x158*x163))+(((-1.0)*x165))+(((-1.0)*x161))+((x159*x162)));
//                                                                        evalcond[1]=((-0.36)+(((-1.0)*x158*x162))+(((-1.0)*x168))+(((-1.0)*x166))+(((-1.0)*x159*x163))+x160);
//                                                                        evalcond[2]=((((-1.0)*x158*x168))+(((-1.0)*x162))+(((-1.0)*x165))+((x158*x160))+((pz*x159)));
//                                                                        evalcond[3]=((-0.36)+(((-1.0)*x158*x161))+(((-1.0)*x166))+(((-1.0)*x163))+(((-1.0)*x159*x168))+((x159*x160)));
//                                                                        evalcond[4]=((-0.1503)+(((-0.2592)*x159))+(((-1.0)*(px*px)))+(((-0.72)*pz*x158))+(((-0.72)*x164))+(((-1.0)*pz*x161))+(((0.72)*x160))+(((-1.0)*(py*py)))+((x160*x169))+(((-1.0)*x164*x169)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j0;
//                                                                        vinfos[0].indices[0] = _ij0[0];
//                                                                        vinfos[0].indices[1] = _ij0[1];
//                                                                        vinfos[0].maxsolutions = _nj0;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j1;
//                                                                        vinfos[1].indices[0] = _ij1[0];
//                                                                        vinfos[1].indices[1] = _ij1[1];
//                                                                        vinfos[1].maxsolutions = _nj1;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j2;
//                                                                        vinfos[2].indices[0] = _ij2[0];
//                                                                        vinfos[2].indices[1] = _ij2[1];
//                                                                        vinfos[2].maxsolutions = _nj2;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j1array[1], cj1array[1], sj1array[1];
                                                        bool j1valid[1]= {false};
//                                                        _nj1 = 1;
//                                                        IkReal x170=(px*sj0);
//                                                        IkReal x171=((100.0)*pz);
//                                                        IkReal x172=(cj0*py);
//                                                        IkReal x173=((33.0)*cj2);
//                                                        CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(((((-11.88)*sj2))+(((-10.89)*cj2*sj2))+(((-1.0)*x170*x171))+((x171*x172))+(((-36.0)*pz)))),IkReal(((-12.96)+((pz*x171))+(((-23.76)*cj2))+(((-10.89)*(cj2*cj2))))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x174.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x175=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((12.96)+(((11.88)*cj2))+(((-36.0)*x172))+(((36.0)*x170))+((x170*x173))+(((-1.0)*x172*x173))+(((33.0)*pz*sj2)))),-1);
                                                        if (false)//if(!x175.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j1array[0]=((-1.5707963267949)+(x174.value)+(((1.5707963267949)*(x175.value))));
//                                                        sj1array[0]=IKsin(j1array[0]);
//                                                        cj1array[0]=IKcos(j1array[0]);
                                                        if (false)//if( j1array[0] > IKPI )
                                                        {
//                                                            j1array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j1array[0] < -IKPI )
                                                        {
//                                                            j1array[0]+=IK2PI;
                                                        }
//                                                        j1valid[0] = true;
//                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                        {
                                                            if (false)//if( !j1valid[ij1] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij1[0] = ij1;
//                                                            _ij1[1] = -1;
//                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                            {
                                                                if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j1valid[iij1]=false;
//                                                                    _ij1[1] = iij1;
//                                                                    break;
                                                                }
                                                            }
//                                                            j1 = j1array[ij1];
//                                                            cj1 = cj1array[ij1];
//                                                            sj1 = sj1array[ij1];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x176=IKsin(j1);
//                                                                IkReal x177=IKcos(j1);
//                                                                IkReal x178=(cj0*py);
//                                                                IkReal x179=((1.0)*pz);
//                                                                IkReal x180=((0.33)*sj2);
//                                                                IkReal x181=((0.33)*cj2);
//                                                                IkReal x182=(px*sj0);
//                                                                IkReal x183=((0.36)*x176);
//                                                                IkReal x184=((0.36)*x177);
//                                                                IkReal x185=((0.33)*x177);
//                                                                IkReal x186=((1.0)*x182);
//                                                                IkReal x187=((0.72)*x177);
//                                                                evalcond[0]=(((x177*x180))+(((-1.0)*x179))+(((-1.0)*x183))+(((-1.0)*x176*x181)));
//                                                                evalcond[1]=((-0.36)+(((-1.0)*x186))+(((-1.0)*x184))+x178+(((-1.0)*x176*x180))+(((-1.0)*x177*x181)));
//                                                                evalcond[2]=(((pz*x177))+((x176*x178))+(((-1.0)*x180))+(((-1.0)*x183))+(((-1.0)*x176*x186)));
//                                                                evalcond[3]=((-0.36)+(((-1.0)*x184))+(((-1.0)*x181))+(((-1.0)*x177*x186))+(((-1.0)*x176*x179))+((x177*x178)));
//                                                                evalcond[4]=((-0.1503)+(((-1.0)*(px*px)))+((x178*x187))+(((-0.72)*pz*x176))+(((-0.72)*x182))+(((-1.0)*pz*x179))+(((0.72)*x178))+(((-0.2592)*x177))+(((-1.0)*(py*py)))+(((-1.0)*x182*x187)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j0;
//                                                                vinfos[0].indices[0] = _ij0[0];
//                                                                vinfos[0].indices[1] = _ij0[1];
//                                                                vinfos[0].maxsolutions = _nj0;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j1;
//                                                                vinfos[1].indices[0] = _ij1[0];
//                                                                vinfos[1].indices[1] = _ij1[1];
//                                                                vinfos[1].maxsolutions = _nj1;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j2;
//                                                                vinfos[2].indices[0] = _ij2[0];
//                                                                vinfos[2].indices[1] = _ij2[1];
//                                                                vinfos[2].maxsolutions = _nj2;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                bool j1valid[1]= {false};
                                                _nj1 = 1;
                                                IkReal x188=(px*sj0);
                                                IkReal x189=((3300.0)*sj2);
                                                IkReal x190=(cj0*py);
                                                IkReal x191=((3300.0)*cj2);
                                                CheckValue<IkReal> x192 = IKatan2WithCheck(IkReal(((((-1.0)*x188*x189))+(((-1.0)*pz*x191))+((x189*x190))+(((-3600.0)*pz))+(((-1188.0)*sj2)))),IkReal(((-1296.0)+((pz*x189))+(((-1.0)*x188*x191))+(((3600.0)*x190))+(((-1188.0)*cj2))+((x190*x191))+(((-3600.0)*x188)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x192.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x193=IKPowWithIntegerCheck<IKFAST_REAL>(IKsign(((2385.0)+(((2376.0)*cj2)))),-1);
                                                if(!x193.valid)
                                                {
//                                                    continue;
                                                }
                                                j1array[0]=((-1.5707963267949)+(x192.value)+(((1.5707963267949)*(x193.value))));
                                                sj1array[0]=IKsin(j1array[0]);
                                                cj1array[0]=IKcos(j1array[0]);
                                                if( j1array[0] > IKPI )
                                                {
//                                                    j1array[0]-=IK2PI;
                                                }
                                                else if( j1array[0] < -IKPI )
                                                {
//                                                    j1array[0]+=IK2PI;
                                                }
                                                j1valid[0] = true;
                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                {
                                                    if( !j1valid[ij1] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij1[0] = ij1;
                                                    _ij1[1] = -1;
                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                    {
                                                        if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j1valid[iij1]=false;
//                                                            _ij1[1] = iij1;
//                                                            break;
                                                        }
                                                    }
                                                    j1 = j1array[ij1];
                                                    cj1 = cj1array[ij1];
                                                    sj1 = sj1array[ij1];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x194=IKsin(j1);
                                                        IkReal x195=IKcos(j1);
                                                        IkReal x196=(cj0*py);
                                                        IkReal x197=((1.0)*pz);
                                                        IkReal x198=((0.33)*sj2);
                                                        IkReal x199=((0.33)*cj2);
                                                        IkReal x200=(px*sj0);
                                                        IkReal x201=((0.36)*x194);
                                                        IkReal x202=((0.36)*x195);
                                                        IkReal x203=((0.33)*x195);
                                                        IkReal x204=((1.0)*x200);
                                                        IkReal x205=((0.72)*x195);
                                                        evalcond[0]=((((-1.0)*x194*x199))+(((-1.0)*x197))+(((-1.0)*x201))+((x195*x198)));
                                                        evalcond[1]=((-0.36)+(((-1.0)*x194*x198))+(((-1.0)*x195*x199))+x196+(((-1.0)*x202))+(((-1.0)*x204)));
                                                        evalcond[2]=((((-1.0)*x194*x204))+(((-1.0)*x198))+(((-1.0)*x201))+((x194*x196))+((pz*x195)));
                                                        evalcond[3]=((-0.36)+(((-1.0)*x195*x204))+(((-1.0)*x194*x197))+(((-1.0)*x199))+(((-1.0)*x202))+((x195*x196)));
                                                        evalcond[4]=((-0.1503)+(((-1.0)*x200*x205))+(((-1.0)*(px*px)))+(((-1.0)*pz*x197))+((x196*x205))+(((-0.72)*pz*x194))+(((-0.72)*x200))+(((0.72)*x196))+(((-0.2592)*x195))+(((-1.0)*(py*py))));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Hunker (f7071dcf5459c249fade087ece139e54)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
