#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_left_foot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-08 01:12:25.568008
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if( f >= 1 )
    {
//        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
//        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKsin(j[0]);
    x1=IKsin(j[1]);
    x2=IKcos(j[2]);
    x3=IKcos(j[1]);
    x4=IKsin(j[2]);
    x5=IKcos(j[0]);
    x6=((0.76)*x4);
    x7=(x1*x5);
    x8=(x0*x1);
    x9=((0.76)*x2*x3);
    eetrans[0]=((0.3125)+(((-1.0)*x6*x8))+(((0.66)*x8))+(((-1.0)*x0*x9))+(((-0.14)*x5)));
    eetrans[1]=((0.74)+(((0.66)*x3))+(((0.76)*x1*x2))+(((-1.0)*x3*x6)));
    eetrans[2]=((-0.06)+(((-1.0)*x6*x7))+(((0.66)*x7))+(((0.14)*x0))+(((-1.0)*x5*x9)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j3=numeric_limits<IkReal>::quiet_NaN();
        _ij3[0] = -1;
        _ij3[1] = -1;
        _nj3 = -1;
        j4=numeric_limits<IkReal>::quiet_NaN();
        _ij4[0] = -1;
        _ij4[1] = -1;
        _nj4 = -1;
        j5=numeric_limits<IkReal>::quiet_NaN();
        _ij5[0] = -1;
        _ij5[1] = -1;
        _nj5 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((-0.3125)+px);
            new_py=((-0.06)+(((-1.0)*pz)));
            new_pz=((-0.74)+py);
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j5array[2], cj5array[2], sj5array[2];
                bool j5valid[2]= {false};
                _nj5 = 2;
                sj5array[0]=((1.02950558213716)+(((-0.996810207336523)*(py*py)))+(((-0.996810207336523)*(pz*pz)))+(((-0.996810207336523)*(px*px))));
                if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
                {
                    j5valid[0] = j5valid[1] = true;
                    j5array[0] = IKasin(sj5array[0]);
                    cj5array[0] = IKcos(j5array[0]);
                    sj5array[1] = sj5array[0];
                    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
                    cj5array[1] = -cj5array[0];
                }
                else if( isnan(sj5array[0]) )
                {
                    // probably any value will work
//                    j5valid[0] = true;
//                    cj5array[0] = 1;
//                    sj5array[0] = 0;
//                    j5array[0] = 0;
                }
                for(int ij5 = 0; ij5 < 2; ++ij5)
                {
                    if( !j5valid[ij5] )
                    {
                        continue;
                    }
                    _ij5[0] = ij5;
                    _ij5[1] = -1;
                    for(int iij5 = ij5+1; iij5 < 2; ++iij5)
                    {
                        if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
                        {
//                            j5valid[iij5]=false;
//                            _ij5[1] = iij5;
//                            break;
                        }
                    }
                    j5 = j5array[ij5];
                    cj5 = cj5array[ij5];
                    sj5 = sj5array[ij5];

                    {
                        IkReal j3eval[2];
                        j3eval[0]=((px*px)+(py*py));
                        j3eval[1]=((IKabs(px))+(IKabs(py)));
                        if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
                        {
                            {
                                IkReal j4eval[2];
//                                j4eval[0]=((1.0)+(((1.32598714416896)*(sj5*sj5)))+(((-2.3030303030303)*sj5))+(((1.32598714416896)*(cj5*cj5))));
//                                j4eval[1]=((IKabs(cj5))+(((1.31578947368421)*(IKabs(((0.66)+(((-0.76)*sj5))))))));
                                if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
                                {
//                                    continue; // 0 cases reached

                                }
                                else
                                {
                                    {
                                        IkReal j4array[2], cj4array[2], sj4array[2];
//                                        bool j4valid[2]= {false};
//                                        _nj4 = 2;
//                                        IkReal x10=((0.66)+(((-0.76)*sj5)));
//                                        CheckValue<IkReal> x13 = IKatan2WithCheck(IkReal(x10),IkReal(((0.76)*cj5)),IKFAST_ATAN2_MAGTHRESH);
                                        if (false)//if(!x13.valid)
                                        {
//                                            continue;
                                        }
//                                        IkReal x11=((1.0)*(x13.value));
                                        if (false)//if((((((0.5776)*(cj5*cj5)))+(x10*x10))) < -0.00001)
                                        {
//                                            continue;
                                        }
//                                        CheckValue<IkReal> x14=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((((0.5776)*(cj5*cj5)))+(x10*x10)))),-1);
                                        if (false)//if(!x14.valid)
                                        {
//                                            continue;
                                        }
                                        if (false)//if( ((pz*(x14.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x14.value))) > 1+IKFAST_SINCOS_THRESH )
                                        {
//                                            continue;
                                        }
//                                        IkReal x12=IKasin((pz*(x14.value)));
//                                        j4array[0]=((((-1.0)*x11))+x12);
//                                        sj4array[0]=IKsin(j4array[0]);
//                                        cj4array[0]=IKcos(j4array[0]);
//                                        j4array[1]=((3.14159265358979)+(((-1.0)*x11))+(((-1.0)*x12)));
//                                        sj4array[1]=IKsin(j4array[1]);
//                                        cj4array[1]=IKcos(j4array[1]);
                                        if (false)//if( j4array[0] > IKPI )
                                        {
//                                            j4array[0]-=IK2PI;
                                        }
                                        else if (false)//else if( j4array[0] < -IKPI )
                                        {
//                                            j4array[0]+=IK2PI;
                                        }
//                                        j4valid[0] = true;
                                        if (false)//if( j4array[1] > IKPI )
                                        {
//                                            j4array[1]-=IK2PI;
                                        }
                                        else if (false)//else if( j4array[1] < -IKPI )
                                        {
//                                            j4array[1]+=IK2PI;
                                        }
//                                        j4valid[1] = true;
//                                        for(int ij4 = 0; ij4 < 2; ++ij4)
                                        {
                                            if (false)//if( !j4valid[ij4] )
                                            {
//                                                continue;
                                            }
//                                            _ij4[0] = ij4;
//                                            _ij4[1] = -1;
//                                            for(int iij4 = ij4+1; iij4 < 2; ++iij4)
                                            {
                                                if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                {
//                                                    j4valid[iij4]=false;
//                                                    _ij4[1] = iij4;
//                                                    break;
                                                }
                                            }
//                                            j4 = j4array[ij4];
//                                            cj4 = cj4array[ij4];
//                                            sj4 = sj4array[ij4];

                                            {
                                                IkReal j3eval[3];
//                                                IkReal x15=py*py;
//                                                IkReal x16=px*px;
//                                                IkReal x17=((7.0)*cj4);
//                                                IkReal x18=((50.0)*cj4);
//                                                IkReal x19=((38.0)*cj5);
//                                                IkReal x20=((50.0)*pz*sj4);
//                                                j3eval[0]=(((cj4*x16))+((cj4*x15)));
//                                                j3eval[1]=IKsign((((x16*x18))+((x15*x18))));
//                                                j3eval[2]=((IKabs((((px*x20))+(((-1.0)*py*x17))+(((-1.0)*px*x19)))))+(IKabs((((py*x19))+(((-1.0)*py*x20))+(((-1.0)*px*x17))))));
                                                if (false)//if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j3eval[3];
//                                                        IkReal x21=px*px;
//                                                        IkReal x22=py*py;
//                                                        IkReal x23=((50.0)*sj4);
//                                                        IkReal x24=((38.0)*sj5);
//                                                        IkReal x25=((7.0)*sj4);
//                                                        IkReal x26=((50.0)*cj4*pz);
//                                                        j3eval[0]=(((sj4*x22))+((sj4*x21)));
//                                                        j3eval[1]=((IKabs((((py*x26))+((py*x24))+(((-33.0)*py))+(((-1.0)*px*x25)))))+(IKabs(((((-1.0)*py*x25))+(((33.0)*px))+(((-1.0)*px*x26))+(((-1.0)*px*x24))))));
//                                                        j3eval[2]=IKsign((((x22*x23))+((x21*x23))));
                                                        if (false)//if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
                                                        {
                                                            {
                                                                IkReal j3eval[3];
//                                                                IkReal x27=py*py;
//                                                                IkReal x28=px*px;
//                                                                IkReal x29=(py*sj4);
//                                                                IkReal x30=((38.0)*px);
//                                                                IkReal x31=(cj4*cj5);
//                                                                j3eval[0]=(x27+x28);
//                                                                j3eval[1]=((IKabs(((((-1.0)*x30*x31))+(((-7.0)*py))+(((33.0)*px*sj4))+(((-1.0)*sj4*sj5*x30)))))+(IKabs(((((-33.0)*x29))+(((38.0)*sj5*x29))+(((-7.0)*px))+(((38.0)*py*x31))))));
//                                                                j3eval[2]=IKsign(((((50.0)*x28))+(((50.0)*x27))));
                                                                if (false)//if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
                                                                {
//                                                                    continue; // 0 cases reached

                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j3array[1], cj3array[1], sj3array[1];
//                                                                        bool j3valid[1]= {false};
//                                                                        _nj3 = 1;
//                                                                        IkReal x32=(py*sj4);
//                                                                        IkReal x33=((38.0)*px);
//                                                                        IkReal x34=(cj4*cj5);
//                                                                        CheckValue<IkReal> x35=IKPowWithIntegerCheck<IkReal>(IKsign(((((50.0)*(py*py)))+(((50.0)*(px*px))))),-1);
                                                                        if (false)//if(!x35.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x36 = IKatan2WithCheck(IkReal(((((-7.0)*py))+(((-1.0)*x33*x34))+(((33.0)*px*sj4))+(((-1.0)*sj4*sj5*x33)))),IkReal(((((-33.0)*x32))+(((-7.0)*px))+(((38.0)*sj5*x32))+(((38.0)*py*x34)))),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x36.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x35.value)))+(x36.value));
//                                                                        sj3array[0]=IKsin(j3array[0]);
//                                                                        cj3array[0]=IKcos(j3array[0]);
                                                                        if (false)//if( j3array[0] > IKPI )
                                                                        {
//                                                                            j3array[0]-=IK2PI;
                                                                        }
                                                                        else if (false)//else if( j3array[0] < -IKPI )
                                                                        {
//                                                                            j3array[0]+=IK2PI;
                                                                        }
//                                                                        j3valid[0] = true;
//                                                                        for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                        {
                                                                            if (false)//if( !j3valid[ij3] )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            _ij3[0] = ij3;
//                                                                            _ij3[1] = -1;
//                                                                            for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                            {
                                                                                if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                                {
//                                                                                    j3valid[iij3]=false;
//                                                                                    _ij3[1] = iij3;
//                                                                                    break;
                                                                                }
                                                                            }
//                                                                            j3 = j3array[ij3];
//                                                                            cj3 = cj3array[ij3];
//                                                                            sj3 = sj3array[ij3];
                                                                            {
                                                                                IkReal evalcond[5];
//                                                                                IkReal x37=IKsin(j3);
//                                                                                IkReal x38=IKcos(j3);
//                                                                                IkReal x39=((1.0)*sj4);
//                                                                                IkReal x40=((1.32)*sj4);
//                                                                                IkReal x41=((0.76)*sj5);
//                                                                                IkReal x42=((0.76)*cj5);
//                                                                                IkReal x43=(cj4*pz);
//                                                                                IkReal x44=(py*x38);
//                                                                                IkReal x45=(px*x37);
//                                                                                evalcond[0]=((0.14)+((py*x37))+((px*x38)));
//                                                                                evalcond[1]=((((-1.0)*pz*x39))+(((-1.0)*cj4*x44))+x42+((cj4*x45)));
//                                                                                evalcond[2]=((0.66)+(((-1.0)*x43))+((sj4*x44))+(((-1.0)*x41))+(((-1.0)*x39*x45)));
//                                                                                evalcond[3]=((((-1.0)*x45))+(((0.66)*sj4))+x44+(((-1.0)*sj4*x41))+(((-1.0)*cj4*x42)));
//                                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((1.32)*x43))+((x40*x45))+(((-1.0)*x40*x44))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
//                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                vinfos[0].jointtype = 1;
//                                                                                vinfos[0].foffset = j3;
//                                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                                vinfos[0].maxsolutions = _nj3;
//                                                                                vinfos[1].jointtype = 1;
//                                                                                vinfos[1].foffset = j4;
//                                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                                vinfos[1].maxsolutions = _nj4;
//                                                                                vinfos[2].jointtype = 1;
//                                                                                vinfos[2].foffset = j5;
//                                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                                vinfos[2].maxsolutions = _nj5;
//                                                                                int vfree[0];
//                                                                                solutions.AddSolution(vinfos,vfree);
                                                                            }
                                                                        }
                                                                    }

                                                                }

                                                            }

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j3array[1], cj3array[1], sj3array[1];
//                                                                bool j3valid[1]= {false};
//                                                                _nj3 = 1;
//                                                                IkReal x46=((50.0)*sj4);
//                                                                IkReal x47=((38.0)*sj5);
//                                                                IkReal x48=((7.0)*sj4);
//                                                                IkReal x49=((50.0)*cj4*pz);
//                                                                CheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(((((-1.0)*py*x48))+(((33.0)*px))+(((-1.0)*px*x49))+(((-1.0)*px*x47)))),IkReal((((py*x49))+((py*x47))+(((-33.0)*py))+(((-1.0)*px*x48)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x50.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x51=IKPowWithIntegerCheck<IkReal>(IKsign((((x46*(px*px)))+((x46*(py*py))))),-1);
                                                                if (false)//if(!x51.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j3array[0]=((-1.5707963267949)+(x50.value)+(((1.5707963267949)*(x51.value))));
//                                                                sj3array[0]=IKsin(j3array[0]);
//                                                                cj3array[0]=IKcos(j3array[0]);
                                                                if (false)//if( j3array[0] > IKPI )
                                                                {
//                                                                    j3array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j3array[0] < -IKPI )
                                                                {
//                                                                    j3array[0]+=IK2PI;
                                                                }
//                                                                j3valid[0] = true;
//                                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                {
                                                                    if (false)//if( !j3valid[ij3] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij3[0] = ij3;
//                                                                    _ij3[1] = -1;
//                                                                    for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                                    {
                                                                        if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j3valid[iij3]=false;
//                                                                            _ij3[1] = iij3;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j3 = j3array[ij3];
//                                                                    cj3 = cj3array[ij3];
//                                                                    sj3 = sj3array[ij3];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x52=IKsin(j3);
//                                                                        IkReal x53=IKcos(j3);
//                                                                        IkReal x54=((1.0)*sj4);
//                                                                        IkReal x55=((1.32)*sj4);
//                                                                        IkReal x56=((0.76)*sj5);
//                                                                        IkReal x57=((0.76)*cj5);
//                                                                        IkReal x58=(cj4*pz);
//                                                                        IkReal x59=(py*x53);
//                                                                        IkReal x60=(px*x52);
//                                                                        evalcond[0]=((0.14)+((px*x53))+((py*x52)));
//                                                                        evalcond[1]=(((cj4*x60))+x57+(((-1.0)*pz*x54))+(((-1.0)*cj4*x59)));
//                                                                        evalcond[2]=((0.66)+(((-1.0)*x54*x60))+((sj4*x59))+(((-1.0)*x56))+(((-1.0)*x58)));
//                                                                        evalcond[3]=((((-1.0)*cj4*x57))+(((-1.0)*sj4*x56))+(((0.66)*sj4))+x59+(((-1.0)*x60)));
//                                                                        evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((1.32)*x58))+(((-1.0)*x55*x59))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+((x55*x60)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j3;
//                                                                        vinfos[0].indices[0] = _ij3[0];
//                                                                        vinfos[0].indices[1] = _ij3[1];
//                                                                        vinfos[0].maxsolutions = _nj3;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j4;
//                                                                        vinfos[1].indices[0] = _ij4[0];
//                                                                        vinfos[1].indices[1] = _ij4[1];
//                                                                        vinfos[1].maxsolutions = _nj4;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j5;
//                                                                        vinfos[2].indices[0] = _ij5[0];
//                                                                        vinfos[2].indices[1] = _ij5[1];
//                                                                        vinfos[2].maxsolutions = _nj5;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j3array[1], cj3array[1], sj3array[1];
//                                                        bool j3valid[1]= {false};
//                                                        _nj3 = 1;
//                                                        IkReal x61=((7.0)*cj4);
//                                                        IkReal x62=((50.0)*cj4);
//                                                        IkReal x63=((38.0)*cj5);
//                                                        IkReal x64=((50.0)*pz*sj4);
//                                                        CheckValue<IkReal> x65 = IKatan2WithCheck(IkReal(((((-1.0)*px*x63))+((px*x64))+(((-1.0)*py*x61)))),IkReal(((((-1.0)*px*x61))+(((-1.0)*py*x64))+((py*x63)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x65.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x66=IKPowWithIntegerCheck<IkReal>(IKsign((((x62*(px*px)))+((x62*(py*py))))),-1);
                                                        if (false)//if(!x66.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j3array[0]=((-1.5707963267949)+(x65.value)+(((1.5707963267949)*(x66.value))));
//                                                        sj3array[0]=IKsin(j3array[0]);
//                                                        cj3array[0]=IKcos(j3array[0]);
                                                        if (false)//if( j3array[0] > IKPI )
                                                        {
//                                                            j3array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j3array[0] < -IKPI )
                                                        {
//                                                            j3array[0]+=IK2PI;
                                                        }
//                                                        j3valid[0] = true;
//                                                        for(int ij3 = 0; ij3 < 1; ++ij3)
                                                        {
                                                            if (false)//if( !j3valid[ij3] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij3[0] = ij3;
//                                                            _ij3[1] = -1;
//                                                            for(int iij3 = ij3+1; iij3 < 1; ++iij3)
                                                            {
                                                                if (false)//if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j3valid[iij3]=false;
//                                                                    _ij3[1] = iij3;
//                                                                    break;
                                                                }
                                                            }
//                                                            j3 = j3array[ij3];
//                                                            cj3 = cj3array[ij3];
//                                                            sj3 = sj3array[ij3];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x67=IKsin(j3);
//                                                                IkReal x68=IKcos(j3);
//                                                                IkReal x69=((1.0)*sj4);
//                                                                IkReal x70=((1.32)*sj4);
//                                                                IkReal x71=((0.76)*sj5);
//                                                                IkReal x72=((0.76)*cj5);
//                                                                IkReal x73=(cj4*pz);
//                                                                IkReal x74=(py*x68);
//                                                                IkReal x75=(px*x67);
//                                                                evalcond[0]=((0.14)+((px*x68))+((py*x67)));
//                                                                evalcond[1]=(((cj4*x75))+x72+(((-1.0)*pz*x69))+(((-1.0)*cj4*x74)));
//                                                                evalcond[2]=((0.66)+(((-1.0)*x71))+(((-1.0)*x73))+(((-1.0)*x69*x75))+((sj4*x74)));
//                                                                evalcond[3]=((((-1.0)*cj4*x72))+(((0.66)*sj4))+x74+(((-1.0)*x75))+(((-1.0)*sj4*x71)));
//                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((1.32)*x73))+(((-1.0)*x70*x74))+(((-1.0)*(pz*pz)))+((x70*x75))+(((-1.0)*(py*py))));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j3;
//                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                vinfos[0].maxsolutions = _nj3;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j4;
//                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                vinfos[1].maxsolutions = _nj4;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j5;
//                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                vinfos[2].maxsolutions = _nj5;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                        }
                                    }

                                }

                            }

                        }
                        else
                        {
                            {
                                IkReal j3array[2], cj3array[2], sj3array[2];
                                bool j3valid[2]= {false};
                                _nj3 = 2;
                                CheckValue<IkReal> x78 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
                                if(!x78.valid)
                                {
//                                    continue;
                                }
                                IkReal x76=((1.0)*(x78.value));
                                if((((px*px)+(py*py))) < -0.00001)
                                {
//                                    continue;
                                }
                                CheckValue<IkReal> x79=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
                                if(!x79.valid)
                                {
//                                    continue;
                                }
                                if( (((0.14)*(x79.value))) < -1-IKFAST_SINCOS_THRESH || (((0.14)*(x79.value))) > 1+IKFAST_SINCOS_THRESH )
                                {
//                                    continue;
                                }
                                IkReal x77=IKasin(((0.14)*(x79.value)));
                                j3array[0]=((((-1.0)*x76))+(((-1.0)*x77)));
                                sj3array[0]=IKsin(j3array[0]);
                                cj3array[0]=IKcos(j3array[0]);
                                j3array[1]=((3.14159265358979)+(((-1.0)*x76))+x77);
                                sj3array[1]=IKsin(j3array[1]);
                                cj3array[1]=IKcos(j3array[1]);
                                if( j3array[0] > IKPI )
                                {
//                                    j3array[0]-=IK2PI;
                                }
                                else if( j3array[0] < -IKPI )
                                {
//                                    j3array[0]+=IK2PI;
                                }
                                j3valid[0] = true;
                                if( j3array[1] > IKPI )
                                {
                                    j3array[1]-=IK2PI;
                                }
                                else if( j3array[1] < -IKPI )
                                {
//                                    j3array[1]+=IK2PI;
                                }
                                j3valid[1] = true;
                                for(int ij3 = 0; ij3 < 2; ++ij3)
                                {
                                    if( !j3valid[ij3] )
                                    {
//                                        continue;
                                    }
                                    _ij3[0] = ij3;
                                    _ij3[1] = -1;
                                    for(int iij3 = ij3+1; iij3 < 2; ++iij3)
                                    {
                                        if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j3valid[iij3]=false;
//                                            _ij3[1] = iij3;
//                                            break;
                                        }
                                    }
                                    j3 = j3array[ij3];
                                    cj3 = cj3array[ij3];
                                    sj3 = sj3array[ij3];

                                    {
                                        IkReal j4eval[3];
                                        IkReal x80=((475.0)*pz);
                                        IkReal x81=((475.0)*px*sj3);
                                        IkReal x82=((475.0)*cj3*py);
                                        j4eval[0]=((1.00996810207337)+(((-1.0)*sj5)));
                                        j4eval[1]=((IKabs(((((412.5)*pz))+(((-1.0)*cj5*x81))+((cj5*x82))+(((-1.0)*sj5*x80)))))+(IKabs(((((412.5)*px*sj3))+(((-412.5)*cj3*py))+((cj5*x80))+((sj5*x82))+(((-1.0)*sj5*x81))))));
                                        j4eval[2]=IKsign(((633.25)+(((-627.0)*sj5))));
                                        if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j4eval[3];
//                                                IkReal x83=(cj3*py);
//                                                IkReal x84=((25.0)*pz);
//                                                IkReal x85=(cj5*pz);
//                                                IkReal x86=(px*sj3);
//                                                IkReal x87=((19.0)*sj5);
//                                                IkReal x88=((1.15151515151515)*sj5);
//                                                j4eval[0]=((((-1.0)*x83*x88))+(((1.15151515151515)*x85))+((x86*x88))+x83+(((-1.0)*x86)));
//                                                j4eval[1]=((IKabs(((-25.33)+(((25.08)*sj5))+((pz*x84))+(((14.44)*(cj5*cj5))))))+(IKabs(((((-14.44)*cj5*sj5))+(((12.54)*cj5))+(((-1.0)*x84*x86))+((x83*x84))))));
//                                                j4eval[2]=IKsign(((((-1.0)*x83*x87))+((x86*x87))+(((19.0)*x85))+(((-16.5)*x86))+(((16.5)*x83))));
                                                if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j4eval[3];
//                                                        IkReal x89=cj3*cj3;
//                                                        IkReal x90=px*px;
//                                                        IkReal x91=pz*pz;
//                                                        IkReal x92=py*py;
//                                                        IkReal x93=((19.0)*cj5);
//                                                        IkReal x94=(cj3*py);
//                                                        IkReal x95=(px*sj3);
//                                                        IkReal x96=((19.0)*sj5);
//                                                        IkReal x97=((25.0)*x89);
//                                                        j4eval[0]=(((x89*x92))+(((-1.0)*x89*x90))+x91+x90+(((-2.0)*x94*x95)));
//                                                        j4eval[1]=((IKabs(((((-1.0)*x95*x96))+(((16.5)*x95))+((pz*x93))+(((-16.5)*x94))+((x94*x96)))))+(IKabs(((((16.5)*pz))+(((-1.0)*pz*x96))+((x93*x94))+(((-1.0)*x93*x95))))));
//                                                        j4eval[2]=IKsign((((x92*x97))+(((25.0)*x91))+(((25.0)*x90))+(((-1.0)*x90*x97))+(((-50.0)*x94*x95))));
                                                        if (false)//if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // 0 cases reached

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j4array[1], cj4array[1], sj4array[1];
//                                                                bool j4valid[1]= {false};
//                                                                _nj4 = 1;
//                                                                IkReal x98=cj3*cj3;
//                                                                IkReal x99=px*px;
//                                                                IkReal x100=((19.0)*cj5);
//                                                                IkReal x101=(cj3*py);
//                                                                IkReal x102=(px*sj3);
//                                                                IkReal x103=((19.0)*sj5);
//                                                                IkReal x104=((25.0)*x98);
//                                                                CheckValue<IkReal> x105=IKPowWithIntegerCheck<IkReal>(IKsign(((((25.0)*(pz*pz)))+(((25.0)*x99))+(((-50.0)*x101*x102))+(((-1.0)*x104*x99))+((x104*(py*py))))),-1);
                                                                if (false)//if(!x105.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x106 = IKatan2WithCheck(IkReal(((((16.5)*x102))+((pz*x100))+(((-1.0)*x102*x103))+(((-16.5)*x101))+((x101*x103)))),IkReal(((((16.5)*pz))+(((-1.0)*pz*x103))+(((-1.0)*x100*x102))+((x100*x101)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x106.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x105.value)))+(x106.value));
//                                                                sj4array[0]=IKsin(j4array[0]);
//                                                                cj4array[0]=IKcos(j4array[0]);
                                                                if (false)//if( j4array[0] > IKPI )
                                                                {
//                                                                    j4array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j4array[0] < -IKPI )
                                                                {
//                                                                    j4array[0]+=IK2PI;
                                                                }
//                                                                j4valid[0] = true;
//                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                {
                                                                    if (false)//if( !j4valid[ij4] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij4[0] = ij4;
//                                                                    _ij4[1] = -1;
//                                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                                    {
                                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j4valid[iij4]=false;
//                                                                            _ij4[1] = iij4;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j4 = j4array[ij4];
//                                                                    cj4 = cj4array[ij4];
//                                                                    sj4 = sj4array[ij4];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x107=IKcos(j4);
//                                                                        IkReal x108=IKsin(j4);
//                                                                        IkReal x109=((1.0)*pz);
//                                                                        IkReal x110=((0.76)*sj5);
//                                                                        IkReal x111=(cj3*py);
//                                                                        IkReal x112=((0.76)*cj5);
//                                                                        IkReal x113=(px*sj3);
//                                                                        IkReal x114=((1.32)*x108);
//                                                                        evalcond[0]=((((-1.0)*x107*x110))+(((0.66)*x107))+(((-1.0)*x109))+((x108*x112)));
//                                                                        evalcond[1]=(x112+(((-1.0)*x108*x109))+(((-1.0)*x107*x111))+((x107*x113)));
//                                                                        evalcond[2]=((0.66)+(((-1.0)*x108*x113))+(((-1.0)*x107*x109))+(((-1.0)*x110))+((x108*x111)));
//                                                                        evalcond[3]=((((-1.0)*x107*x112))+(((0.66)*x108))+x111+(((-1.0)*x108*x110))+(((-1.0)*x113)));
//                                                                        evalcond[4]=((0.1616)+(((-1.0)*pz*x109))+(((-1.0)*x111*x114))+(((-1.0)*(px*px)))+((x113*x114))+(((-1.0)*(py*py)))+(((1.32)*pz*x107)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j3;
//                                                                        vinfos[0].indices[0] = _ij3[0];
//                                                                        vinfos[0].indices[1] = _ij3[1];
//                                                                        vinfos[0].maxsolutions = _nj3;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j4;
//                                                                        vinfos[1].indices[0] = _ij4[0];
//                                                                        vinfos[1].indices[1] = _ij4[1];
//                                                                        vinfos[1].maxsolutions = _nj4;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j5;
//                                                                        vinfos[2].indices[0] = _ij5[0];
//                                                                        vinfos[2].indices[1] = _ij5[1];
//                                                                        vinfos[2].maxsolutions = _nj5;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j4array[1], cj4array[1], sj4array[1];
//                                                        bool j4valid[1]= {false};
//                                                        _nj4 = 1;
//                                                        IkReal x115=(cj3*py);
//                                                        IkReal x116=((25.0)*pz);
//                                                        IkReal x117=(px*sj3);
//                                                        IkReal x118=((19.0)*sj5);
//                                                        CheckValue<IkReal> x119 = IKatan2WithCheck(IkReal(((-25.33)+((pz*x116))+(((25.08)*sj5))+(((14.44)*(cj5*cj5))))),IkReal(((((-1.0)*x116*x117))+(((-14.44)*cj5*sj5))+(((12.54)*cj5))+((x115*x116)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x119.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x120=IKPowWithIntegerCheck<IkReal>(IKsign(((((16.5)*x115))+(((19.0)*cj5*pz))+(((-1.0)*x115*x118))+(((-16.5)*x117))+((x117*x118)))),-1);
                                                        if (false)//if(!x120.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j4array[0]=((-1.5707963267949)+(x119.value)+(((1.5707963267949)*(x120.value))));
//                                                        sj4array[0]=IKsin(j4array[0]);
//                                                        cj4array[0]=IKcos(j4array[0]);
                                                        if (false)//if( j4array[0] > IKPI )
                                                        {
//                                                            j4array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j4array[0] < -IKPI )
                                                        {
//                                                            j4array[0]+=IK2PI;
                                                        }
//                                                        j4valid[0] = true;
//                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                        {
                                                            if (false)//if( !j4valid[ij4] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij4[0] = ij4;
//                                                            _ij4[1] = -1;
//                                                            for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                            {
                                                                if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j4valid[iij4]=false;
//                                                                    _ij4[1] = iij4;
//                                                                    break;
                                                                }
                                                            }
//                                                            j4 = j4array[ij4];
//                                                            cj4 = cj4array[ij4];
//                                                            sj4 = sj4array[ij4];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x121=IKcos(j4);
//                                                                IkReal x122=IKsin(j4);
//                                                                IkReal x123=((1.0)*pz);
//                                                                IkReal x124=((0.76)*sj5);
//                                                                IkReal x125=(cj3*py);
//                                                                IkReal x126=((0.76)*cj5);
//                                                                IkReal x127=(px*sj3);
//                                                                IkReal x128=((1.32)*x122);
//                                                                evalcond[0]=(((x122*x126))+(((-1.0)*x123))+(((0.66)*x121))+(((-1.0)*x121*x124)));
//                                                                evalcond[1]=(((x121*x127))+x126+(((-1.0)*x121*x125))+(((-1.0)*x122*x123)));
//                                                                evalcond[2]=((0.66)+(((-1.0)*x122*x127))+((x122*x125))+(((-1.0)*x124))+(((-1.0)*x121*x123)));
//                                                                evalcond[3]=(x125+(((0.66)*x122))+(((-1.0)*x121*x126))+(((-1.0)*x127))+(((-1.0)*x122*x124)));
//                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((-1.0)*pz*x123))+(((-1.0)*x125*x128))+(((1.32)*pz*x121))+(((-1.0)*(py*py)))+((x127*x128)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j3;
//                                                                vinfos[0].indices[0] = _ij3[0];
//                                                                vinfos[0].indices[1] = _ij3[1];
//                                                                vinfos[0].maxsolutions = _nj3;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j4;
//                                                                vinfos[1].indices[0] = _ij4[0];
//                                                                vinfos[1].indices[1] = _ij4[1];
//                                                                vinfos[1].maxsolutions = _nj4;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j5;
//                                                                vinfos[2].indices[0] = _ij5[0];
//                                                                vinfos[2].indices[1] = _ij5[1];
//                                                                vinfos[2].maxsolutions = _nj5;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                bool j4valid[1]= {false};
                                                _nj4 = 1;
                                                IkReal x129=((475.0)*pz);
                                                IkReal x130=((475.0)*px*sj3);
                                                IkReal x131=((475.0)*cj3*py);
                                                CheckValue<IkReal> x132 = IKatan2WithCheck(IkReal(((((412.5)*px*sj3))+(((-1.0)*sj5*x130))+((sj5*x131))+(((-412.5)*cj3*py))+((cj5*x129)))),IkReal(((((-1.0)*sj5*x129))+(((412.5)*pz))+(((-1.0)*cj5*x130))+((cj5*x131)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x132.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x133=IKPowWithIntegerCheck<IkReal>(IKsign(((633.25)+(((-627.0)*sj5)))),-1);
                                                if(!x133.valid)
                                                {
//                                                    continue;
                                                }
                                                j4array[0]=((-1.5707963267949)+(x132.value)+(((1.5707963267949)*(x133.value))));
                                                sj4array[0]=IKsin(j4array[0]);
                                                cj4array[0]=IKcos(j4array[0]);
                                                if( j4array[0] > IKPI )
                                                {
//                                                    j4array[0]-=IK2PI;
                                                }
                                                else if( j4array[0] < -IKPI )
                                                {
//                                                    j4array[0]+=IK2PI;
                                                }
                                                j4valid[0] = true;
                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                {
                                                    if( !j4valid[ij4] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij4[0] = ij4;
                                                    _ij4[1] = -1;
                                                    for(int iij4 = ij4+1; iij4 < 1; ++iij4)
                                                    {
                                                        if (false)//if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j4valid[iij4]=false;
//                                                            _ij4[1] = iij4;
//                                                            break;
                                                        }
                                                    }
                                                    j4 = j4array[ij4];
                                                    cj4 = cj4array[ij4];
                                                    sj4 = sj4array[ij4];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x134=IKcos(j4);
                                                        IkReal x135=IKsin(j4);
                                                        IkReal x136=((1.0)*pz);
                                                        IkReal x137=((0.76)*sj5);
                                                        IkReal x138=(cj3*py);
                                                        IkReal x139=((0.76)*cj5);
                                                        IkReal x140=(px*sj3);
                                                        IkReal x141=((1.32)*x135);
                                                        evalcond[0]=((((-1.0)*x134*x137))+((x135*x139))+(((0.66)*x134))+(((-1.0)*x136)));
                                                        evalcond[1]=((((-1.0)*x134*x138))+(((-1.0)*x135*x136))+x139+((x134*x140)));
                                                        evalcond[2]=((0.66)+(((-1.0)*x134*x136))+((x135*x138))+(((-1.0)*x137))+(((-1.0)*x135*x140)));
                                                        evalcond[3]=((((-1.0)*x135*x137))+(((-1.0)*x134*x139))+x138+(((0.66)*x135))+(((-1.0)*x140)));
                                                        evalcond[4]=((0.1616)+((x140*x141))+(((-1.0)*pz*x136))+(((-1.0)*(px*px)))+(((-1.0)*x138*x141))+(((-1.0)*(py*py)))+(((1.32)*pz*x134)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j3;
                                                        vinfos[0].indices[0] = _ij3[0];
                                                        vinfos[0].indices[1] = _ij3[1];
                                                        vinfos[0].maxsolutions = _nj3;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j4;
                                                        vinfos[1].indices[0] = _ij4[0];
                                                        vinfos[1].indices[1] = _ij4[1];
                                                        vinfos[1].maxsolutions = _nj4;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j5;
                                                        vinfos[2].indices[0] = _ij5[0];
                                                        vinfos[2].indices[1] = _ij5[1];
                                                        vinfos[2].maxsolutions = _nj5;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }

                        }

                    }
                }
            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Prototype (dbd83885b2b27d2202afadb037c40abc)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
