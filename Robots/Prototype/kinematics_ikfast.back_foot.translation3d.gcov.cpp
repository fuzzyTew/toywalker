#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_back_foot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-08 01:12:24.802146
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if( f >= 1 )
    {
//        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
//        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
        return 1.0;
    }
    else if (false)//else if( f < 0 )
    {
//        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKcos(j[1]);
    x1=IKsin(j[1]);
    x2=IKsin(j[0]);
    x3=IKsin(j[2]);
    x4=IKcos(j[2]);
    x5=IKcos(j[0]);
    x6=((0.76)*x3);
    x7=(x1*x5);
    x8=(x1*x2);
    x9=((0.76)*x0*x4);
    eetrans[0]=((-0.82)+((x0*x6))+(((-0.66)*x0))+(((-0.76)*x1*x4)));
    eetrans[1]=((((-1.0)*x6*x8))+(((0.66)*x8))+(((-1.0)*x2*x9))+(((-0.14)*x5)));
    eetrans[2]=((-0.06)+(((-1.0)*x6*x7))+(((0.66)*x7))+(((0.14)*x2))+(((-1.0)*x5*x9)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j0=numeric_limits<IkReal>::quiet_NaN();
        _ij0[0] = -1;
        _ij0[1] = -1;
        _nj0 = -1;
        j1=numeric_limits<IkReal>::quiet_NaN();
        _ij1[0] = -1;
        _ij1[1] = -1;
        _nj1 = -1;
        j2=numeric_limits<IkReal>::quiet_NaN();
        _ij2[0] = -1;
        _ij2[1] = -1;
        _nj2 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((0.06)+pz);
            new_py=py;
            new_pz=((-0.82)+(((-1.0)*px)));
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j2array[2], cj2array[2], sj2array[2];
                bool j2valid[2]= {false};
                _nj2 = 2;
                sj2array[0]=((1.02950558213716)+(((-0.996810207336523)*(py*py)))+(((-0.996810207336523)*(pz*pz)))+(((-0.996810207336523)*(px*px))));
                if( sj2array[0] >= -1-IKFAST_SINCOS_THRESH && sj2array[0] <= 1+IKFAST_SINCOS_THRESH )
                {
                    j2valid[0] = j2valid[1] = true;
                    j2array[0] = IKasin(sj2array[0]);
                    cj2array[0] = IKcos(j2array[0]);
                    sj2array[1] = sj2array[0];
                    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
                    cj2array[1] = -cj2array[0];
                }
                else if( isnan(sj2array[0]) )
                {
                    // probably any value will work
//                    j2valid[0] = true;
//                    cj2array[0] = 1;
//                    sj2array[0] = 0;
//                    j2array[0] = 0;
                }
                for(int ij2 = 0; ij2 < 2; ++ij2)
                {
                    if( !j2valid[ij2] )
                    {
                        continue;
                    }
                    _ij2[0] = ij2;
                    _ij2[1] = -1;
                    for(int iij2 = ij2+1; iij2 < 2; ++iij2)
                    {
                        if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
                        {
//                            j2valid[iij2]=false;
//                            _ij2[1] = iij2;
//                            break;
                        }
                    }
                    j2 = j2array[ij2];
                    cj2 = cj2array[ij2];
                    sj2 = sj2array[ij2];

                    {
                        IkReal j0eval[2];
                        j0eval[0]=((IKabs(px))+(IKabs(py)));
                        j0eval[1]=((px*px)+(py*py));
                        if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
                        {
                            {
                                IkReal j1eval[2];
//                                j1eval[0]=((1.0)+(((1.32598714416896)*(sj2*sj2)))+(((-2.3030303030303)*sj2))+(((1.32598714416896)*(cj2*cj2))));
//                                j1eval[1]=((IKabs(cj2))+(((1.31578947368421)*(IKabs(((0.66)+(((-0.76)*sj2))))))));
                                if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
                                {
//                                    continue; // 0 cases reached

                                }
                                else
                                {
                                    {
                                        IkReal j1array[2], cj1array[2], sj1array[2];
//                                        bool j1valid[2]= {false};
//                                        _nj1 = 2;
//                                        IkReal x10=((0.66)+(((-0.76)*sj2)));
//                                        CheckValue<IkReal> x13 = IKatan2WithCheck(IkReal(x10),IkReal(((0.76)*cj2)),IKFAST_ATAN2_MAGTHRESH);
                                        if (false)//if(!x13.valid)
                                        {
//                                            continue;
                                        }
//                                        IkReal x11=((1.0)*(x13.value));
                                        if (false)//if((((x10*x10)+(((0.5776)*(cj2*cj2))))) < -0.00001)
                                        {
//                                            continue;
                                        }
//                                        CheckValue<IkReal> x14=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((x10*x10)+(((0.5776)*(cj2*cj2)))))),-1);
                                        if (false)//if(!x14.valid)
                                        {
//                                            continue;
                                        }
                                        if (false)//if( ((pz*(x14.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x14.value))) > 1+IKFAST_SINCOS_THRESH )
                                        {
//                                            continue;
                                        }
//                                        IkReal x12=IKasin((pz*(x14.value)));
//                                        j1array[0]=((((-1.0)*x11))+x12);
//                                        sj1array[0]=IKsin(j1array[0]);
//                                        cj1array[0]=IKcos(j1array[0]);
//                                        j1array[1]=((3.14159265358979)+(((-1.0)*x11))+(((-1.0)*x12)));
//                                        sj1array[1]=IKsin(j1array[1]);
//                                        cj1array[1]=IKcos(j1array[1]);
                                        if (false)//if( j1array[0] > IKPI )
                                        {
//                                            j1array[0]-=IK2PI;
                                        }
                                        else if (false)//else if( j1array[0] < -IKPI )
                                        {
//                                            j1array[0]+=IK2PI;
                                        }
//                                        j1valid[0] = true;
                                        if (false)//if( j1array[1] > IKPI )
                                        {
//                                            j1array[1]-=IK2PI;
                                        }
                                        else if (false)//else if( j1array[1] < -IKPI )
                                        {
//                                            j1array[1]+=IK2PI;
                                        }
//                                        j1valid[1] = true;
//                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                        {
                                            if (false)//if( !j1valid[ij1] )
                                            {
//                                                continue;
                                            }
//                                            _ij1[0] = ij1;
//                                            _ij1[1] = -1;
//                                            for(int iij1 = ij1+1; iij1 < 2; ++iij1)
                                            {
                                                if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                {
//                                                    j1valid[iij1]=false;
//                                                    _ij1[1] = iij1;
//                                                    break;
                                                }
                                            }
//                                            j1 = j1array[ij1];
//                                            cj1 = cj1array[ij1];
//                                            sj1 = sj1array[ij1];

                                            {
                                                IkReal j0eval[3];
//                                                IkReal x15=py*py;
//                                                IkReal x16=px*px;
//                                                IkReal x17=((50.0)*cj1);
//                                                IkReal x18=((7.0)*cj1);
//                                                IkReal x19=((38.0)*cj2);
//                                                IkReal x20=((50.0)*pz*sj1);
//                                                j0eval[0]=(((cj1*x15))+((cj1*x16)));
//                                                j0eval[1]=IKsign((((x16*x17))+((x15*x17))));
//                                                j0eval[2]=((IKabs((((px*x20))+(((-1.0)*py*x18))+(((-1.0)*px*x19)))))+(IKabs((((py*x20))+((px*x18))+(((-1.0)*py*x19))))));
                                                if (false)//if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j0eval[3];
//                                                        IkReal x21=px*px;
//                                                        IkReal x22=py*py;
//                                                        IkReal x23=((38.0)*sj2);
//                                                        IkReal x24=((7.0)*sj1);
//                                                        IkReal x25=(sj1*x21);
//                                                        IkReal x26=((50.0)*cj1*pz);
//                                                        IkReal x27=(sj1*x22);
//                                                        j0eval[0]=(x25+x27);
//                                                        j0eval[1]=IKsign(((((50.0)*x25))+(((50.0)*x27))));
//                                                        j0eval[2]=((IKabs(((((-1.0)*py*x24))+(((33.0)*px))+(((-1.0)*px*x23))+(((-1.0)*px*x26)))))+(IKabs((((px*x24))+(((-1.0)*py*x23))+(((-1.0)*py*x26))+(((33.0)*py))))));
                                                        if (false)//if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
                                                        {
                                                            {
                                                                IkReal j0eval[3];
//                                                                IkReal x28=py*py;
//                                                                IkReal x29=px*px;
//                                                                IkReal x30=((33.0)*sj1);
//                                                                IkReal x31=((38.0)*cj1*cj2);
//                                                                IkReal x32=((38.0)*sj1*sj2);
//                                                                j0eval[0]=(x28+x29);
//                                                                j0eval[1]=((IKabs(((((-7.0)*py))+((px*x30))+(((-1.0)*px*x32))+(((-1.0)*px*x31)))))+(IKabs((((py*x30))+(((-1.0)*py*x31))+(((-1.0)*py*x32))+(((7.0)*px))))));
//                                                                j0eval[2]=IKsign(((((50.0)*x29))+(((50.0)*x28))));
                                                                if (false)//if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
                                                                {
//                                                                    continue; // 0 cases reached

                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j0array[1], cj0array[1], sj0array[1];
//                                                                        bool j0valid[1]= {false};
//                                                                        _nj0 = 1;
//                                                                        IkReal x33=(py*sj1);
//                                                                        IkReal x34=((38.0)*sj2);
//                                                                        IkReal x35=(px*sj1);
//                                                                        IkReal x36=((38.0)*cj1*cj2);
//                                                                        CheckValue<IkReal> x37=IKPowWithIntegerCheck<IkReal>(IKsign(((((50.0)*(py*py)))+(((50.0)*(px*px))))),-1);
                                                                        if (false)//if(!x37.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(((((33.0)*x33))+(((-1.0)*py*x36))+(((7.0)*px))+(((-1.0)*x33*x34)))),IkReal(((((33.0)*x35))+(((-7.0)*py))+(((-1.0)*x34*x35))+(((-1.0)*px*x36)))),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x38.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x37.value)))+(x38.value));
//                                                                        sj0array[0]=IKsin(j0array[0]);
//                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if (false)//if( j0array[0] > IKPI )
                                                                        {
//                                                                            j0array[0]-=IK2PI;
                                                                        }
                                                                        else if (false)//else if( j0array[0] < -IKPI )
                                                                        {
//                                                                            j0array[0]+=IK2PI;
                                                                        }
//                                                                        j0valid[0] = true;
//                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                            if (false)//if( !j0valid[ij0] )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            _ij0[0] = ij0;
//                                                                            _ij0[1] = -1;
//                                                                            for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                            {
                                                                                if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                                {
//                                                                                    j0valid[iij0]=false;
//                                                                                    _ij0[1] = iij0;
//                                                                                    break;
                                                                                }
                                                                            }
//                                                                            j0 = j0array[ij0];
//                                                                            cj0 = cj0array[ij0];
//                                                                            sj0 = sj0array[ij0];
                                                                            {
                                                                                IkReal evalcond[5];
//                                                                                IkReal x39=IKcos(j0);
//                                                                                IkReal x40=IKsin(j0);
//                                                                                IkReal x41=((1.0)*pz);
//                                                                                IkReal x42=((0.76)*cj2);
//                                                                                IkReal x43=((1.32)*sj1);
//                                                                                IkReal x44=((0.76)*sj2);
//                                                                                IkReal x45=(py*x40);
//                                                                                IkReal x46=(px*x39);
//                                                                                IkReal x47=((1.0)*x46);
//                                                                                evalcond[0]=((0.14)+(((-1.0)*px*x40))+((py*x39)));
//                                                                                evalcond[1]=(((cj1*x45))+((cj1*x46))+x42+(((-1.0)*sj1*x41)));
//                                                                                evalcond[2]=((0.66)+(((-1.0)*x44))+(((-1.0)*cj1*x41))+(((-1.0)*sj1*x45))+(((-1.0)*sj1*x47)));
//                                                                                evalcond[3]=((((-1.0)*x45))+(((-1.0)*x47))+(((-1.0)*cj1*x42))+(((0.66)*sj1))+(((-1.0)*sj1*x44)));
//                                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((1.32)*cj1*pz))+((x43*x45))+((x43*x46))+(((-1.0)*pz*x41))+(((-1.0)*(py*py))));
                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
//                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                vinfos[0].jointtype = 1;
//                                                                                vinfos[0].foffset = j0;
//                                                                                vinfos[0].indices[0] = _ij0[0];
//                                                                                vinfos[0].indices[1] = _ij0[1];
//                                                                                vinfos[0].maxsolutions = _nj0;
//                                                                                vinfos[1].jointtype = 1;
//                                                                                vinfos[1].foffset = j1;
//                                                                                vinfos[1].indices[0] = _ij1[0];
//                                                                                vinfos[1].indices[1] = _ij1[1];
//                                                                                vinfos[1].maxsolutions = _nj1;
//                                                                                vinfos[2].jointtype = 1;
//                                                                                vinfos[2].foffset = j2;
//                                                                                vinfos[2].indices[0] = _ij2[0];
//                                                                                vinfos[2].indices[1] = _ij2[1];
//                                                                                vinfos[2].maxsolutions = _nj2;
//                                                                                int vfree[0];
//                                                                                solutions.AddSolution(vinfos,vfree);
                                                                            }
                                                                        }
                                                                    }

                                                                }

                                                            }

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j0array[1], cj0array[1], sj0array[1];
//                                                                bool j0valid[1]= {false};
//                                                                _nj0 = 1;
//                                                                IkReal x48=((38.0)*sj2);
//                                                                IkReal x49=((7.0)*sj1);
//                                                                IkReal x50=((50.0)*sj1);
//                                                                IkReal x51=((50.0)*cj1*pz);
//                                                                CheckValue<IkReal> x52=IKPowWithIntegerCheck<IkReal>(IKsign((((x50*(px*px)))+((x50*(py*py))))),-1);
                                                                if (false)//if(!x52.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x53 = IKatan2WithCheck(IkReal(((((-1.0)*py*x48))+((px*x49))+(((33.0)*py))+(((-1.0)*py*x51)))),IkReal(((((-1.0)*px*x51))+(((-1.0)*py*x49))+(((33.0)*px))+(((-1.0)*px*x48)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x53.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x52.value)))+(x53.value));
//                                                                sj0array[0]=IKsin(j0array[0]);
//                                                                cj0array[0]=IKcos(j0array[0]);
                                                                if (false)//if( j0array[0] > IKPI )
                                                                {
//                                                                    j0array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j0array[0] < -IKPI )
                                                                {
//                                                                    j0array[0]+=IK2PI;
                                                                }
//                                                                j0valid[0] = true;
//                                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                {
                                                                    if (false)//if( !j0valid[ij0] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij0[0] = ij0;
//                                                                    _ij0[1] = -1;
//                                                                    for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                                    {
                                                                        if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j0valid[iij0]=false;
//                                                                            _ij0[1] = iij0;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j0 = j0array[ij0];
//                                                                    cj0 = cj0array[ij0];
//                                                                    sj0 = sj0array[ij0];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x54=IKcos(j0);
//                                                                        IkReal x55=IKsin(j0);
//                                                                        IkReal x56=((1.0)*pz);
//                                                                        IkReal x57=((0.76)*cj2);
//                                                                        IkReal x58=((1.32)*sj1);
//                                                                        IkReal x59=((0.76)*sj2);
//                                                                        IkReal x60=(py*x55);
//                                                                        IkReal x61=(px*x54);
//                                                                        IkReal x62=((1.0)*x61);
//                                                                        evalcond[0]=((0.14)+(((-1.0)*px*x55))+((py*x54)));
//                                                                        evalcond[1]=(((cj1*x60))+((cj1*x61))+x57+(((-1.0)*sj1*x56)));
//                                                                        evalcond[2]=((0.66)+(((-1.0)*sj1*x60))+(((-1.0)*sj1*x62))+(((-1.0)*x59))+(((-1.0)*cj1*x56)));
//                                                                        evalcond[3]=((((0.66)*sj1))+(((-1.0)*sj1*x59))+(((-1.0)*x62))+(((-1.0)*cj1*x57))+(((-1.0)*x60)));
//                                                                        evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((1.32)*cj1*pz))+((x58*x61))+((x58*x60))+(((-1.0)*pz*x56))+(((-1.0)*(py*py))));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j0;
//                                                                        vinfos[0].indices[0] = _ij0[0];
//                                                                        vinfos[0].indices[1] = _ij0[1];
//                                                                        vinfos[0].maxsolutions = _nj0;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j1;
//                                                                        vinfos[1].indices[0] = _ij1[0];
//                                                                        vinfos[1].indices[1] = _ij1[1];
//                                                                        vinfos[1].maxsolutions = _nj1;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j2;
//                                                                        vinfos[2].indices[0] = _ij2[0];
//                                                                        vinfos[2].indices[1] = _ij2[1];
//                                                                        vinfos[2].maxsolutions = _nj2;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j0array[1], cj0array[1], sj0array[1];
//                                                        bool j0valid[1]= {false};
//                                                        _nj0 = 1;
//                                                        IkReal x63=((50.0)*cj1);
//                                                        IkReal x64=((7.0)*cj1);
//                                                        IkReal x65=((38.0)*cj2);
//                                                        IkReal x66=((50.0)*pz*sj1);
//                                                        CheckValue<IkReal> x67=IKPowWithIntegerCheck<IkReal>(IKsign((((x63*(py*py)))+((x63*(px*px))))),-1);
                                                        if (false)//if(!x67.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x68 = IKatan2WithCheck(IkReal((((px*x64))+(((-1.0)*py*x65))+((py*x66)))),IkReal(((((-1.0)*px*x65))+((px*x66))+(((-1.0)*py*x64)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x68.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x67.value)))+(x68.value));
//                                                        sj0array[0]=IKsin(j0array[0]);
//                                                        cj0array[0]=IKcos(j0array[0]);
                                                        if (false)//if( j0array[0] > IKPI )
                                                        {
//                                                            j0array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j0array[0] < -IKPI )
                                                        {
//                                                            j0array[0]+=IK2PI;
                                                        }
//                                                        j0valid[0] = true;
//                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                        {
                                                            if (false)//if( !j0valid[ij0] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij0[0] = ij0;
//                                                            _ij0[1] = -1;
//                                                            for(int iij0 = ij0+1; iij0 < 1; ++iij0)
                                                            {
                                                                if (false)//if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j0valid[iij0]=false;
//                                                                    _ij0[1] = iij0;
//                                                                    break;
                                                                }
                                                            }
//                                                            j0 = j0array[ij0];
//                                                            cj0 = cj0array[ij0];
//                                                            sj0 = sj0array[ij0];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x69=IKcos(j0);
//                                                                IkReal x70=IKsin(j0);
//                                                                IkReal x71=((1.0)*pz);
//                                                                IkReal x72=((0.76)*cj2);
//                                                                IkReal x73=((1.32)*sj1);
//                                                                IkReal x74=((0.76)*sj2);
//                                                                IkReal x75=(py*x70);
//                                                                IkReal x76=(px*x69);
//                                                                IkReal x77=((1.0)*x76);
//                                                                evalcond[0]=((0.14)+(((-1.0)*px*x70))+((py*x69)));
//                                                                evalcond[1]=((((-1.0)*sj1*x71))+x72+((cj1*x76))+((cj1*x75)));
//                                                                evalcond[2]=((0.66)+(((-1.0)*x74))+(((-1.0)*sj1*x75))+(((-1.0)*sj1*x77))+(((-1.0)*cj1*x71)));
//                                                                evalcond[3]=((((-1.0)*x77))+(((-1.0)*sj1*x74))+(((0.66)*sj1))+(((-1.0)*x75))+(((-1.0)*cj1*x72)));
//                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((1.32)*cj1*pz))+((x73*x76))+((x73*x75))+(((-1.0)*(py*py)))+(((-1.0)*pz*x71)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j0;
//                                                                vinfos[0].indices[0] = _ij0[0];
//                                                                vinfos[0].indices[1] = _ij0[1];
//                                                                vinfos[0].maxsolutions = _nj0;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j1;
//                                                                vinfos[1].indices[0] = _ij1[0];
//                                                                vinfos[1].indices[1] = _ij1[1];
//                                                                vinfos[1].maxsolutions = _nj1;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j2;
//                                                                vinfos[2].indices[0] = _ij2[0];
//                                                                vinfos[2].indices[1] = _ij2[1];
//                                                                vinfos[2].maxsolutions = _nj2;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                        }
                                    }

                                }

                            }

                        }
                        else
                        {
                            {
                                IkReal j0array[2], cj0array[2], sj0array[2];
                                bool j0valid[2]= {false};
                                _nj0 = 2;
                                CheckValue<IkReal> x80 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
                                if(!x80.valid)
                                {
//                                    continue;
                                }
                                IkReal x78=((1.0)*(x80.value));
                                if((((px*px)+(py*py))) < -0.00001)
                                {
//                                    continue;
                                }
                                CheckValue<IkReal> x81=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
                                if(!x81.valid)
                                {
//                                    continue;
                                }
                                if( (((0.14)*(x81.value))) < -1-IKFAST_SINCOS_THRESH || (((0.14)*(x81.value))) > 1+IKFAST_SINCOS_THRESH )
                                {
//                                    continue;
                                }
                                IkReal x79=IKasin(((0.14)*(x81.value)));
                                j0array[0]=((((-1.0)*x78))+(((-1.0)*x79)));
                                sj0array[0]=IKsin(j0array[0]);
                                cj0array[0]=IKcos(j0array[0]);
                                j0array[1]=((3.14159265358979)+(((-1.0)*x78))+x79);
                                sj0array[1]=IKsin(j0array[1]);
                                cj0array[1]=IKcos(j0array[1]);
                                if( j0array[0] > IKPI )
                                {
//                                    j0array[0]-=IK2PI;
                                }
                                else if( j0array[0] < -IKPI )
                                {
//                                    j0array[0]+=IK2PI;
                                }
                                j0valid[0] = true;
                                if( j0array[1] > IKPI )
                                {
                                    j0array[1]-=IK2PI;
                                }
                                else if( j0array[1] < -IKPI )
                                {
//                                    j0array[1]+=IK2PI;
                                }
                                j0valid[1] = true;
                                for(int ij0 = 0; ij0 < 2; ++ij0)
                                {
                                    if( !j0valid[ij0] )
                                    {
//                                        continue;
                                    }
                                    _ij0[0] = ij0;
                                    _ij0[1] = -1;
                                    for(int iij0 = ij0+1; iij0 < 2; ++iij0)
                                    {
                                        if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j0valid[iij0]=false;
//                                            _ij0[1] = iij0;
//                                            break;
                                        }
                                    }
                                    j0 = j0array[ij0];
                                    cj0 = cj0array[ij0];
                                    sj0 = sj0array[ij0];

                                    {
                                        IkReal j1eval[3];
                                        IkReal x82=(py*sj0);
                                        IkReal x83=((475.0)*sj2);
                                        IkReal x84=(cj0*px);
                                        IkReal x85=((475.0)*cj2);
                                        j1eval[0]=((1.00996810207337)+(((-1.0)*sj2)));
                                        j1eval[1]=((IKabs(((((-1.0)*x82*x83))+(((-1.0)*x83*x84))+((pz*x85))+(((412.5)*x84))+(((412.5)*x82)))))+(IKabs(((((-1.0)*x82*x85))+(((412.5)*pz))+(((-1.0)*x84*x85))+(((-1.0)*pz*x83))))));
                                        j1eval[2]=IKsign(((633.25)+(((-627.0)*sj2))));
                                        if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j1eval[3];
//                                                IkReal x86=(cj2*pz);
//                                                IkReal x87=(cj0*px);
//                                                IkReal x88=((25.0)*pz);
//                                                IkReal x89=(py*sj0);
//                                                IkReal x90=(sj2*x87);
//                                                IkReal x91=(sj2*x89);
//                                                j1eval[0]=((((1.15151515151515)*x91))+(((1.15151515151515)*x90))+(((1.15151515151515)*x86))+(((-1.0)*x87))+(((-1.0)*x89)));
//                                                j1eval[1]=((IKabs(((((12.54)*cj2))+(((-1.0)*x87*x88))+(((-14.44)*cj2*sj2))+(((-1.0)*x88*x89)))))+(IKabs(((-25.33)+(((14.44)*(cj2*cj2)))+(((25.08)*sj2))+((pz*x88))))));
//                                                j1eval[2]=IKsign(((((19.0)*x90))+(((19.0)*x91))+(((19.0)*x86))+(((-16.5)*x87))+(((-16.5)*x89))));
                                                if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j1eval[3];
//                                                        IkReal x92=cj0*cj0;
//                                                        IkReal x93=py*py;
//                                                        IkReal x94=pz*pz;
//                                                        IkReal x95=px*px;
//                                                        IkReal x96=((19.0)*sj2);
//                                                        IkReal x97=(cj0*px);
//                                                        IkReal x98=(py*sj0);
//                                                        IkReal x99=((19.0)*cj2);
//                                                        IkReal x100=(x92*x93);
//                                                        IkReal x101=(x92*x95);
//                                                        j1eval[0]=(x101+x93+x94+(((2.0)*x97*x98))+(((-1.0)*x100)));
//                                                        j1eval[1]=((IKabs(((((16.5)*x98))+(((16.5)*x97))+((pz*x99))+(((-1.0)*x96*x98))+(((-1.0)*x96*x97)))))+(IKabs(((((16.5)*pz))+(((-1.0)*pz*x96))+(((-1.0)*x98*x99))+(((-1.0)*x97*x99))))));
//                                                        j1eval[2]=IKsign(((((50.0)*x97*x98))+(((25.0)*x94))+(((25.0)*x93))+(((-25.0)*x100))+(((25.0)*x101))));
                                                        if (false)//if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // 0 cases reached

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j1array[1], cj1array[1], sj1array[1];
//                                                                bool j1valid[1]= {false};
//                                                                _nj1 = 1;
//                                                                IkReal x102=cj0*cj0;
//                                                                IkReal x103=py*py;
//                                                                IkReal x104=(cj0*px);
//                                                                IkReal x105=((19.0)*sj2);
//                                                                IkReal x106=(py*sj0);
//                                                                IkReal x107=((19.0)*cj2);
//                                                                IkReal x108=((25.0)*x103);
//                                                                CheckValue<IkReal> x109 = IKatan2WithCheck(IkReal(((((-1.0)*x104*x105))+(((16.5)*x104))+(((16.5)*x106))+((pz*x107))+(((-1.0)*x105*x106)))),IkReal(((((16.5)*pz))+(((-1.0)*pz*x105))+(((-1.0)*x104*x107))+(((-1.0)*x106*x107)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x109.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x110=IKPowWithIntegerCheck<IkReal>(IKsign(((((25.0)*(pz*pz)))+(((50.0)*x104*x106))+(((25.0)*x102*(px*px)))+x108+(((-1.0)*x102*x108)))),-1);
                                                                if (false)//if(!x110.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j1array[0]=((-1.5707963267949)+(x109.value)+(((1.5707963267949)*(x110.value))));
//                                                                sj1array[0]=IKsin(j1array[0]);
//                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if (false)//if( j1array[0] > IKPI )
                                                                {
//                                                                    j1array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j1array[0] < -IKPI )
                                                                {
//                                                                    j1array[0]+=IK2PI;
                                                                }
//                                                                j1valid[0] = true;
//                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                    if (false)//if( !j1valid[ij1] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij1[0] = ij1;
//                                                                    _ij1[1] = -1;
//                                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                                    {
                                                                        if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j1valid[iij1]=false;
//                                                                            _ij1[1] = iij1;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j1 = j1array[ij1];
//                                                                    cj1 = cj1array[ij1];
//                                                                    sj1 = sj1array[ij1];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x111=IKcos(j1);
//                                                                        IkReal x112=IKsin(j1);
//                                                                        IkReal x113=(cj0*px);
//                                                                        IkReal x114=((0.76)*cj2);
//                                                                        IkReal x115=((1.0)*pz);
//                                                                        IkReal x116=((0.76)*sj2);
//                                                                        IkReal x117=(py*sj0);
//                                                                        IkReal x118=((1.0)*x112);
//                                                                        IkReal x119=((1.32)*x112);
//                                                                        evalcond[0]=((((-1.0)*x111*x116))+((x112*x114))+(((0.66)*x111))+(((-1.0)*x115)));
//                                                                        evalcond[1]=((((-1.0)*x112*x115))+((x111*x117))+((x111*x113))+x114);
//                                                                        evalcond[2]=((0.66)+(((-1.0)*x111*x115))+(((-1.0)*x117*x118))+(((-1.0)*x113*x118))+(((-1.0)*x116)));
//                                                                        evalcond[3]=((((-1.0)*x111*x114))+(((-1.0)*x112*x116))+(((0.66)*x112))+(((-1.0)*x117))+(((-1.0)*x113)));
//                                                                        evalcond[4]=((0.1616)+(((1.32)*pz*x111))+(((-1.0)*(px*px)))+((x113*x119))+(((-1.0)*(py*py)))+(((-1.0)*pz*x115))+((x117*x119)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j0;
//                                                                        vinfos[0].indices[0] = _ij0[0];
//                                                                        vinfos[0].indices[1] = _ij0[1];
//                                                                        vinfos[0].maxsolutions = _nj0;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j1;
//                                                                        vinfos[1].indices[0] = _ij1[0];
//                                                                        vinfos[1].indices[1] = _ij1[1];
//                                                                        vinfos[1].maxsolutions = _nj1;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j2;
//                                                                        vinfos[2].indices[0] = _ij2[0];
//                                                                        vinfos[2].indices[1] = _ij2[1];
//                                                                        vinfos[2].maxsolutions = _nj2;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j1array[1], cj1array[1], sj1array[1];
//                                                        bool j1valid[1]= {false};
//                                                        _nj1 = 1;
//                                                        IkReal x120=(cj0*px);
//                                                        IkReal x121=((19.0)*sj2);
//                                                        IkReal x122=((25.0)*pz);
//                                                        IkReal x123=(py*sj0);
//                                                        CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(((-25.33)+(((14.44)*(cj2*cj2)))+(((25.08)*sj2))+((pz*x122)))),IkReal(((((-1.0)*x120*x122))+(((12.54)*cj2))+(((-14.44)*cj2*sj2))+(((-1.0)*x122*x123)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x124.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x125=IKPowWithIntegerCheck<IkReal>(IKsign((((x121*x123))+((x120*x121))+(((19.0)*cj2*pz))+(((-16.5)*x120))+(((-16.5)*x123)))),-1);
                                                        if (false)//if(!x125.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j1array[0]=((-1.5707963267949)+(x124.value)+(((1.5707963267949)*(x125.value))));
//                                                        sj1array[0]=IKsin(j1array[0]);
//                                                        cj1array[0]=IKcos(j1array[0]);
                                                        if (false)//if( j1array[0] > IKPI )
                                                        {
//                                                            j1array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j1array[0] < -IKPI )
                                                        {
//                                                            j1array[0]+=IK2PI;
                                                        }
//                                                        j1valid[0] = true;
//                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                        {
                                                            if (false)//if( !j1valid[ij1] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij1[0] = ij1;
//                                                            _ij1[1] = -1;
//                                                            for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                            {
                                                                if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j1valid[iij1]=false;
//                                                                    _ij1[1] = iij1;
//                                                                    break;
                                                                }
                                                            }
//                                                            j1 = j1array[ij1];
//                                                            cj1 = cj1array[ij1];
//                                                            sj1 = sj1array[ij1];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x126=IKcos(j1);
//                                                                IkReal x127=IKsin(j1);
//                                                                IkReal x128=(cj0*px);
//                                                                IkReal x129=((0.76)*cj2);
//                                                                IkReal x130=((1.0)*pz);
//                                                                IkReal x131=((0.76)*sj2);
//                                                                IkReal x132=(py*sj0);
//                                                                IkReal x133=((1.0)*x127);
//                                                                IkReal x134=((1.32)*x127);
//                                                                evalcond[0]=((((-1.0)*x126*x131))+(((0.66)*x126))+(((-1.0)*x130))+((x127*x129)));
//                                                                evalcond[1]=(x129+((x126*x132))+((x126*x128))+(((-1.0)*x127*x130)));
//                                                                evalcond[2]=((0.66)+(((-1.0)*x126*x130))+(((-1.0)*x128*x133))+(((-1.0)*x131))+(((-1.0)*x132*x133)));
//                                                                evalcond[3]=((((-1.0)*x126*x129))+(((0.66)*x127))+(((-1.0)*x132))+(((-1.0)*x128))+(((-1.0)*x127*x131)));
//                                                                evalcond[4]=((0.1616)+(((-1.0)*pz*x130))+(((-1.0)*(px*px)))+((x132*x134))+((x128*x134))+(((1.32)*pz*x126))+(((-1.0)*(py*py))));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j0;
//                                                                vinfos[0].indices[0] = _ij0[0];
//                                                                vinfos[0].indices[1] = _ij0[1];
//                                                                vinfos[0].maxsolutions = _nj0;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j1;
//                                                                vinfos[1].indices[0] = _ij1[0];
//                                                                vinfos[1].indices[1] = _ij1[1];
//                                                                vinfos[1].maxsolutions = _nj1;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j2;
//                                                                vinfos[2].indices[0] = _ij2[0];
//                                                                vinfos[2].indices[1] = _ij2[1];
//                                                                vinfos[2].maxsolutions = _nj2;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j1array[1], cj1array[1], sj1array[1];
                                                bool j1valid[1]= {false};
                                                _nj1 = 1;
                                                IkReal x135=(py*sj0);
                                                IkReal x136=((475.0)*sj2);
                                                IkReal x137=(cj0*px);
                                                IkReal x138=((475.0)*cj2);
                                                CheckValue<IkReal> x139 = IKatan2WithCheck(IkReal(((((-1.0)*x135*x136))+((pz*x138))+(((-1.0)*x136*x137))+(((412.5)*x137))+(((412.5)*x135)))),IkReal(((((-1.0)*x135*x138))+(((-1.0)*pz*x136))+(((412.5)*pz))+(((-1.0)*x137*x138)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x139.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x140=IKPowWithIntegerCheck<IkReal>(IKsign(((633.25)+(((-627.0)*sj2)))),-1);
                                                if(!x140.valid)
                                                {
//                                                    continue;
                                                }
                                                j1array[0]=((-1.5707963267949)+(x139.value)+(((1.5707963267949)*(x140.value))));
                                                sj1array[0]=IKsin(j1array[0]);
                                                cj1array[0]=IKcos(j1array[0]);
                                                if( j1array[0] > IKPI )
                                                {
//                                                    j1array[0]-=IK2PI;
                                                }
                                                else if( j1array[0] < -IKPI )
                                                {
//                                                    j1array[0]+=IK2PI;
                                                }
                                                j1valid[0] = true;
                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                {
                                                    if( !j1valid[ij1] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij1[0] = ij1;
                                                    _ij1[1] = -1;
                                                    for(int iij1 = ij1+1; iij1 < 1; ++iij1)
                                                    {
                                                        if (false)//if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j1valid[iij1]=false;
//                                                            _ij1[1] = iij1;
//                                                            break;
                                                        }
                                                    }
                                                    j1 = j1array[ij1];
                                                    cj1 = cj1array[ij1];
                                                    sj1 = sj1array[ij1];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x141=IKcos(j1);
                                                        IkReal x142=IKsin(j1);
                                                        IkReal x143=(cj0*px);
                                                        IkReal x144=((0.76)*cj2);
                                                        IkReal x145=((1.0)*pz);
                                                        IkReal x146=((0.76)*sj2);
                                                        IkReal x147=(py*sj0);
                                                        IkReal x148=((1.0)*x142);
                                                        IkReal x149=((1.32)*x142);
                                                        evalcond[0]=((((-1.0)*x145))+(((0.66)*x141))+((x142*x144))+(((-1.0)*x141*x146)));
                                                        evalcond[1]=((((-1.0)*x142*x145))+x144+((x141*x143))+((x141*x147)));
                                                        evalcond[2]=((0.66)+(((-1.0)*x146))+(((-1.0)*x143*x148))+(((-1.0)*x147*x148))+(((-1.0)*x141*x145)));
                                                        evalcond[3]=((((0.66)*x142))+(((-1.0)*x142*x146))+(((-1.0)*x143))+(((-1.0)*x147))+(((-1.0)*x141*x144)));
                                                        evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((1.32)*pz*x141))+(((-1.0)*pz*x145))+((x147*x149))+(((-1.0)*(py*py)))+((x143*x149)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }

                        }

                    }
                }
            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Prototype (dbd83885b2b27d2202afadb037c40abc)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
