#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_right_foot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-09 12:01:57.320690
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
//    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if( f >= 1 )
    {
//        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
//    while(x < 0)
    {
//        x += y;
    }
//    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
//        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if (false)//if( isnan(fy) )
    {
//        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
//        return IKPI_2;
    }
    else if (false)//else if( isnan(fx) )
    {
//        return 0;
    }
//    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
//        return 1.0;
    }
    else if( f < 0 )
    {
        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKsin(j[0]);
    x1=IKsin(j[1]);
    x2=IKcos(j[2]);
    x3=IKcos(j[1]);
    x4=IKsin(j[2]);
    x5=IKcos(j[0]);
    x6=((0.76)*x4);
    x7=(x1*x5);
    x8=(x0*x1);
    x9=((0.76)*x2*x3);
    eetrans[0]=((0.312)+((x0*x9))+(((0.66)*x8))+(((-0.14)*x5))+((x6*x8)));
    eetrans[1]=((-0.74)+(((0.76)*x1*x2))+(((-0.66)*x3))+(((-1.0)*x3*x6)));
    eetrans[2]=((-0.06)+(((-1.0)*x6*x7))+(((-0.66)*x7))+(((-0.14)*x0))+(((-1.0)*x5*x9)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j6=numeric_limits<IkReal>::quiet_NaN();
        _ij6[0] = -1;
        _ij6[1] = -1;
        _nj6 = -1;
        j7=numeric_limits<IkReal>::quiet_NaN();
        _ij7[0] = -1;
        _ij7[1] = -1;
        _nj7 = -1;
        j8=numeric_limits<IkReal>::quiet_NaN();
        _ij8[0] = -1;
        _ij8[1] = -1;
        _nj8 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((-0.312)+px);
            new_py=((0.06)+pz);
            new_pz=((-0.74)+(((-1.0)*py)));
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j8array[2], cj8array[2], sj8array[2];
                bool j8valid[2]= {false};
                _nj8 = 2;
                sj8array[0]=((-1.02950558213716)+(((0.996810207336523)*(py*py)))+(((0.996810207336523)*(px*px)))+(((0.996810207336523)*(pz*pz))));
                if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                {
                    j8valid[0] = j8valid[1] = true;
                    j8array[0] = IKasin(sj8array[0]);
                    cj8array[0] = IKcos(j8array[0]);
                    sj8array[1] = sj8array[0];
                    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
                    cj8array[1] = -cj8array[0];
                }
                else if( isnan(sj8array[0]) )
                {
                    // probably any value will work
//                    j8valid[0] = true;
//                    cj8array[0] = 1;
//                    sj8array[0] = 0;
//                    j8array[0] = 0;
                }
                for(int ij8 = 0; ij8 < 2; ++ij8)
                {
                    if( !j8valid[ij8] )
                    {
                        continue;
                    }
                    _ij8[0] = ij8;
                    _ij8[1] = -1;
                    for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                    {
                        if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                        {
//                            j8valid[iij8]=false;
//                            _ij8[1] = iij8;
//                            break;
                        }
                    }
                    j8 = j8array[ij8];
                    cj8 = cj8array[ij8];
                    sj8 = sj8array[ij8];

                    {
                        IkReal j6eval[2];
                        j6eval[0]=((px*px)+(py*py));
                        j6eval[1]=((IKabs(px))+(IKabs(py)));
                        if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
                        {
                            {
                                IkReal j7eval[2];
//                                j7eval[0]=((1.0)+(((1.32598714416896)*(cj8*cj8)))+(((1.32598714416896)*(sj8*sj8)))+(((2.3030303030303)*sj8)));
//                                j7eval[1]=((IKabs(cj8))+(((1.31578947368421)*(IKabs(((0.66)+(((0.76)*sj8))))))));
                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                {
                                    {
                                        IkReal evalcond[1];
                                        bool bgotonextstatement = true;
                                        do
                                        {
//                                            evalcond[0]=((px*px)+(py*py));
                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                            {
//                                                bgotonextstatement=false;
                                                {
                                                    IkReal j7eval[1];
//                                                    px=0;
//                                                    py=0;
//                                                    pp=pz*pz;
//                                                    j7eval[0]=pz;
                                                    if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                    {
                                                        {
                                                            IkReal j7eval[2];
//                                                            px=0;
//                                                            py=0;
//                                                            pp=pz*pz;
//                                                            j7eval[0]=pz;
//                                                            j7eval[1]=((((1.15151515151515)*pz*sj8))+pz);
                                                            if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                            {
//                                                                continue; // 1 cases reached

                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j7array[1], cj7array[1], sj7array[1];
                                                                    bool j7valid[1]= {false};
//                                                                    _nj7 = 1;
//                                                                    CheckValue<IkReal> x10=IKPowWithIntegerCheck<IkReal>(pz,-1);
                                                                    if (false)//if(!x10.valid)
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    CheckValue<IkReal> x11=IKPowWithIntegerCheck<IkReal>(((((412.5)*pz))+(((475.0)*pz*sj8))),-1);
                                                                    if (false)//if(!x11.valid)
                                                                    {
//                                                                        continue;
                                                                    }
                                                                    if (false)//if( IKabs(((-0.76)*cj8*(x10.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11.value)*(((((-361.0)*(cj8*cj8)))+(((625.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.76)*cj8*(x10.value)))+IKsqr(((x11.value)*(((((-361.0)*(cj8*cj8)))+(((625.0)*(pz*pz)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    j7array[0]=IKatan2(((-0.76)*cj8*(x10.value)), ((x11.value)*(((((-361.0)*(cj8*cj8)))+(((625.0)*(pz*pz)))))));
//                                                                    sj7array[0]=IKsin(j7array[0]);
//                                                                    cj7array[0]=IKcos(j7array[0]);
                                                                    if (false)//if( j7array[0] > IKPI )
                                                                    {
//                                                                        j7array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j7array[0] < -IKPI )
                                                                    {
//                                                                        j7array[0]+=IK2PI;
                                                                    }
//                                                                    j7valid[0] = true;
//                                                                    for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                    {
                                                                        if (false)//if( !j7valid[ij7] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij7[0] = ij7;
//                                                                        _ij7[1] = -1;
//                                                                        for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                        {
                                                                            if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j7valid[iij7]=false;
//                                                                                _ij7[1] = iij7;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j7 = j7array[ij7];
//                                                                        cj7 = cj7array[ij7];
//                                                                        sj7 = sj7array[ij7];
                                                                        {
                                                                            IkReal evalcond[5];
//                                                                            IkReal x12=IKcos(j7);
//                                                                            IkReal x13=IKsin(j7);
//                                                                            IkReal x14=((0.76)*cj8);
//                                                                            IkReal x15=((0.76)*sj8);
//                                                                            IkReal x16=((1.0)*pz);
//                                                                            evalcond[0]=((((-1.0)*x14))+(((-1.0)*x13*x16)));
//                                                                            evalcond[1]=((0.66)+x15+(((-1.0)*x12*x16)));
//                                                                            evalcond[2]=((0.1616)+(((-1.0)*pz*x16))+(((1.32)*pz*x12)));
//                                                                            evalcond[3]=(((x12*x14))+((x13*x15))+(((0.66)*x13)));
//                                                                            evalcond[4]=((((-1.0)*x16))+((x12*x15))+(((-1.0)*x13*x14))+(((0.66)*x12)));
                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                            {
//                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                            bool j6valid[1]= {false};
//                                                                            _nj6 = 1;
//                                                                            j6array[0]=0;
//                                                                            sj6array[0]=IKsin(j6array[0]);
//                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                            if (false)//if( j6array[0] > IKPI )
                                                                            {
//                                                                                j6array[0]-=IK2PI;
                                                                            }
                                                                            else if (false)//else if( j6array[0] < -IKPI )
                                                                            {
//                                                                                j6array[0]+=IK2PI;
                                                                            }
//                                                                            j6valid[0] = true;
//                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                            {
                                                                                if (false)//if( !j6valid[ij6] )
                                                                                {
//                                                                                    continue;
                                                                                }
//                                                                                _ij6[0] = ij6;
//                                                                                _ij6[1] = -1;
//                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                {
                                                                                    if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                    {
//                                                                                        j6valid[iij6]=false;
//                                                                                        _ij6[1] = iij6;
//                                                                                        break;
                                                                                    }
                                                                                }
//                                                                                j6 = j6array[ij6];
//                                                                                cj6 = cj6array[ij6];
//                                                                                sj6 = sj6array[ij6];

                                                                                {
//                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                    vinfos[0].jointtype = 1;
//                                                                                    vinfos[0].foffset = j6;
//                                                                                    vinfos[0].indices[0] = _ij6[0];
//                                                                                    vinfos[0].indices[1] = _ij6[1];
//                                                                                    vinfos[0].maxsolutions = _nj6;
//                                                                                    vinfos[1].jointtype = 1;
//                                                                                    vinfos[1].foffset = j7;
//                                                                                    vinfos[1].indices[0] = _ij7[0];
//                                                                                    vinfos[1].indices[1] = _ij7[1];
//                                                                                    vinfos[1].maxsolutions = _nj7;
//                                                                                    vinfos[2].jointtype = 1;
//                                                                                    vinfos[2].foffset = j8;
//                                                                                    vinfos[2].indices[0] = _ij8[0];
//                                                                                    vinfos[2].indices[1] = _ij8[1];
//                                                                                    vinfos[2].maxsolutions = _nj8;
//                                                                                    int vfree[0];
//                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j7array[1], cj7array[1], sj7array[1];
                                                            bool j7valid[1]= {false};
//                                                            _nj7 = 1;
//                                                            CheckValue<IkReal> x18=IKPowWithIntegerCheck<IkReal>(pz,-1);
                                                            if (false)//if(!x18.valid)
                                                            {
//                                                                continue;
                                                            }
//                                                            IkReal x17=x18.value;
                                                            if (false)//if( IKabs(((-0.76)*cj8*x17)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x17*(((0.66)+(((0.76)*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.76)*cj8*x17))+IKsqr((x17*(((0.66)+(((0.76)*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
                                                            {
//                                                                continue;
                                                            }
//                                                            j7array[0]=IKatan2(((-0.76)*cj8*x17), (x17*(((0.66)+(((0.76)*sj8))))));
//                                                            sj7array[0]=IKsin(j7array[0]);
//                                                            cj7array[0]=IKcos(j7array[0]);
                                                            if (false)//if( j7array[0] > IKPI )
                                                            {
//                                                                j7array[0]-=IK2PI;
                                                            }
                                                            else if (false)//else if( j7array[0] < -IKPI )
                                                            {
//                                                                j7array[0]+=IK2PI;
                                                            }
//                                                            j7valid[0] = true;
//                                                            for(int ij7 = 0; ij7 < 1; ++ij7)
                                                            {
                                                                if (false)//if( !j7valid[ij7] )
                                                                {
//                                                                    continue;
                                                                }
//                                                                _ij7[0] = ij7;
//                                                                _ij7[1] = -1;
//                                                                for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                {
                                                                    if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                    {
//                                                                        j7valid[iij7]=false;
//                                                                        _ij7[1] = iij7;
//                                                                        break;
                                                                    }
                                                                }
//                                                                j7 = j7array[ij7];
//                                                                cj7 = cj7array[ij7];
//                                                                sj7 = sj7array[ij7];
                                                                {
                                                                    IkReal evalcond[5];
//                                                                    IkReal x19=IKcos(j7);
//                                                                    IkReal x20=IKsin(j7);
//                                                                    IkReal x21=((0.76)*cj8);
//                                                                    IkReal x22=((0.76)*sj8);
//                                                                    IkReal x23=((1.0)*pz);
//                                                                    evalcond[0]=((((-1.0)*x21))+(((-1.0)*x20*x23)));
//                                                                    evalcond[1]=((0.66)+(((-1.0)*x19*x23))+x22);
//                                                                    evalcond[2]=((0.1616)+(((-1.0)*pz*x23))+(((1.32)*pz*x19)));
//                                                                    evalcond[3]=(((x19*x21))+((x20*x22))+(((0.66)*x20)));
//                                                                    evalcond[4]=((((-1.0)*x23))+((x19*x22))+(((-1.0)*x20*x21))+(((0.66)*x19)));
                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                    {
//                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                    bool j6valid[1]= {false};
//                                                                    _nj6 = 1;
//                                                                    j6array[0]=0;
//                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                    if (false)//if( j6array[0] > IKPI )
                                                                    {
//                                                                        j6array[0]-=IK2PI;
                                                                    }
                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                    {
//                                                                        j6array[0]+=IK2PI;
                                                                    }
//                                                                    j6valid[0] = true;
//                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                    {
                                                                        if (false)//if( !j6valid[ij6] )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        _ij6[0] = ij6;
//                                                                        _ij6[1] = -1;
//                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                        {
                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                            {
//                                                                                j6valid[iij6]=false;
//                                                                                _ij6[1] = iij6;
//                                                                                break;
                                                                            }
                                                                        }
//                                                                        j6 = j6array[ij6];
//                                                                        cj6 = cj6array[ij6];
//                                                                        sj6 = sj6array[ij6];

                                                                        {
//                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                            vinfos[0].jointtype = 1;
//                                                                            vinfos[0].foffset = j6;
//                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                            vinfos[1].jointtype = 1;
//                                                                            vinfos[1].foffset = j7;
//                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                            vinfos[2].jointtype = 1;
//                                                                            vinfos[2].foffset = j8;
//                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                            int vfree[0];
//                                                                            solutions.AddSolution(vinfos,vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }

                                            }
                                        }
                                        while(0);
                                        if (false)//if( bgotonextstatement )
                                        {
                                            bool bgotonextstatement = true;
                                            do
                                            {
//                                                evalcond[0]=((IKabs(px))+(IKabs(py)));
                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                {
//                                                    bgotonextstatement=false;
                                                    {
                                                        IkReal j7eval[1];
//                                                        px=0;
//                                                        py=0;
//                                                        pp=pz*pz;
//                                                        j7eval[0]=pz;
                                                        if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  )
                                                        {
                                                            {
                                                                IkReal j7eval[2];
//                                                                px=0;
//                                                                py=0;
//                                                                pp=pz*pz;
//                                                                j7eval[0]=pz;
//                                                                j7eval[1]=((((1.15151515151515)*pz*sj8))+pz);
                                                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                                                {
//                                                                    continue; // 1 cases reached

                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                                        bool j7valid[1]= {false};
//                                                                        _nj7 = 1;
//                                                                        CheckValue<IkReal> x24=IKPowWithIntegerCheck<IkReal>(pz,-1);
                                                                        if (false)//if(!x24.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x25=IKPowWithIntegerCheck<IkReal>(((((412.5)*pz))+(((475.0)*pz*sj8))),-1);
                                                                        if (false)//if(!x25.valid)
                                                                        {
//                                                                            continue;
                                                                        }
                                                                        if (false)//if( IKabs(((-0.76)*cj8*(x24.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x25.value)*(((((-361.0)*(cj8*cj8)))+(((625.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.76)*cj8*(x24.value)))+IKsqr(((x25.value)*(((((-361.0)*(cj8*cj8)))+(((625.0)*(pz*pz)))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        j7array[0]=IKatan2(((-0.76)*cj8*(x24.value)), ((x25.value)*(((((-361.0)*(cj8*cj8)))+(((625.0)*(pz*pz)))))));
//                                                                        sj7array[0]=IKsin(j7array[0]);
//                                                                        cj7array[0]=IKcos(j7array[0]);
                                                                        if (false)//if( j7array[0] > IKPI )
                                                                        {
//                                                                            j7array[0]-=IK2PI;
                                                                        }
                                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                                        {
//                                                                            j7array[0]+=IK2PI;
                                                                        }
//                                                                        j7valid[0] = true;
//                                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                        {
                                                                            if (false)//if( !j7valid[ij7] )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            _ij7[0] = ij7;
//                                                                            _ij7[1] = -1;
//                                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                            {
                                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                                {
//                                                                                    j7valid[iij7]=false;
//                                                                                    _ij7[1] = iij7;
//                                                                                    break;
                                                                                }
                                                                            }
//                                                                            j7 = j7array[ij7];
//                                                                            cj7 = cj7array[ij7];
//                                                                            sj7 = sj7array[ij7];
                                                                            {
                                                                                IkReal evalcond[5];
//                                                                                IkReal x26=IKcos(j7);
//                                                                                IkReal x27=IKsin(j7);
//                                                                                IkReal x28=((0.76)*cj8);
//                                                                                IkReal x29=((0.76)*sj8);
//                                                                                IkReal x30=((1.0)*pz);
//                                                                                evalcond[0]=((((-1.0)*x28))+(((-1.0)*x27*x30)));
//                                                                                evalcond[1]=((0.66)+(((-1.0)*x26*x30))+x29);
//                                                                                evalcond[2]=((0.1616)+(((-1.0)*pz*x30))+(((1.32)*pz*x26)));
//                                                                                evalcond[3]=(((x26*x28))+(((0.66)*x27))+((x27*x29)));
//                                                                                evalcond[4]=((((-1.0)*x30))+(((-1.0)*x27*x28))+((x26*x29))+(((0.66)*x26)));
                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                bool j6valid[1]= {false};
//                                                                                _nj6 = 1;
//                                                                                j6array[0]=0;
//                                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                if (false)//if( j6array[0] > IKPI )
                                                                                {
//                                                                                    j6array[0]-=IK2PI;
                                                                                }
                                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                                {
//                                                                                    j6array[0]+=IK2PI;
                                                                                }
//                                                                                j6valid[0] = true;
//                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                {
                                                                                    if (false)//if( !j6valid[ij6] )
                                                                                    {
//                                                                                        continue;
                                                                                    }
//                                                                                    _ij6[0] = ij6;
//                                                                                    _ij6[1] = -1;
//                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                    {
                                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                        {
//                                                                                            j6valid[iij6]=false;
//                                                                                            _ij6[1] = iij6;
//                                                                                            break;
                                                                                        }
                                                                                    }
//                                                                                    j6 = j6array[ij6];
//                                                                                    cj6 = cj6array[ij6];
//                                                                                    sj6 = sj6array[ij6];

                                                                                    {
//                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                        vinfos[0].jointtype = 1;
//                                                                                        vinfos[0].foffset = j6;
//                                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                                        vinfos[1].jointtype = 1;
//                                                                                        vinfos[1].foffset = j7;
//                                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                                        vinfos[2].jointtype = 1;
//                                                                                        vinfos[2].foffset = j8;
//                                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                                        int vfree[0];
//                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                }

                                                            }

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                bool j7valid[1]= {false};
//                                                                _nj7 = 1;
//                                                                CheckValue<IkReal> x32=IKPowWithIntegerCheck<IkReal>(pz,-1);
                                                                if (false)//if(!x32.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                IkReal x31=x32.value;
                                                                if (false)//if( IKabs(((-0.76)*cj8*x31)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x31*(((0.66)+(((0.76)*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.76)*cj8*x31))+IKsqr((x31*(((0.66)+(((0.76)*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
                                                                {
//                                                                    continue;
                                                                }
//                                                                j7array[0]=IKatan2(((-0.76)*cj8*x31), (x31*(((0.66)+(((0.76)*sj8))))));
//                                                                sj7array[0]=IKsin(j7array[0]);
//                                                                cj7array[0]=IKcos(j7array[0]);
                                                                if (false)//if( j7array[0] > IKPI )
                                                                {
//                                                                    j7array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j7array[0] < -IKPI )
                                                                {
//                                                                    j7array[0]+=IK2PI;
                                                                }
//                                                                j7valid[0] = true;
//                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                {
                                                                    if (false)//if( !j7valid[ij7] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij7[0] = ij7;
//                                                                    _ij7[1] = -1;
//                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                    {
                                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j7valid[iij7]=false;
//                                                                            _ij7[1] = iij7;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j7 = j7array[ij7];
//                                                                    cj7 = cj7array[ij7];
//                                                                    sj7 = sj7array[ij7];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x33=IKcos(j7);
//                                                                        IkReal x34=IKsin(j7);
//                                                                        IkReal x35=((0.76)*cj8);
//                                                                        IkReal x36=((0.76)*sj8);
//                                                                        IkReal x37=((1.0)*pz);
//                                                                        evalcond[0]=((((-1.0)*x35))+(((-1.0)*x34*x37)));
//                                                                        evalcond[1]=((0.66)+(((-1.0)*x33*x37))+x36);
//                                                                        evalcond[2]=((0.1616)+(((-1.0)*pz*x37))+(((1.32)*pz*x33)));
//                                                                        evalcond[3]=(((x34*x36))+(((0.66)*x34))+((x33*x35)));
//                                                                        evalcond[4]=((((-1.0)*x37))+(((0.66)*x33))+(((-1.0)*x34*x35))+((x33*x36)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                        bool j6valid[1]= {false};
//                                                                        _nj6 = 1;
//                                                                        j6array[0]=0;
//                                                                        sj6array[0]=IKsin(j6array[0]);
//                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                        if (false)//if( j6array[0] > IKPI )
                                                                        {
//                                                                            j6array[0]-=IK2PI;
                                                                        }
                                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                                        {
//                                                                            j6array[0]+=IK2PI;
                                                                        }
//                                                                        j6valid[0] = true;
//                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                        {
                                                                            if (false)//if( !j6valid[ij6] )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            _ij6[0] = ij6;
//                                                                            _ij6[1] = -1;
//                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                            {
                                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                {
//                                                                                    j6valid[iij6]=false;
//                                                                                    _ij6[1] = iij6;
//                                                                                    break;
                                                                                }
                                                                            }
//                                                                            j6 = j6array[ij6];
//                                                                            cj6 = cj6array[ij6];
//                                                                            sj6 = sj6array[ij6];

                                                                            {
//                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                vinfos[0].jointtype = 1;
//                                                                                vinfos[0].foffset = j6;
//                                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                                vinfos[0].maxsolutions = _nj6;
//                                                                                vinfos[1].jointtype = 1;
//                                                                                vinfos[1].foffset = j7;
//                                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                                vinfos[1].maxsolutions = _nj7;
//                                                                                vinfos[2].jointtype = 1;
//                                                                                vinfos[2].foffset = j8;
//                                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                                vinfos[2].maxsolutions = _nj8;
//                                                                                int vfree[0];
//                                                                                solutions.AddSolution(vinfos,vfree);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                            }
                                            while(0);
                                            if (false)//if( bgotonextstatement )
                                            {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                    if( 1 )
                                                    {
//                                                        bgotonextstatement=false;
//                                                        continue; // branch miss [j6, j7]

                                                    }
                                                }
                                                while(0);
                                                if( bgotonextstatement )
                                                {
                                                }
                                            }
                                        }
                                    }

                                }
                                else
                                {
                                    {
                                        IkReal j7array[2], cj7array[2], sj7array[2];
                                        bool j7valid[2]= {false};
//                                        _nj7 = 2;
//                                        IkReal x38=((0.66)+(((0.76)*sj8)));
//                                        CheckValue<IkReal> x41 = IKatan2WithCheck(IkReal(x38),IkReal(((-0.76)*cj8)),IKFAST_ATAN2_MAGTHRESH);
                                        if (false)//if(!x41.valid)
                                        {
//                                            continue;
                                        }
//                                        IkReal x39=((1.0)*(x41.value));
                                        if (false)//if((((x38*x38)+(((0.5776)*(cj8*cj8))))) < -0.00001)
                                        {
//                                            continue;
                                        }
//                                        CheckValue<IkReal> x42=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((x38*x38)+(((0.5776)*(cj8*cj8)))))),-1);
                                        if (false)//if(!x42.valid)
                                        {
//                                            continue;
                                        }
                                        if (false)//if( ((pz*(x42.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x42.value))) > 1+IKFAST_SINCOS_THRESH )
                                        {
//                                            continue;
                                        }
//                                        IkReal x40=IKasin((pz*(x42.value)));
//                                        j7array[0]=((((-1.0)*x39))+x40);
//                                        sj7array[0]=IKsin(j7array[0]);
//                                        cj7array[0]=IKcos(j7array[0]);
//                                        j7array[1]=((3.14159265358979)+(((-1.0)*x40))+(((-1.0)*x39)));
//                                        sj7array[1]=IKsin(j7array[1]);
//                                        cj7array[1]=IKcos(j7array[1]);
                                        if (false)//if( j7array[0] > IKPI )
                                        {
//                                            j7array[0]-=IK2PI;
                                        }
                                        else if (false)//else if( j7array[0] < -IKPI )
                                        {
//                                            j7array[0]+=IK2PI;
                                        }
//                                        j7valid[0] = true;
                                        if (false)//if( j7array[1] > IKPI )
                                        {
//                                            j7array[1]-=IK2PI;
                                        }
                                        else if (false)//else if( j7array[1] < -IKPI )
                                        {
//                                            j7array[1]+=IK2PI;
                                        }
//                                        j7valid[1] = true;
//                                        for(int ij7 = 0; ij7 < 2; ++ij7)
                                        {
                                            if (false)//if( !j7valid[ij7] )
                                            {
//                                                continue;
                                            }
//                                            _ij7[0] = ij7;
//                                            _ij7[1] = -1;
//                                            for(int iij7 = ij7+1; iij7 < 2; ++iij7)
                                            {
                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                {
//                                                    j7valid[iij7]=false;
//                                                    _ij7[1] = iij7;
//                                                    break;
                                                }
                                            }
//                                            j7 = j7array[ij7];
//                                            cj7 = cj7array[ij7];
//                                            sj7 = sj7array[ij7];

                                            {
                                                IkReal j6eval[3];
//                                                IkReal x43=py*py;
//                                                IkReal x44=px*px;
//                                                IkReal x45=((38.0)*cj8);
//                                                IkReal x46=((7.0)*cj7);
//                                                IkReal x47=(cj7*x43);
//                                                IkReal x48=(cj7*x44);
//                                                IkReal x49=((50.0)*pz*sj7);
//                                                j6eval[0]=(x48+x47);
//                                                j6eval[1]=((IKabs(((((-1.0)*py*x46))+((px*x49))+((px*x45)))))+(IKabs(((((-1.0)*py*x49))+(((-1.0)*py*x45))+(((-1.0)*px*x46))))));
//                                                j6eval[2]=IKsign(((((50.0)*x47))+(((50.0)*x48))));
                                                if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j6eval[3];
//                                                        IkReal x50=py*py;
//                                                        IkReal x51=px*px;
//                                                        IkReal x52=((38.0)*sj8);
//                                                        IkReal x53=((7.0)*sj7);
//                                                        IkReal x54=((50.0)*cj7*pz);
//                                                        IkReal x55=(sj7*x50);
//                                                        IkReal x56=(sj7*x51);
//                                                        j6eval[0]=(x55+x56);
//                                                        j6eval[1]=((IKabs(((((-1.0)*px*x54))+((px*x52))+(((33.0)*px))+(((-1.0)*py*x53)))))+(IKabs(((((-1.0)*px*x53))+(((-33.0)*py))+(((-1.0)*py*x52))+((py*x54))))));
//                                                        j6eval[2]=IKsign(((((50.0)*x55))+(((50.0)*x56))));
                                                        if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                        {
                                                            {
                                                                IkReal j6eval[3];
//                                                                IkReal x57=py*py;
//                                                                IkReal x58=px*px;
//                                                                IkReal x59=(py*sj7);
//                                                                IkReal x60=((38.0)*sj8);
//                                                                IkReal x61=(px*sj7);
//                                                                IkReal x62=((38.0)*cj7*cj8);
//                                                                j6eval[0]=(x58+x57);
//                                                                j6eval[1]=((IKabs(((((33.0)*x61))+(((-7.0)*py))+((x60*x61))+((px*x62)))))+(IKabs(((((-7.0)*px))+(((-1.0)*x59*x60))+(((-1.0)*py*x62))+(((-33.0)*x59))))));
//                                                                j6eval[2]=IKsign(((((50.0)*x57))+(((50.0)*x58))));
                                                                if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                                {
                                                                    {
                                                                        IkReal evalcond[1];
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
//                                                                            evalcond[0]=((px*px)+(py*py));
                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                            {
//                                                                                bgotonextstatement=false;
                                                                                {
                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                    bool j6valid[1]= {false};
//                                                                                    _nj6 = 1;
//                                                                                    j6array[0]=0;
//                                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                    if (false)//if( j6array[0] > IKPI )
                                                                                    {
//                                                                                        j6array[0]-=IK2PI;
                                                                                    }
                                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                                    {
//                                                                                        j6array[0]+=IK2PI;
                                                                                    }
//                                                                                    j6valid[0] = true;
//                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                    {
                                                                                        if (false)//if( !j6valid[ij6] )
                                                                                        {
//                                                                                            continue;
                                                                                        }
//                                                                                        _ij6[0] = ij6;
//                                                                                        _ij6[1] = -1;
//                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                        {
                                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                            {
//                                                                                                j6valid[iij6]=false;
//                                                                                                _ij6[1] = iij6;
//                                                                                                break;
                                                                                            }
                                                                                        }
//                                                                                        j6 = j6array[ij6];
//                                                                                        cj6 = cj6array[ij6];
//                                                                                        sj6 = sj6array[ij6];

                                                                                        {
//                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                            vinfos[0].jointtype = 1;
//                                                                                            vinfos[0].foffset = j6;
//                                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                                            vinfos[1].jointtype = 1;
//                                                                                            vinfos[1].foffset = j7;
//                                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                                            vinfos[2].jointtype = 1;
//                                                                                            vinfos[2].foffset = j8;
//                                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                                            int vfree[0];
//                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                        }
                                                                                    }
                                                                                }

                                                                            }
                                                                        }
                                                                        while(0);
                                                                        if (false)//if( bgotonextstatement )
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
//                                                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
                                                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                {
//                                                                                    bgotonextstatement=false;
                                                                                    {
                                                                                        IkReal j6eval[3];
//                                                                                        sj7=0;
//                                                                                        cj7=1.0;
//                                                                                        j7=0;
//                                                                                        IkReal x63=py*py;
//                                                                                        IkReal x64=px*px;
//                                                                                        IkReal x65=((38.0)*cj8);
//                                                                                        j6eval[0]=(x63+x64);
//                                                                                        j6eval[1]=IKsign(((((50.0)*x64))+(((50.0)*x63))));
//                                                                                        j6eval[2]=((IKabs(((((-7.0)*py))+((px*x65)))))+(IKabs(((((-7.0)*px))+(((-1.0)*py*x65))))));
                                                                                        if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                                                        {
//                                                                                            continue; // 1 cases reached

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                bool j6valid[1]= {false};
//                                                                                                _nj6 = 1;
//                                                                                                IkReal x66=((38.0)*cj8);
//                                                                                                CheckValue<IkReal> x67=IKPowWithIntegerCheck<IkReal>(IKsign(((((50.0)*(py*py)))+(((50.0)*(px*px))))),-1);
                                                                                                if (false)//if(!x67.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                CheckValue<IkReal> x68 = IKatan2WithCheck(IkReal(((((-7.0)*py))+((px*x66)))),IkReal(((((-7.0)*px))+(((-1.0)*py*x66)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (false)//if(!x68.valid)
                                                                                                {
//                                                                                                    continue;
                                                                                                }
//                                                                                                j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x67.value)))+(x68.value));
//                                                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                                if (false)//if( j6array[0] > IKPI )
                                                                                                {
//                                                                                                    j6array[0]-=IK2PI;
                                                                                                }
                                                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                                                {
//                                                                                                    j6array[0]+=IK2PI;
                                                                                                }
//                                                                                                j6valid[0] = true;
//                                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                {
                                                                                                    if (false)//if( !j6valid[ij6] )
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    _ij6[0] = ij6;
//                                                                                                    _ij6[1] = -1;
//                                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                    {
                                                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
//                                                                                                            j6valid[iij6]=false;
//                                                                                                            _ij6[1] = iij6;
//                                                                                                            break;
                                                                                                        }
                                                                                                    }
//                                                                                                    j6 = j6array[ij6];
//                                                                                                    cj6 = cj6array[ij6];
//                                                                                                    sj6 = sj6array[ij6];
                                                                                                    {
                                                                                                        IkReal evalcond[2];
//                                                                                                        IkReal x69=IKsin(j6);
//                                                                                                        IkReal x70=IKcos(j6);
//                                                                                                        evalcond[0]=((0.14)+((px*x70))+((py*x69)));
//                                                                                                        evalcond[1]=((((-0.76)*cj8))+((px*x69))+(((-1.0)*py*x70)));
                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
//                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                        vinfos[0].foffset = j6;
//                                                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                        vinfos[1].foffset = j7;
//                                                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                        vinfos[2].foffset = j8;
//                                                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                                                        int vfree[0];
//                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                            while(0);
                                                                            if (false)//if( bgotonextstatement )
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
//                                                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
                                                                                    if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                    {
//                                                                                        bgotonextstatement=false;
                                                                                        {
                                                                                            IkReal j6eval[3];
//                                                                                            sj7=0;
//                                                                                            cj7=-1.0;
//                                                                                            j7=3.14159265358979;
//                                                                                            IkReal x71=py*py;
//                                                                                            IkReal x72=px*px;
//                                                                                            IkReal x73=((38.0)*cj8);
//                                                                                            j6eval[0]=((((-1.0)*x72))+(((-1.0)*x71)));
//                                                                                            j6eval[1]=IKsign(((((-50.0)*x72))+(((-50.0)*x71))));
//                                                                                            j6eval[2]=((IKabs(((((7.0)*px))+(((-1.0)*py*x73)))))+(IKabs(((((7.0)*py))+((px*x73))))));
                                                                                            if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                                                            {
//                                                                                                continue; // 1 cases reached

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                    bool j6valid[1]= {false};
//                                                                                                    _nj6 = 1;
//                                                                                                    IkReal x74=((38.0)*cj8);
//                                                                                                    CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal(((((7.0)*py))+((px*x74)))),IkReal(((((7.0)*px))+(((-1.0)*py*x74)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (false)//if(!x75.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    CheckValue<IkReal> x76=IKPowWithIntegerCheck<IkReal>(IKsign(((((-50.0)*(py*py)))+(((-50.0)*(px*px))))),-1);
                                                                                                    if (false)//if(!x76.valid)
                                                                                                    {
//                                                                                                        continue;
                                                                                                    }
//                                                                                                    j6array[0]=((-1.5707963267949)+(x75.value)+(((1.5707963267949)*(x76.value))));
//                                                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                                    if (false)//if( j6array[0] > IKPI )
                                                                                                    {
//                                                                                                        j6array[0]-=IK2PI;
                                                                                                    }
                                                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                                                    {
//                                                                                                        j6array[0]+=IK2PI;
                                                                                                    }
//                                                                                                    j6valid[0] = true;
//                                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                    {
                                                                                                        if (false)//if( !j6valid[ij6] )
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        _ij6[0] = ij6;
//                                                                                                        _ij6[1] = -1;
//                                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                        {
                                                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
//                                                                                                                j6valid[iij6]=false;
//                                                                                                                _ij6[1] = iij6;
//                                                                                                                break;
                                                                                                            }
                                                                                                        }
//                                                                                                        j6 = j6array[ij6];
//                                                                                                        cj6 = cj6array[ij6];
//                                                                                                        sj6 = sj6array[ij6];
                                                                                                        {
                                                                                                            IkReal evalcond[2];
//                                                                                                            IkReal x77=IKcos(j6);
//                                                                                                            IkReal x78=IKsin(j6);
//                                                                                                            evalcond[0]=((0.14)+((py*x78))+((px*x77)));
//                                                                                                            evalcond[1]=(((py*x77))+(((-0.76)*cj8))+(((-1.0)*px*x78)));
                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
//                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                            vinfos[0].foffset = j6;
//                                                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                            vinfos[1].foffset = j7;
//                                                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                            vinfos[2].foffset = j8;
//                                                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                                                            int vfree[0];
//                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                                while(0);
                                                                                if (false)//if( bgotonextstatement )
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
//                                                                                        evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
                                                                                        if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                        {
//                                                                                            bgotonextstatement=false;
                                                                                            {
                                                                                                IkReal j6eval[3];
//                                                                                                sj7=1.0;
//                                                                                                cj7=0;
//                                                                                                j7=1.5707963267949;
//                                                                                                IkReal x79=py*py;
//                                                                                                IkReal x80=px*px;
//                                                                                                IkReal x81=((38.0)*sj8);
//                                                                                                j6eval[0]=(x79+x80);
//                                                                                                j6eval[1]=((IKabs(((((-1.0)*py*x81))+(((-7.0)*px))+(((-33.0)*py)))))+(IKabs(((((-7.0)*py))+((px*x81))+(((33.0)*px))))));
//                                                                                                j6eval[2]=IKsign(((((50.0)*x80))+(((50.0)*x79))));
                                                                                                if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j6eval[3];
//                                                                                                        sj7=1.0;
//                                                                                                        cj7=0;
//                                                                                                        j7=1.5707963267949;
//                                                                                                        IkReal x82=px*px;
//                                                                                                        IkReal x83=py*py;
//                                                                                                        IkReal x84=pz*pz;
//                                                                                                        IkReal x85=((1250.0)*py);
//                                                                                                        IkReal x86=((1250.0)*px);
//                                                                                                        j6eval[0]=((((-1.0)*x82))+(((-1.0)*x83)));
//                                                                                                        j6eval[1]=((IKabs((((x84*x85))+(((-202.0)*py))+((x82*x85))+(((231.0)*px))+((x85*(py*py))))))+(IKabs(((((-1.0)*x86*(px*px)))+(((-1.0)*x83*x86))+(((231.0)*py))+(((-1.0)*x84*x86))+(((202.0)*px))))));
//                                                                                                        j6eval[2]=IKsign(((((-1650.0)*x82))+(((-1650.0)*x83))));
                                                                                                        if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                                                                        {
//                                                                                                            continue; // 1 cases reached

                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                                bool j6valid[1]= {false};
//                                                                                                                _nj6 = 1;
//                                                                                                                IkReal x87=py*py;
//                                                                                                                IkReal x88=px*px;
//                                                                                                                IkReal x89=pz*pz;
//                                                                                                                IkReal x90=((1250.0)*py);
//                                                                                                                IkReal x91=((1250.0)*px);
//                                                                                                                CheckValue<IkReal> x92 = IKatan2WithCheck(IkReal(((((231.0)*py))+(((-1.0)*x87*x91))+(((-1.0)*x91*(px*px)))+(((202.0)*px))+(((-1.0)*x89*x91)))),IkReal(((((-202.0)*py))+((x89*x90))+(((231.0)*px))+((x88*x90))+((x90*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                                if (false)//if(!x92.valid)
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                CheckValue<IkReal> x93=IKPowWithIntegerCheck<IkReal>(IKsign(((((-1650.0)*x87))+(((-1650.0)*x88)))),-1);
                                                                                                                if (false)//if(!x93.valid)
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                j6array[0]=((-1.5707963267949)+(x92.value)+(((1.5707963267949)*(x93.value))));
//                                                                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                                                                cj6array[0]=IKcos(j6array[0]);
                                                                                                                if (false)//if( j6array[0] > IKPI )
                                                                                                                {
//                                                                                                                    j6array[0]-=IK2PI;
                                                                                                                }
                                                                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                                                                {
//                                                                                                                    j6array[0]+=IK2PI;
                                                                                                                }
//                                                                                                                j6valid[0] = true;
//                                                                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                                {
                                                                                                                    if (false)//if( !j6valid[ij6] )
                                                                                                                    {
//                                                                                                                        continue;
                                                                                                                    }
//                                                                                                                    _ij6[0] = ij6;
//                                                                                                                    _ij6[1] = -1;
//                                                                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                                    {
                                                                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                        {
//                                                                                                                            j6valid[iij6]=false;
//                                                                                                                            _ij6[1] = iij6;
//                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
//                                                                                                                    j6 = j6array[ij6];
//                                                                                                                    cj6 = cj6array[ij6];
//                                                                                                                    sj6 = sj6array[ij6];
                                                                                                                    {
                                                                                                                        IkReal evalcond[3];
//                                                                                                                        IkReal x94=IKcos(j6);
//                                                                                                                        IkReal x95=IKsin(j6);
//                                                                                                                        IkReal x96=(px*x95);
//                                                                                                                        IkReal x97=(py*x94);
//                                                                                                                        evalcond[0]=((0.14)+((py*x95))+((px*x94)));
//                                                                                                                        evalcond[1]=((0.66)+(((0.76)*sj8))+x97+(((-1.0)*x96)));
//                                                                                                                        evalcond[2]=((0.1616)+(((-1.0)*(px*px)))+(((-1.32)*x97))+(((-1.0)*(pz*pz)))+(((1.32)*x96))+(((-1.0)*(py*py))));
                                                                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
                                                                                                                        {
//                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
//                                                                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                        vinfos[0].jointtype = 1;
//                                                                                                                        vinfos[0].foffset = j6;
//                                                                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                                                                        vinfos[1].jointtype = 1;
//                                                                                                                        vinfos[1].foffset = j7;
//                                                                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                                                                        vinfos[2].jointtype = 1;
//                                                                                                                        vinfos[2].foffset = j8;
//                                                                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                                                                        int vfree[0];
//                                                                                                                        solutions.AddSolution(vinfos,vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }

                                                                                                        }

                                                                                                    }

                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                        bool j6valid[1]= {false};
//                                                                                                        _nj6 = 1;
//                                                                                                        IkReal x98=((38.0)*sj8);
//                                                                                                        CheckValue<IkReal> x99 = IKatan2WithCheck(IkReal(((((-7.0)*py))+((px*x98))+(((33.0)*px)))),IkReal(((((-7.0)*px))+(((-33.0)*py))+(((-1.0)*py*x98)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                        if (false)//if(!x99.valid)
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        CheckValue<IkReal> x100=IKPowWithIntegerCheck<IkReal>(IKsign(((((50.0)*(py*py)))+(((50.0)*(px*px))))),-1);
                                                                                                        if (false)//if(!x100.valid)
                                                                                                        {
//                                                                                                            continue;
                                                                                                        }
//                                                                                                        j6array[0]=((-1.5707963267949)+(x99.value)+(((1.5707963267949)*(x100.value))));
//                                                                                                        sj6array[0]=IKsin(j6array[0]);
//                                                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                                                        if (false)//if( j6array[0] > IKPI )
                                                                                                        {
//                                                                                                            j6array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j6array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j6valid[0] = true;
//                                                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                        {
                                                                                                            if (false)//if( !j6valid[ij6] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij6[0] = ij6;
//                                                                                                            _ij6[1] = -1;
//                                                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                            {
                                                                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j6valid[iij6]=false;
//                                                                                                                    _ij6[1] = iij6;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j6 = j6array[ij6];
//                                                                                                            cj6 = cj6array[ij6];
//                                                                                                            sj6 = sj6array[ij6];
                                                                                                            {
                                                                                                                IkReal evalcond[3];
//                                                                                                                IkReal x101=IKcos(j6);
//                                                                                                                IkReal x102=IKsin(j6);
//                                                                                                                IkReal x103=(px*x102);
//                                                                                                                IkReal x104=(py*x101);
//                                                                                                                evalcond[0]=((0.14)+((py*x102))+((px*x101)));
//                                                                                                                evalcond[1]=((0.66)+x104+(((0.76)*sj8))+(((-1.0)*x103)));
//                                                                                                                evalcond[2]=((0.1616)+(((-1.0)*(px*px)))+(((-1.32)*x104))+(((1.32)*x103))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j6;
//                                                                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                                                                vinfos[0].maxsolutions = _nj6;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j7;
//                                                                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                                                                vinfos[1].maxsolutions = _nj7;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j8;
//                                                                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                                                                vinfos[2].maxsolutions = _nj8;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                }

                                                                                            }

                                                                                        }
                                                                                    }
                                                                                    while(0);
                                                                                    if (false)//if( bgotonextstatement )
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
//                                                                                            evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
                                                                                            if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                            {
//                                                                                                bgotonextstatement=false;
                                                                                                {
                                                                                                    IkReal j6eval[3];
//                                                                                                    sj7=-1.0;
//                                                                                                    cj7=0;
//                                                                                                    j7=-1.5707963267949;
//                                                                                                    IkReal x105=py*py;
//                                                                                                    IkReal x106=px*px;
//                                                                                                    IkReal x107=((38.0)*sj8);
//                                                                                                    j6eval[0]=((((-1.0)*x106))+(((-1.0)*x105)));
//                                                                                                    j6eval[1]=((IKabs((((px*x107))+(((7.0)*py))+(((33.0)*px)))))+(IKabs(((((7.0)*px))+(((-33.0)*py))+(((-1.0)*py*x107))))));
//                                                                                                    j6eval[2]=IKsign(((((-50.0)*x106))+(((-50.0)*x105))));
                                                                                                    if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j6eval[3];
//                                                                                                            sj7=-1.0;
//                                                                                                            cj7=0;
//                                                                                                            j7=-1.5707963267949;
//                                                                                                            IkReal x108=px*px;
//                                                                                                            IkReal x109=py*py;
//                                                                                                            IkReal x110=pz*pz;
//                                                                                                            IkReal x111=((1250.0)*py);
//                                                                                                            IkReal x112=((1250.0)*px);
//                                                                                                            j6eval[0]=(x108+x109);
//                                                                                                            j6eval[1]=IKsign(((((1650.0)*x109))+(((1650.0)*x108))));
//                                                                                                            j6eval[2]=((IKabs(((((-231.0)*py))+(((-1.0)*x110*x112))+(((-1.0)*x109*x112))+(((202.0)*px))+(((-1.0)*x112*(px*px))))))+(IKabs((((x110*x111))+(((-202.0)*py))+((x111*(py*py)))+(((-231.0)*px))+((x108*x111))))));
                                                                                                            if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                                                                            {
//                                                                                                                continue; // 1 cases reached

                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                                    bool j6valid[1]= {false};
//                                                                                                                    _nj6 = 1;
//                                                                                                                    IkReal x113=py*py;
//                                                                                                                    IkReal x114=px*px;
//                                                                                                                    IkReal x115=pz*pz;
//                                                                                                                    IkReal x116=((1250.0)*py);
//                                                                                                                    IkReal x117=((1250.0)*px);
//                                                                                                                    CheckValue<IkReal> x118 = IKatan2WithCheck(IkReal(((((-1.0)*x113*x117))+(((-1.0)*x115*x117))+(((-231.0)*py))+(((-1.0)*x117*(px*px)))+(((202.0)*px)))),IkReal(((((-202.0)*py))+((x114*x116))+(((-231.0)*px))+((x116*(py*py)))+((x115*x116)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                                    if (false)//if(!x118.valid)
                                                                                                                    {
//                                                                                                                        continue;
                                                                                                                    }
//                                                                                                                    CheckValue<IkReal> x119=IKPowWithIntegerCheck<IkReal>(IKsign(((((1650.0)*x114))+(((1650.0)*x113)))),-1);
                                                                                                                    if (false)//if(!x119.valid)
                                                                                                                    {
//                                                                                                                        continue;
                                                                                                                    }
//                                                                                                                    j6array[0]=((-1.5707963267949)+(x118.value)+(((1.5707963267949)*(x119.value))));
//                                                                                                                    sj6array[0]=IKsin(j6array[0]);
//                                                                                                                    cj6array[0]=IKcos(j6array[0]);
                                                                                                                    if (false)//if( j6array[0] > IKPI )
                                                                                                                    {
//                                                                                                                        j6array[0]-=IK2PI;
                                                                                                                    }
                                                                                                                    else if (false)//else if( j6array[0] < -IKPI )
                                                                                                                    {
//                                                                                                                        j6array[0]+=IK2PI;
                                                                                                                    }
//                                                                                                                    j6valid[0] = true;
//                                                                                                                    for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                                    {
                                                                                                                        if (false)//if( !j6valid[ij6] )
                                                                                                                        {
//                                                                                                                            continue;
                                                                                                                        }
//                                                                                                                        _ij6[0] = ij6;
//                                                                                                                        _ij6[1] = -1;
//                                                                                                                        for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                                        {
                                                                                                                            if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                            {
//                                                                                                                                j6valid[iij6]=false;
//                                                                                                                                _ij6[1] = iij6;
//                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
//                                                                                                                        j6 = j6array[ij6];
//                                                                                                                        cj6 = cj6array[ij6];
//                                                                                                                        sj6 = sj6array[ij6];
                                                                                                                        {
                                                                                                                            IkReal evalcond[3];
//                                                                                                                            IkReal x120=IKsin(j6);
//                                                                                                                            IkReal x121=IKcos(j6);
//                                                                                                                            IkReal x122=(px*x120);
//                                                                                                                            IkReal x123=(py*x121);
//                                                                                                                            evalcond[0]=((0.14)+((py*x120))+((px*x121)));
//                                                                                                                            evalcond[1]=((0.66)+x122+(((0.76)*sj8))+(((-1.0)*x123)));
//                                                                                                                            evalcond[2]=((0.1616)+(((-1.32)*x122))+(((-1.0)*(px*px)))+(((1.32)*x123))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                                                                                            if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
                                                                                                                            {
//                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
//                                                                                                                            IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                            vinfos[0].jointtype = 1;
//                                                                                                                            vinfos[0].foffset = j6;
//                                                                                                                            vinfos[0].indices[0] = _ij6[0];
//                                                                                                                            vinfos[0].indices[1] = _ij6[1];
//                                                                                                                            vinfos[0].maxsolutions = _nj6;
//                                                                                                                            vinfos[1].jointtype = 1;
//                                                                                                                            vinfos[1].foffset = j7;
//                                                                                                                            vinfos[1].indices[0] = _ij7[0];
//                                                                                                                            vinfos[1].indices[1] = _ij7[1];
//                                                                                                                            vinfos[1].maxsolutions = _nj7;
//                                                                                                                            vinfos[2].jointtype = 1;
//                                                                                                                            vinfos[2].foffset = j8;
//                                                                                                                            vinfos[2].indices[0] = _ij8[0];
//                                                                                                                            vinfos[2].indices[1] = _ij8[1];
//                                                                                                                            vinfos[2].maxsolutions = _nj8;
//                                                                                                                            int vfree[0];
//                                                                                                                            solutions.AddSolution(vinfos,vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }

                                                                                                            }

                                                                                                        }

                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                            bool j6valid[1]= {false};
//                                                                                                            _nj6 = 1;
//                                                                                                            IkReal x124=((38.0)*sj8);
//                                                                                                            CheckValue<IkReal> x125 = IKatan2WithCheck(IkReal((((px*x124))+(((7.0)*py))+(((33.0)*px)))),IkReal(((((-1.0)*py*x124))+(((7.0)*px))+(((-33.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
                                                                                                            if (false)//if(!x125.valid)
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            CheckValue<IkReal> x126=IKPowWithIntegerCheck<IkReal>(IKsign(((((-50.0)*(py*py)))+(((-50.0)*(px*px))))),-1);
                                                                                                            if (false)//if(!x126.valid)
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            j6array[0]=((-1.5707963267949)+(x125.value)+(((1.5707963267949)*(x126.value))));
//                                                                                                            sj6array[0]=IKsin(j6array[0]);
//                                                                                                            cj6array[0]=IKcos(j6array[0]);
                                                                                                            if (false)//if( j6array[0] > IKPI )
                                                                                                            {
//                                                                                                                j6array[0]-=IK2PI;
                                                                                                            }
                                                                                                            else if (false)//else if( j6array[0] < -IKPI )
                                                                                                            {
//                                                                                                                j6array[0]+=IK2PI;
                                                                                                            }
//                                                                                                            j6valid[0] = true;
//                                                                                                            for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                            {
                                                                                                                if (false)//if( !j6valid[ij6] )
                                                                                                                {
//                                                                                                                    continue;
                                                                                                                }
//                                                                                                                _ij6[0] = ij6;
//                                                                                                                _ij6[1] = -1;
//                                                                                                                for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                                {
                                                                                                                    if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
//                                                                                                                        j6valid[iij6]=false;
//                                                                                                                        _ij6[1] = iij6;
//                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
//                                                                                                                j6 = j6array[ij6];
//                                                                                                                cj6 = cj6array[ij6];
//                                                                                                                sj6 = sj6array[ij6];
                                                                                                                {
                                                                                                                    IkReal evalcond[3];
//                                                                                                                    IkReal x127=IKsin(j6);
//                                                                                                                    IkReal x128=IKcos(j6);
//                                                                                                                    IkReal x129=(px*x127);
//                                                                                                                    IkReal x130=(py*x128);
//                                                                                                                    evalcond[0]=((0.14)+((py*x127))+((px*x128)));
//                                                                                                                    evalcond[1]=((0.66)+x129+(((0.76)*sj8))+(((-1.0)*x130)));
//                                                                                                                    evalcond[2]=((0.1616)+(((-1.32)*x129))+(((-1.0)*(px*px)))+(((1.32)*x130))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
                                                                                                                    if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
                                                                                                                    {
//                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
//                                                                                                                    IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                    vinfos[0].jointtype = 1;
//                                                                                                                    vinfos[0].foffset = j6;
//                                                                                                                    vinfos[0].indices[0] = _ij6[0];
//                                                                                                                    vinfos[0].indices[1] = _ij6[1];
//                                                                                                                    vinfos[0].maxsolutions = _nj6;
//                                                                                                                    vinfos[1].jointtype = 1;
//                                                                                                                    vinfos[1].foffset = j7;
//                                                                                                                    vinfos[1].indices[0] = _ij7[0];
//                                                                                                                    vinfos[1].indices[1] = _ij7[1];
//                                                                                                                    vinfos[1].maxsolutions = _nj7;
//                                                                                                                    vinfos[2].jointtype = 1;
//                                                                                                                    vinfos[2].foffset = j8;
//                                                                                                                    vinfos[2].indices[0] = _ij8[0];
//                                                                                                                    vinfos[2].indices[1] = _ij8[1];
//                                                                                                                    vinfos[2].maxsolutions = _nj8;
//                                                                                                                    int vfree[0];
//                                                                                                                    solutions.AddSolution(vinfos,vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }

                                                                                                    }

                                                                                                }

                                                                                            }
                                                                                        }
                                                                                        while(0);
                                                                                        if (false)//if( bgotonextstatement )
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
//                                                                                                evalcond[0]=((IKabs(px))+(IKabs(py)));
                                                                                                if (false)//if( IKabs(evalcond[0]) < 0.0000050000000000  )
                                                                                                {
//                                                                                                    bgotonextstatement=false;
                                                                                                    {
                                                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                                                        bool j6valid[1]= {false};
//                                                                                                        _nj6 = 1;
//                                                                                                        j6array[0]=0;
//                                                                                                        sj6array[0]=IKsin(j6array[0]);
//                                                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                                                        if (false)//if( j6array[0] > IKPI )
                                                                                                        {
//                                                                                                            j6array[0]-=IK2PI;
                                                                                                        }
                                                                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                                                                        {
//                                                                                                            j6array[0]+=IK2PI;
                                                                                                        }
//                                                                                                        j6valid[0] = true;
//                                                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                                                        {
                                                                                                            if (false)//if( !j6valid[ij6] )
                                                                                                            {
//                                                                                                                continue;
                                                                                                            }
//                                                                                                            _ij6[0] = ij6;
//                                                                                                            _ij6[1] = -1;
//                                                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                                                            {
                                                                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
//                                                                                                                    j6valid[iij6]=false;
//                                                                                                                    _ij6[1] = iij6;
//                                                                                                                    break;
                                                                                                                }
                                                                                                            }
//                                                                                                            j6 = j6array[ij6];
//                                                                                                            cj6 = cj6array[ij6];
//                                                                                                            sj6 = sj6array[ij6];

                                                                                                            {
//                                                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                                                vinfos[0].jointtype = 1;
//                                                                                                                vinfos[0].foffset = j6;
//                                                                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                                                                vinfos[0].maxsolutions = _nj6;
//                                                                                                                vinfos[1].jointtype = 1;
//                                                                                                                vinfos[1].foffset = j7;
//                                                                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                                                                vinfos[1].maxsolutions = _nj7;
//                                                                                                                vinfos[2].jointtype = 1;
//                                                                                                                vinfos[2].foffset = j8;
//                                                                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                                                                vinfos[2].maxsolutions = _nj8;
//                                                                                                                int vfree[0];
//                                                                                                                solutions.AddSolution(vinfos,vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                }
                                                                                            }
                                                                                            while(0);
                                                                                            if (false)//if( bgotonextstatement )
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    if( 1 )
                                                                                                    {
//                                                                                                        bgotonextstatement=false;
//                                                                                                        continue; // branch miss [j6]

                                                                                                    }
                                                                                                }
                                                                                                while(0);
                                                                                                if( bgotonextstatement )
                                                                                                {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                                        bool j6valid[1]= {false};
//                                                                        _nj6 = 1;
//                                                                        IkReal x131=(py*sj7);
//                                                                        IkReal x132=((38.0)*sj8);
//                                                                        IkReal x133=(px*sj7);
//                                                                        IkReal x134=((38.0)*cj7*cj8);
//                                                                        CheckValue<IkReal> x135=IKPowWithIntegerCheck<IkReal>(IKsign(((((50.0)*(py*py)))+(((50.0)*(px*px))))),-1);
                                                                        if (false)//if(!x135.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x136 = IKatan2WithCheck(IkReal(((((-7.0)*py))+((px*x134))+(((33.0)*x133))+((x132*x133)))),IkReal(((((-1.0)*py*x134))+(((-7.0)*px))+(((-33.0)*x131))+(((-1.0)*x131*x132)))),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x136.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x135.value)))+(x136.value));
//                                                                        sj6array[0]=IKsin(j6array[0]);
//                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                        if (false)//if( j6array[0] > IKPI )
                                                                        {
//                                                                            j6array[0]-=IK2PI;
                                                                        }
                                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                                        {
//                                                                            j6array[0]+=IK2PI;
                                                                        }
//                                                                        j6valid[0] = true;
//                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                        {
                                                                            if (false)//if( !j6valid[ij6] )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            _ij6[0] = ij6;
//                                                                            _ij6[1] = -1;
//                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                            {
                                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                {
//                                                                                    j6valid[iij6]=false;
//                                                                                    _ij6[1] = iij6;
//                                                                                    break;
                                                                                }
                                                                            }
//                                                                            j6 = j6array[ij6];
//                                                                            cj6 = cj6array[ij6];
//                                                                            sj6 = sj6array[ij6];
                                                                            {
                                                                                IkReal evalcond[5];
//                                                                                IkReal x137=IKsin(j6);
//                                                                                IkReal x138=IKcos(j6);
//                                                                                IkReal x139=((1.0)*cj7);
//                                                                                IkReal x140=((0.76)*sj8);
//                                                                                IkReal x141=((1.0)*sj7);
//                                                                                IkReal x142=((0.76)*cj8);
//                                                                                IkReal x143=((1.32)*sj7);
//                                                                                IkReal x144=(py*x138);
//                                                                                IkReal x145=(px*x137);
//                                                                                evalcond[0]=((0.14)+((px*x138))+((py*x137)));
//                                                                                evalcond[1]=(((cj7*x145))+(((-1.0)*x142))+(((-1.0)*pz*x141))+(((-1.0)*x139*x144)));
//                                                                                evalcond[2]=((0.66)+(((-1.0)*pz*x139))+x140+((sj7*x144))+(((-1.0)*x141*x145)));
//                                                                                evalcond[3]=(((cj7*x142))+x144+((sj7*x140))+(((0.66)*sj7))+(((-1.0)*x145)));
//                                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((-1.0)*x143*x144))+(((-1.0)*(pz*pz)))+(((1.32)*cj7*pz))+(((-1.0)*(py*py)))+((x143*x145)));
                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
//                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                vinfos[0].jointtype = 1;
//                                                                                vinfos[0].foffset = j6;
//                                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                                vinfos[0].maxsolutions = _nj6;
//                                                                                vinfos[1].jointtype = 1;
//                                                                                vinfos[1].foffset = j7;
//                                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                                vinfos[1].maxsolutions = _nj7;
//                                                                                vinfos[2].jointtype = 1;
//                                                                                vinfos[2].foffset = j8;
//                                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                                vinfos[2].maxsolutions = _nj8;
//                                                                                int vfree[0];
//                                                                                solutions.AddSolution(vinfos,vfree);
                                                                            }
                                                                        }
                                                                    }

                                                                }

                                                            }

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                bool j6valid[1]= {false};
//                                                                _nj6 = 1;
//                                                                IkReal x146=((7.0)*sj7);
//                                                                IkReal x147=((50.0)*sj7);
//                                                                IkReal x148=((38.0)*sj8);
//                                                                IkReal x149=((50.0)*cj7*pz);
//                                                                CheckValue<IkReal> x150=IKPowWithIntegerCheck<IkReal>(IKsign((((x147*(px*px)))+((x147*(py*py))))),-1);
                                                                if (false)//if(!x150.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x151 = IKatan2WithCheck(IkReal(((((-1.0)*py*x146))+(((-1.0)*px*x149))+(((33.0)*px))+((px*x148)))),IkReal(((((-1.0)*py*x148))+(((-1.0)*px*x146))+(((-33.0)*py))+((py*x149)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x151.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x150.value)))+(x151.value));
//                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                cj6array[0]=IKcos(j6array[0]);
                                                                if (false)//if( j6array[0] > IKPI )
                                                                {
//                                                                    j6array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                {
//                                                                    j6array[0]+=IK2PI;
                                                                }
//                                                                j6valid[0] = true;
//                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                {
                                                                    if (false)//if( !j6valid[ij6] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij6[0] = ij6;
//                                                                    _ij6[1] = -1;
//                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                    {
                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j6valid[iij6]=false;
//                                                                            _ij6[1] = iij6;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j6 = j6array[ij6];
//                                                                    cj6 = cj6array[ij6];
//                                                                    sj6 = sj6array[ij6];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x152=IKsin(j6);
//                                                                        IkReal x153=IKcos(j6);
//                                                                        IkReal x154=((1.0)*cj7);
//                                                                        IkReal x155=((0.76)*sj8);
//                                                                        IkReal x156=((1.0)*sj7);
//                                                                        IkReal x157=((0.76)*cj8);
//                                                                        IkReal x158=((1.32)*sj7);
//                                                                        IkReal x159=(py*x153);
//                                                                        IkReal x160=(px*x152);
//                                                                        evalcond[0]=((0.14)+((px*x153))+((py*x152)));
//                                                                        evalcond[1]=((((-1.0)*x157))+(((-1.0)*x154*x159))+((cj7*x160))+(((-1.0)*pz*x156)));
//                                                                        evalcond[2]=((0.66)+(((-1.0)*pz*x154))+x155+((sj7*x159))+(((-1.0)*x156*x160)));
//                                                                        evalcond[3]=(((cj7*x157))+x159+((sj7*x155))+(((-1.0)*x160))+(((0.66)*sj7)));
//                                                                        evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((-1.0)*x158*x159))+(((-1.0)*(pz*pz)))+(((1.32)*cj7*pz))+((x158*x160))+(((-1.0)*(py*py))));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j6;
//                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j7;
//                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j8;
//                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                        bool j6valid[1]= {false};
//                                                        _nj6 = 1;
//                                                        IkReal x161=((50.0)*cj7);
//                                                        IkReal x162=((38.0)*cj8);
//                                                        IkReal x163=((7.0)*cj7);
//                                                        IkReal x164=((50.0)*pz*sj7);
//                                                        CheckValue<IkReal> x165=IKPowWithIntegerCheck<IkReal>(IKsign((((x161*(py*py)))+((x161*(px*px))))),-1);
                                                        if (false)//if(!x165.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal(((((-1.0)*py*x163))+((px*x162))+((px*x164)))),IkReal(((((-1.0)*py*x164))+(((-1.0)*py*x162))+(((-1.0)*px*x163)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x166.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x165.value)))+(x166.value));
//                                                        sj6array[0]=IKsin(j6array[0]);
//                                                        cj6array[0]=IKcos(j6array[0]);
                                                        if (false)//if( j6array[0] > IKPI )
                                                        {
//                                                            j6array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                        {
//                                                            j6array[0]+=IK2PI;
                                                        }
//                                                        j6valid[0] = true;
//                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                        {
                                                            if (false)//if( !j6valid[ij6] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij6[0] = ij6;
//                                                            _ij6[1] = -1;
//                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                            {
                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j6valid[iij6]=false;
//                                                                    _ij6[1] = iij6;
//                                                                    break;
                                                                }
                                                            }
//                                                            j6 = j6array[ij6];
//                                                            cj6 = cj6array[ij6];
//                                                            sj6 = sj6array[ij6];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x167=IKsin(j6);
//                                                                IkReal x168=IKcos(j6);
//                                                                IkReal x169=((1.0)*cj7);
//                                                                IkReal x170=((0.76)*sj8);
//                                                                IkReal x171=((1.0)*sj7);
//                                                                IkReal x172=((0.76)*cj8);
//                                                                IkReal x173=((1.32)*sj7);
//                                                                IkReal x174=(py*x168);
//                                                                IkReal x175=(px*x167);
//                                                                evalcond[0]=((0.14)+((py*x167))+((px*x168)));
//                                                                evalcond[1]=((((-1.0)*x172))+((cj7*x175))+(((-1.0)*pz*x171))+(((-1.0)*x169*x174)));
//                                                                evalcond[2]=((0.66)+(((-1.0)*pz*x169))+x170+((sj7*x174))+(((-1.0)*x171*x175)));
//                                                                evalcond[3]=(((cj7*x172))+(((-1.0)*x175))+x174+(((0.66)*sj7))+((sj7*x170)));
//                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+((x173*x175))+(((-1.0)*(pz*pz)))+(((1.32)*cj7*pz))+(((-1.0)*(py*py)))+(((-1.0)*x173*x174)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j6;
//                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                vinfos[0].maxsolutions = _nj6;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j7;
//                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                vinfos[1].maxsolutions = _nj7;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j8;
//                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                vinfos[2].maxsolutions = _nj8;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                        }
                                    }

                                }

                            }

                        }
                        else
                        {
                            {
                                IkReal j6array[2], cj6array[2], sj6array[2];
                                bool j6valid[2]= {false};
                                _nj6 = 2;
                                CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
                                if(!x178.valid)
                                {
//                                    continue;
                                }
                                IkReal x176=((1.0)*(x178.value));
                                if((((px*px)+(py*py))) < -0.00001)
                                {
//                                    continue;
                                }
                                CheckValue<IkReal> x179=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
                                if(!x179.valid)
                                {
//                                    continue;
                                }
                                if( (((0.14)*(x179.value))) < -1-IKFAST_SINCOS_THRESH || (((0.14)*(x179.value))) > 1+IKFAST_SINCOS_THRESH )
                                {
//                                    continue;
                                }
                                IkReal x177=IKasin(((0.14)*(x179.value)));
                                j6array[0]=((((-1.0)*x176))+(((-1.0)*x177)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                j6array[1]=((3.14159265358979)+(((-1.0)*x176))+x177);
                                sj6array[1]=IKsin(j6array[1]);
                                cj6array[1]=IKcos(j6array[1]);
                                if( j6array[0] > IKPI )
                                {
//                                    j6array[0]-=IK2PI;
                                }
                                else if( j6array[0] < -IKPI )
                                {
                                    j6array[0]+=IK2PI;
                                }
                                j6valid[0] = true;
                                if( j6array[1] > IKPI )
                                {
//                                    j6array[1]-=IK2PI;
                                }
                                else if( j6array[1] < -IKPI )
                                {
//                                    j6array[1]+=IK2PI;
                                }
                                j6valid[1] = true;
                                for(int ij6 = 0; ij6 < 2; ++ij6)
                                {
                                    if( !j6valid[ij6] )
                                    {
//                                        continue;
                                    }
                                    _ij6[0] = ij6;
                                    _ij6[1] = -1;
                                    for(int iij6 = ij6+1; iij6 < 2; ++iij6)
                                    {
                                        if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j6valid[iij6]=false;
//                                            _ij6[1] = iij6;
//                                            break;
                                        }
                                    }
                                    j6 = j6array[ij6];
                                    cj6 = cj6array[ij6];
                                    sj6 = sj6array[ij6];

                                    {
                                        IkReal j7eval[3];
                                        IkReal x180=((475.0)*pz);
                                        IkReal x181=(cj6*py);
                                        IkReal x182=(px*sj6);
                                        IkReal x183=((475.0)*cj8);
                                        IkReal x184=((475.0)*sj8);
                                        j7eval[0]=((-1.00996810207337)+(((-1.0)*sj8)));
                                        j7eval[1]=IKsign(((-633.25)+(((-627.0)*sj8))));
                                        j7eval[2]=((IKabs(((((412.5)*x181))+(((-412.5)*x182))+((cj8*x180))+(((-1.0)*x182*x184))+((x181*x184)))))+(IKabs(((((-1.0)*sj8*x180))+(((-412.5)*pz))+(((-1.0)*x182*x183))+((x181*x183))))));
                                        if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j7eval[3];
//                                                IkReal x185=(cj8*pz);
//                                                IkReal x186=(px*sj6);
//                                                IkReal x187=(cj6*py);
//                                                IkReal x188=((19.0)*sj8);
//                                                IkReal x189=((25.0)*pz);
//                                                IkReal x190=((1.15151515151515)*sj8);
//                                                j7eval[0]=((((1.15151515151515)*x185))+((x186*x190))+(((-1.0)*x187))+x186+(((-1.0)*x187*x190)));
//                                                j7eval[1]=((IKabs(((25.33)+(((-14.44)*(cj8*cj8)))+(((-1.0)*pz*x189))+(((25.08)*sj8)))))+(IKabs((((x186*x189))+(((-1.0)*x187*x189))+(((12.54)*cj8))+(((14.44)*cj8*sj8))))));
//                                                j7eval[2]=IKsign((((x186*x188))+(((19.0)*x185))+(((-1.0)*x187*x188))+(((-16.5)*x187))+(((16.5)*x186))));
                                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j7eval[3];
//                                                        IkReal x191=cj6*cj6;
//                                                        IkReal x192=px*px;
//                                                        IkReal x193=pz*pz;
//                                                        IkReal x194=py*py;
//                                                        IkReal x195=((19.0)*cj8);
//                                                        IkReal x196=(cj6*py);
//                                                        IkReal x197=(px*sj6);
//                                                        IkReal x198=((19.0)*sj8);
//                                                        IkReal x199=((25.0)*x192);
//                                                        IkReal x200=(x191*x194);
//                                                        j7eval[0]=((((-1.0)*x192))+(((-1.0)*x193))+((x191*x192))+(((2.0)*x196*x197))+(((-1.0)*x200)));
//                                                        j7eval[1]=IKsign(((((50.0)*x196*x197))+(((-25.0)*x193))+(((-1.0)*x199))+((x191*x199))+(((-25.0)*x200))));
//                                                        j7eval[2]=((IKabs(((((-1.0)*x197*x198))+((x196*x198))+(((-16.5)*x197))+(((16.5)*x196))+((pz*x195)))))+(IKabs(((((-1.0)*pz*x198))+(((-1.0)*x195*x197))+((x195*x196))+(((-16.5)*pz))))));
                                                        if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // no branches [j7]

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                                bool j7valid[1]= {false};
//                                                                _nj7 = 1;
//                                                                IkReal x201=px*px;
//                                                                IkReal x202=cj6*cj6;
//                                                                IkReal x203=(px*sj6);
//                                                                IkReal x204=((19.0)*cj8);
//                                                                IkReal x205=(cj6*py);
//                                                                IkReal x206=((19.0)*sj8);
//                                                                IkReal x207=((25.0)*x201);
//                                                                CheckValue<IkReal> x208=IKPowWithIntegerCheck<IkReal>(IKsign(((((50.0)*x203*x205))+(((-1.0)*x207))+((x202*x207))+(((-25.0)*(pz*pz)))+(((-25.0)*x202*(py*py))))),-1);
                                                                if (false)//if(!x208.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x209 = IKatan2WithCheck(IkReal(((((-1.0)*x203*x206))+((x205*x206))+((pz*x204))+(((16.5)*x205))+(((-16.5)*x203)))),IkReal(((((-1.0)*x203*x204))+(((-1.0)*pz*x206))+((x204*x205))+(((-16.5)*pz)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x209.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x208.value)))+(x209.value));
//                                                                sj7array[0]=IKsin(j7array[0]);
//                                                                cj7array[0]=IKcos(j7array[0]);
                                                                if (false)//if( j7array[0] > IKPI )
                                                                {
//                                                                    j7array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j7array[0] < -IKPI )
                                                                {
//                                                                    j7array[0]+=IK2PI;
                                                                }
//                                                                j7valid[0] = true;
//                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                {
                                                                    if (false)//if( !j7valid[ij7] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij7[0] = ij7;
//                                                                    _ij7[1] = -1;
//                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                    {
                                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j7valid[iij7]=false;
//                                                                            _ij7[1] = iij7;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j7 = j7array[ij7];
//                                                                    cj7 = cj7array[ij7];
//                                                                    sj7 = sj7array[ij7];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x210=IKcos(j7);
//                                                                        IkReal x211=IKsin(j7);
//                                                                        IkReal x212=((0.76)*sj8);
//                                                                        IkReal x213=((1.0)*pz);
//                                                                        IkReal x214=((0.76)*cj8);
//                                                                        IkReal x215=(cj6*py);
//                                                                        IkReal x216=(px*sj6);
//                                                                        IkReal x217=((1.0)*x216);
//                                                                        IkReal x218=(x211*x215);
//                                                                        evalcond[0]=(((x210*x212))+(((0.66)*x210))+(((-1.0)*x211*x214))+(((-1.0)*x213)));
//                                                                        evalcond[1]=(((x210*x216))+(((-1.0)*x211*x213))+(((-1.0)*x214))+(((-1.0)*x210*x215)));
//                                                                        evalcond[2]=((0.66)+x212+x218+(((-1.0)*x210*x213))+(((-1.0)*x211*x217)));
//                                                                        evalcond[3]=(((x210*x214))+((x211*x212))+x215+(((0.66)*x211))+(((-1.0)*x217)));
//                                                                        evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((-1.0)*pz*x213))+(((1.32)*x211*x216))+(((-1.32)*x218))+(((1.32)*pz*x210))+(((-1.0)*(py*py))));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j6;
//                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j7;
//                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j8;
//                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j7array[1], cj7array[1], sj7array[1];
                                                        bool j7valid[1]= {false};
//                                                        _nj7 = 1;
//                                                        IkReal x219=(px*sj6);
//                                                        IkReal x220=(cj6*py);
//                                                        IkReal x221=((19.0)*sj8);
//                                                        IkReal x222=((25.0)*pz);
//                                                        CheckValue<IkReal> x223 = IKatan2WithCheck(IkReal(((25.33)+(((-14.44)*(cj8*cj8)))+(((25.08)*sj8))+(((-1.0)*pz*x222)))),IkReal((((x219*x222))+(((12.54)*cj8))+(((-1.0)*x220*x222))+(((14.44)*cj8*sj8)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x223.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x224=IKPowWithIntegerCheck<IkReal>(IKsign(((((16.5)*x219))+((x219*x221))+(((-1.0)*x220*x221))+(((-16.5)*x220))+(((19.0)*cj8*pz)))),-1);
                                                        if (false)//if(!x224.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j7array[0]=((-1.5707963267949)+(x223.value)+(((1.5707963267949)*(x224.value))));
//                                                        sj7array[0]=IKsin(j7array[0]);
//                                                        cj7array[0]=IKcos(j7array[0]);
                                                        if (false)//if( j7array[0] > IKPI )
                                                        {
//                                                            j7array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                        {
//                                                            j7array[0]+=IK2PI;
                                                        }
//                                                        j7valid[0] = true;
//                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                        {
                                                            if (false)//if( !j7valid[ij7] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij7[0] = ij7;
//                                                            _ij7[1] = -1;
//                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                            {
                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j7valid[iij7]=false;
//                                                                    _ij7[1] = iij7;
//                                                                    break;
                                                                }
                                                            }
//                                                            j7 = j7array[ij7];
//                                                            cj7 = cj7array[ij7];
//                                                            sj7 = sj7array[ij7];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x225=IKcos(j7);
//                                                                IkReal x226=IKsin(j7);
//                                                                IkReal x227=((0.76)*sj8);
//                                                                IkReal x228=((1.0)*pz);
//                                                                IkReal x229=((0.76)*cj8);
//                                                                IkReal x230=(cj6*py);
//                                                                IkReal x231=(px*sj6);
//                                                                IkReal x232=((1.0)*x231);
//                                                                IkReal x233=(x226*x230);
//                                                                evalcond[0]=(((x225*x227))+(((0.66)*x225))+(((-1.0)*x226*x229))+(((-1.0)*x228)));
//                                                                evalcond[1]=(((x225*x231))+(((-1.0)*x226*x228))+(((-1.0)*x229))+(((-1.0)*x225*x230)));
//                                                                evalcond[2]=((0.66)+(((-1.0)*x225*x228))+x227+x233+(((-1.0)*x226*x232)));
//                                                                evalcond[3]=(((x225*x229))+(((-1.0)*x232))+x230+(((0.66)*x226))+((x226*x227)));
//                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((-1.32)*x233))+(((1.32)*x226*x231))+(((1.32)*pz*x225))+(((-1.0)*pz*x228))+(((-1.0)*(py*py))));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j6;
//                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                vinfos[0].maxsolutions = _nj6;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j7;
//                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                vinfos[1].maxsolutions = _nj7;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j8;
//                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                vinfos[2].maxsolutions = _nj8;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                bool j7valid[1]= {false};
                                                _nj7 = 1;
                                                IkReal x234=((475.0)*pz);
                                                IkReal x235=(cj6*py);
                                                IkReal x236=(px*sj6);
                                                IkReal x237=((475.0)*cj8);
                                                IkReal x238=((475.0)*sj8);
                                                CheckValue<IkReal> x239=IKPowWithIntegerCheck<IkReal>(IKsign(((-633.25)+(((-627.0)*sj8)))),-1);
                                                if(!x239.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x240 = IKatan2WithCheck(IkReal((((cj8*x234))+(((-412.5)*x236))+((x235*x238))+(((-1.0)*x236*x238))+(((412.5)*x235)))),IkReal(((((-1.0)*sj8*x234))+(((-412.5)*pz))+((x235*x237))+(((-1.0)*x236*x237)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x240.valid)
                                                {
//                                                    continue;
                                                }
                                                j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x239.value)))+(x240.value));
                                                sj7array[0]=IKsin(j7array[0]);
                                                cj7array[0]=IKcos(j7array[0]);
                                                if( j7array[0] > IKPI )
                                                {
//                                                    j7array[0]-=IK2PI;
                                                }
                                                else if( j7array[0] < -IKPI )
                                                {
                                                    j7array[0]+=IK2PI;
                                                }
                                                j7valid[0] = true;
                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                {
                                                    if( !j7valid[ij7] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij7[0] = ij7;
                                                    _ij7[1] = -1;
                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                    {
                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j7valid[iij7]=false;
//                                                            _ij7[1] = iij7;
//                                                            break;
                                                        }
                                                    }
                                                    j7 = j7array[ij7];
                                                    cj7 = cj7array[ij7];
                                                    sj7 = sj7array[ij7];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x241=IKcos(j7);
                                                        IkReal x242=IKsin(j7);
                                                        IkReal x243=((0.76)*sj8);
                                                        IkReal x244=((1.0)*pz);
                                                        IkReal x245=((0.76)*cj8);
                                                        IkReal x246=(cj6*py);
                                                        IkReal x247=(px*sj6);
                                                        IkReal x248=((1.0)*x247);
                                                        IkReal x249=(x242*x246);
                                                        evalcond[0]=((((-1.0)*x242*x245))+(((0.66)*x241))+((x241*x243))+(((-1.0)*x244)));
                                                        evalcond[1]=((((-1.0)*x242*x244))+(((-1.0)*x241*x246))+((x241*x247))+(((-1.0)*x245)));
                                                        evalcond[2]=((0.66)+(((-1.0)*x242*x248))+(((-1.0)*x241*x244))+x243+x249);
                                                        evalcond[3]=((((0.66)*x242))+x246+((x241*x245))+((x242*x243))+(((-1.0)*x248)));
                                                        evalcond[4]=((0.1616)+(((-1.0)*pz*x244))+(((-1.0)*(px*px)))+(((-1.32)*x249))+(((1.32)*pz*x241))+(((-1.0)*(py*py)))+(((1.32)*x242*x247)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j6;
                                                        vinfos[0].indices[0] = _ij6[0];
                                                        vinfos[0].indices[1] = _ij6[1];
                                                        vinfos[0].maxsolutions = _nj6;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j7;
                                                        vinfos[1].indices[0] = _ij7[0];
                                                        vinfos[1].indices[1] = _ij7[1];
                                                        vinfos[1].maxsolutions = _nj7;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j8;
                                                        vinfos[2].indices[0] = _ij8[0];
                                                        vinfos[2].indices[1] = _ij8[1];
                                                        vinfos[2].maxsolutions = _nj8;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }

                        }

                    }
                }
            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Prototype (dbd83885b2b27d2202afadb037c40abc)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
