#include <ToyWalker.h>
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wreturn-type"
#define IKFAST_NO_MAIN
#define IKFAST_REAL double
#define IKFAST_NAMESPACE kinematics_ikfast_right_foot_translation3d
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-07-08 01:12:25.280955
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
    return fabsf(f);
}
inline double IKabs(double f)
{
    return fabs(f);
}

inline float IKsqr(float f)
{
    return f*f;
}
inline double IKsqr(double f)
{
    return f*f;
}

inline float IKlog(float f)
{
    return logf(f);
}
inline double IKlog(double f)
{
    return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(-IKPI_2);
    }
    else if( f >= 1 )
    {
        return float(IKPI_2);
    }
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
//        return -IKPI_2;
    }
    else if( f >= 1 )
    {
//        return IKPI_2;
    }
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0)
    {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return float(IKPI);
    }
    else if( f >= 1 )
    {
        return float(0);
    }
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if( f <= -1 )
    {
        return IKPI;
    }
    else if( f >= 1 )
    {
        return 0;
    }
    return acos(f);
}
inline float IKsin(float f)
{
    return sinf(f);
}
inline double IKsin(double f)
{
    return sin(f);
}
inline float IKcos(float f)
{
    return cosf(f);
}
inline double IKcos(double f)
{
    return cos(f);
}
inline float IKtan(float f)
{
    return tanf(f);
}
inline double IKtan(double f)
{
    return tan(f);
}
inline float IKsqrt(float f)
{
    if( f <= 0.0f )
    {
        return 0.0f;
    }
    return sqrtf(f);
}
inline double IKsqrt(double f)
{
    if( f <= 0.0 )
    {
//        return 0.0;
    }
    return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx)
{
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx)
{
    if( isnan(fy) )
    {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
    {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) )
    {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH )
        {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f)
{
    if( f > 0 )
    {
        return float(1);
    }
    else if( f < 0 )
    {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f)
{
    if( f > 0 )
    {
//        return 1.0;
    }
    else if( f < 0 )
    {
        return -1.0;
    }
//    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 )
    {
//        ret.value = 1.0;
//        return ret;
    }
    else if( n == 1 )
    {
//        ret.value = f;
//        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
//            ret.valid = false;
//            ret.value = (T)1.0e30;
//            return ret;
        }
        if( n == -1 )
        {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

//    int num = n > 0 ? n : -n;
    if (false)//if( num == 2 )
    {
//        ret.value = f*f;
    }
    else if (false)//else if( num == 3 )
    {
//        ret.value = f*f*f;
    }
    else
    {
//        ret.value = 1.0;
//        while(num>0)
        {
            if (false)//if( num & 1 )
            {
//                ret.value *= f;
            }
//            num >>= 1;
//            f *= f;
        }
    }

    if (false)//if( n < 0 )
    {
//        ret.value = T(1.0)/ret.value;
    }
//    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
    IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
    x0=IKsin(j[0]);
    x1=IKsin(j[1]);
    x2=IKcos(j[2]);
    x3=IKcos(j[1]);
    x4=IKsin(j[2]);
    x5=IKcos(j[0]);
    x6=((0.76)*x4);
    x7=(x1*x5);
    x8=(x0*x1);
    x9=((0.76)*x2*x3);
    eetrans[0]=((0.312)+((x0*x9))+(((0.66)*x8))+(((-0.14)*x5))+((x6*x8)));
    eetrans[1]=((-0.74)+(((0.76)*x1*x2))+(((-0.66)*x3))+(((-1.0)*x3*x6)));
    eetrans[2]=((-0.06)+(((-1.0)*x6*x7))+(((-0.66)*x7))+(((-0.14)*x0))+(((-1.0)*x5*x9)));
}

IKFAST_API int GetNumFreeParameters()
{
//    return 0;
}
IKFAST_API int* GetFreeParameters()
{
//    return NULL;
}
IKFAST_API int GetNumJoints()
{
//    return 3;
}

IKFAST_API int GetIkRealSize()
{
//    return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
//    return 0x33000003;
}

class IKSolver
{
public:
    IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
    unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
    {
        j6=numeric_limits<IkReal>::quiet_NaN();
        _ij6[0] = -1;
        _ij6[1] = -1;
        _nj6 = -1;
        j7=numeric_limits<IkReal>::quiet_NaN();
        _ij7[0] = -1;
        _ij7[1] = -1;
        _nj7 = -1;
        j8=numeric_limits<IkReal>::quiet_NaN();
        _ij8[0] = -1;
        _ij8[1] = -1;
        _nj8 = -1;
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_px=((-0.312)+px);
            new_py=((0.06)+pz);
            new_pz=((-0.74)+(((-1.0)*py)));
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=((px*px)+(py*py)+(pz*pz));
            {
                IkReal j8array[2], cj8array[2], sj8array[2];
                bool j8valid[2]= {false};
                _nj8 = 2;
                sj8array[0]=((-1.02950558213716)+(((0.996810207336523)*(py*py)))+(((0.996810207336523)*(px*px)))+(((0.996810207336523)*(pz*pz))));
                if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
                {
                    j8valid[0] = j8valid[1] = true;
                    j8array[0] = IKasin(sj8array[0]);
                    cj8array[0] = IKcos(j8array[0]);
                    sj8array[1] = sj8array[0];
                    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
                    cj8array[1] = -cj8array[0];
                }
                else if( isnan(sj8array[0]) )
                {
                    // probably any value will work
//                    j8valid[0] = true;
//                    cj8array[0] = 1;
//                    sj8array[0] = 0;
//                    j8array[0] = 0;
                }
                for(int ij8 = 0; ij8 < 2; ++ij8)
                {
                    if( !j8valid[ij8] )
                    {
                        continue;
                    }
                    _ij8[0] = ij8;
                    _ij8[1] = -1;
                    for(int iij8 = ij8+1; iij8 < 2; ++iij8)
                    {
                        if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
                        {
//                            j8valid[iij8]=false;
//                            _ij8[1] = iij8;
//                            break;
                        }
                    }
                    j8 = j8array[ij8];
                    cj8 = cj8array[ij8];
                    sj8 = sj8array[ij8];

                    {
                        IkReal j6eval[2];
                        j6eval[0]=((px*px)+(py*py));
                        j6eval[1]=((IKabs(px))+(IKabs(py)));
                        if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
                        {
                            {
                                IkReal j7eval[2];
//                                j7eval[0]=((1.0)+(((1.32598714416896)*(cj8*cj8)))+(((1.32598714416896)*(sj8*sj8)))+(((2.3030303030303)*sj8)));
//                                j7eval[1]=((IKabs(cj8))+(((1.31578947368421)*(IKabs(((0.66)+(((0.76)*sj8))))))));
                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
                                {
//                                    continue; // 0 cases reached

                                }
                                else
                                {
                                    {
                                        IkReal j7array[2], cj7array[2], sj7array[2];
//                                        bool j7valid[2]= {false};
//                                        _nj7 = 2;
//                                        IkReal x10=((0.66)+(((0.76)*sj8)));
//                                        CheckValue<IkReal> x13 = IKatan2WithCheck(IkReal(x10),IkReal(((-0.76)*cj8)),IKFAST_ATAN2_MAGTHRESH);
                                        if (false)//if(!x13.valid)
                                        {
//                                            continue;
                                        }
//                                        IkReal x11=((1.0)*(x13.value));
                                        if (false)//if((((((0.5776)*(cj8*cj8)))+(x10*x10))) < -0.00001)
                                        {
//                                            continue;
                                        }
//                                        CheckValue<IkReal> x14=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((((0.5776)*(cj8*cj8)))+(x10*x10)))),-1);
                                        if (false)//if(!x14.valid)
                                        {
//                                            continue;
                                        }
                                        if (false)//if( ((pz*(x14.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x14.value))) > 1+IKFAST_SINCOS_THRESH )
                                        {
//                                            continue;
                                        }
//                                        IkReal x12=IKasin((pz*(x14.value)));
//                                        j7array[0]=((((-1.0)*x11))+x12);
//                                        sj7array[0]=IKsin(j7array[0]);
//                                        cj7array[0]=IKcos(j7array[0]);
//                                        j7array[1]=((3.14159265358979)+(((-1.0)*x11))+(((-1.0)*x12)));
//                                        sj7array[1]=IKsin(j7array[1]);
//                                        cj7array[1]=IKcos(j7array[1]);
                                        if (false)//if( j7array[0] > IKPI )
                                        {
//                                            j7array[0]-=IK2PI;
                                        }
                                        else if (false)//else if( j7array[0] < -IKPI )
                                        {
//                                            j7array[0]+=IK2PI;
                                        }
//                                        j7valid[0] = true;
                                        if (false)//if( j7array[1] > IKPI )
                                        {
//                                            j7array[1]-=IK2PI;
                                        }
                                        else if (false)//else if( j7array[1] < -IKPI )
                                        {
//                                            j7array[1]+=IK2PI;
                                        }
//                                        j7valid[1] = true;
//                                        for(int ij7 = 0; ij7 < 2; ++ij7)
                                        {
                                            if (false)//if( !j7valid[ij7] )
                                            {
//                                                continue;
                                            }
//                                            _ij7[0] = ij7;
//                                            _ij7[1] = -1;
//                                            for(int iij7 = ij7+1; iij7 < 2; ++iij7)
                                            {
                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                {
//                                                    j7valid[iij7]=false;
//                                                    _ij7[1] = iij7;
//                                                    break;
                                                }
                                            }
//                                            j7 = j7array[ij7];
//                                            cj7 = cj7array[ij7];
//                                            sj7 = sj7array[ij7];

                                            {
                                                IkReal j6eval[3];
//                                                IkReal x15=py*py;
//                                                IkReal x16=px*px;
//                                                IkReal x17=((38.0)*cj8);
//                                                IkReal x18=((7.0)*cj7);
//                                                IkReal x19=(cj7*x15);
//                                                IkReal x20=(cj7*x16);
//                                                IkReal x21=((50.0)*pz*sj7);
//                                                j6eval[0]=(x19+x20);
//                                                j6eval[1]=((IKabs(((((-1.0)*py*x21))+(((-1.0)*py*x17))+(((-1.0)*px*x18)))))+(IKabs((((px*x21))+((px*x17))+(((-1.0)*py*x18))))));
//                                                j6eval[2]=IKsign(((((50.0)*x20))+(((50.0)*x19))));
                                                if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j6eval[3];
//                                                        IkReal x22=py*py;
//                                                        IkReal x23=px*px;
//                                                        IkReal x24=((38.0)*sj8);
//                                                        IkReal x25=((7.0)*sj7);
//                                                        IkReal x26=((50.0)*cj7*pz);
//                                                        IkReal x27=(sj7*x22);
//                                                        IkReal x28=(sj7*x23);
//                                                        j6eval[0]=(x27+x28);
//                                                        j6eval[1]=((IKabs((((py*x26))+(((-1.0)*py*x24))+(((-33.0)*py))+(((-1.0)*px*x25)))))+(IKabs((((px*x24))+(((-1.0)*py*x25))+(((33.0)*px))+(((-1.0)*px*x26))))));
//                                                        j6eval[2]=IKsign(((((50.0)*x28))+(((50.0)*x27))));
                                                        if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                        {
                                                            {
                                                                IkReal j6eval[3];
//                                                                IkReal x29=py*py;
//                                                                IkReal x30=px*px;
//                                                                IkReal x31=(py*sj7);
//                                                                IkReal x32=((38.0)*sj8);
//                                                                IkReal x33=(px*sj7);
//                                                                IkReal x34=((38.0)*cj7*cj8);
//                                                                j6eval[0]=(x30+x29);
//                                                                j6eval[1]=((IKabs(((((-33.0)*x31))+(((-7.0)*px))+(((-1.0)*py*x34))+(((-1.0)*x31*x32)))))+(IKabs(((((33.0)*x33))+(((-7.0)*py))+((px*x34))+((x32*x33))))));
//                                                                j6eval[2]=IKsign(((((50.0)*x29))+(((50.0)*x30))));
                                                                if (false)//if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
                                                                {
//                                                                    continue; // 0 cases reached

                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j6array[1], cj6array[1], sj6array[1];
//                                                                        bool j6valid[1]= {false};
//                                                                        _nj6 = 1;
//                                                                        IkReal x35=(py*sj7);
//                                                                        IkReal x36=((38.0)*sj8);
//                                                                        IkReal x37=(px*sj7);
//                                                                        IkReal x38=((38.0)*cj7*cj8);
//                                                                        CheckValue<IkReal> x39=IKPowWithIntegerCheck<IkReal>(IKsign(((((50.0)*(py*py)))+(((50.0)*(px*px))))),-1);
                                                                        if (false)//if(!x39.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        CheckValue<IkReal> x40 = IKatan2WithCheck(IkReal(((((33.0)*x37))+(((-7.0)*py))+((x36*x37))+((px*x38)))),IkReal(((((-33.0)*x35))+(((-7.0)*px))+(((-1.0)*py*x38))+(((-1.0)*x35*x36)))),IKFAST_ATAN2_MAGTHRESH);
                                                                        if (false)//if(!x40.valid)
                                                                        {
//                                                                            continue;
                                                                        }
//                                                                        j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x39.value)))+(x40.value));
//                                                                        sj6array[0]=IKsin(j6array[0]);
//                                                                        cj6array[0]=IKcos(j6array[0]);
                                                                        if (false)//if( j6array[0] > IKPI )
                                                                        {
//                                                                            j6array[0]-=IK2PI;
                                                                        }
                                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                                        {
//                                                                            j6array[0]+=IK2PI;
                                                                        }
//                                                                        j6valid[0] = true;
//                                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                        {
                                                                            if (false)//if( !j6valid[ij6] )
                                                                            {
//                                                                                continue;
                                                                            }
//                                                                            _ij6[0] = ij6;
//                                                                            _ij6[1] = -1;
//                                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                            {
                                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                                {
//                                                                                    j6valid[iij6]=false;
//                                                                                    _ij6[1] = iij6;
//                                                                                    break;
                                                                                }
                                                                            }
//                                                                            j6 = j6array[ij6];
//                                                                            cj6 = cj6array[ij6];
//                                                                            sj6 = sj6array[ij6];
                                                                            {
                                                                                IkReal evalcond[5];
//                                                                                IkReal x41=IKsin(j6);
//                                                                                IkReal x42=IKcos(j6);
//                                                                                IkReal x43=((1.0)*cj7);
//                                                                                IkReal x44=((0.76)*sj8);
//                                                                                IkReal x45=((1.0)*sj7);
//                                                                                IkReal x46=((0.76)*cj8);
//                                                                                IkReal x47=((1.32)*sj7);
//                                                                                IkReal x48=(py*x42);
//                                                                                IkReal x49=(px*x41);
//                                                                                evalcond[0]=((0.14)+((py*x41))+((px*x42)));
//                                                                                evalcond[1]=((((-1.0)*x46))+(((-1.0)*pz*x45))+(((-1.0)*x43*x48))+((cj7*x49)));
//                                                                                evalcond[2]=((0.66)+(((-1.0)*pz*x43))+(((-1.0)*x45*x49))+((sj7*x48))+x44);
//                                                                                evalcond[3]=((((-1.0)*x49))+((sj7*x44))+(((0.66)*sj7))+((cj7*x46))+x48);
//                                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+((x47*x49))+(((-1.0)*(pz*pz)))+(((1.32)*cj7*pz))+(((-1.0)*(py*py)))+(((-1.0)*x47*x48)));
                                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                                {
//                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
//                                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                                vinfos[0].jointtype = 1;
//                                                                                vinfos[0].foffset = j6;
//                                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                                vinfos[0].maxsolutions = _nj6;
//                                                                                vinfos[1].jointtype = 1;
//                                                                                vinfos[1].foffset = j7;
//                                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                                vinfos[1].maxsolutions = _nj7;
//                                                                                vinfos[2].jointtype = 1;
//                                                                                vinfos[2].foffset = j8;
//                                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                                vinfos[2].maxsolutions = _nj8;
//                                                                                int vfree[0];
//                                                                                solutions.AddSolution(vinfos,vfree);
                                                                            }
                                                                        }
                                                                    }

                                                                }

                                                            }

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j6array[1], cj6array[1], sj6array[1];
//                                                                bool j6valid[1]= {false};
//                                                                _nj6 = 1;
//                                                                IkReal x50=((7.0)*sj7);
//                                                                IkReal x51=((50.0)*sj7);
//                                                                IkReal x52=((38.0)*sj8);
//                                                                IkReal x53=((50.0)*cj7*pz);
//                                                                CheckValue<IkReal> x54 = IKatan2WithCheck(IkReal(((((-1.0)*px*x53))+((px*x52))+(((33.0)*px))+(((-1.0)*py*x50)))),IkReal(((((-1.0)*px*x50))+(((-33.0)*py))+(((-1.0)*py*x52))+((py*x53)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x54.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x55=IKPowWithIntegerCheck<IkReal>(IKsign((((x51*(px*px)))+((x51*(py*py))))),-1);
                                                                if (false)//if(!x55.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j6array[0]=((-1.5707963267949)+(x54.value)+(((1.5707963267949)*(x55.value))));
//                                                                sj6array[0]=IKsin(j6array[0]);
//                                                                cj6array[0]=IKcos(j6array[0]);
                                                                if (false)//if( j6array[0] > IKPI )
                                                                {
//                                                                    j6array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j6array[0] < -IKPI )
                                                                {
//                                                                    j6array[0]+=IK2PI;
                                                                }
//                                                                j6valid[0] = true;
//                                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                                {
                                                                    if (false)//if( !j6valid[ij6] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij6[0] = ij6;
//                                                                    _ij6[1] = -1;
//                                                                    for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                                    {
                                                                        if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j6valid[iij6]=false;
//                                                                            _ij6[1] = iij6;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j6 = j6array[ij6];
//                                                                    cj6 = cj6array[ij6];
//                                                                    sj6 = sj6array[ij6];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x56=IKsin(j6);
//                                                                        IkReal x57=IKcos(j6);
//                                                                        IkReal x58=((1.0)*cj7);
//                                                                        IkReal x59=((0.76)*sj8);
//                                                                        IkReal x60=((1.0)*sj7);
//                                                                        IkReal x61=((0.76)*cj8);
//                                                                        IkReal x62=((1.32)*sj7);
//                                                                        IkReal x63=(py*x57);
//                                                                        IkReal x64=(px*x56);
//                                                                        evalcond[0]=((0.14)+((px*x57))+((py*x56)));
//                                                                        evalcond[1]=((((-1.0)*x58*x63))+((cj7*x64))+(((-1.0)*pz*x60))+(((-1.0)*x61)));
//                                                                        evalcond[2]=((0.66)+((sj7*x63))+x59+(((-1.0)*pz*x58))+(((-1.0)*x60*x64)));
//                                                                        evalcond[3]=(((sj7*x59))+(((0.66)*sj7))+x63+((cj7*x61))+(((-1.0)*x64)));
//                                                                        evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+((x62*x64))+(((-1.0)*(pz*pz)))+(((1.32)*cj7*pz))+(((-1.0)*(py*py)))+(((-1.0)*x62*x63)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j6;
//                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j7;
//                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j8;
//                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j6array[1], cj6array[1], sj6array[1];
//                                                        bool j6valid[1]= {false};
//                                                        _nj6 = 1;
//                                                        IkReal x65=((50.0)*cj7);
//                                                        IkReal x66=((38.0)*cj8);
//                                                        IkReal x67=((7.0)*cj7);
//                                                        IkReal x68=((50.0)*pz*sj7);
//                                                        CheckValue<IkReal> x69=IKPowWithIntegerCheck<IkReal>(IKsign((((x65*(px*px)))+((x65*(py*py))))),-1);
                                                        if (false)//if(!x69.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal((((px*x66))+((px*x68))+(((-1.0)*py*x67)))),IkReal(((((-1.0)*px*x67))+(((-1.0)*py*x66))+(((-1.0)*py*x68)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x70.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x69.value)))+(x70.value));
//                                                        sj6array[0]=IKsin(j6array[0]);
//                                                        cj6array[0]=IKcos(j6array[0]);
                                                        if (false)//if( j6array[0] > IKPI )
                                                        {
//                                                            j6array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j6array[0] < -IKPI )
                                                        {
//                                                            j6array[0]+=IK2PI;
                                                        }
//                                                        j6valid[0] = true;
//                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                        {
                                                            if (false)//if( !j6valid[ij6] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij6[0] = ij6;
//                                                            _ij6[1] = -1;
//                                                            for(int iij6 = ij6+1; iij6 < 1; ++iij6)
                                                            {
                                                                if (false)//if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j6valid[iij6]=false;
//                                                                    _ij6[1] = iij6;
//                                                                    break;
                                                                }
                                                            }
//                                                            j6 = j6array[ij6];
//                                                            cj6 = cj6array[ij6];
//                                                            sj6 = sj6array[ij6];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x71=IKsin(j6);
//                                                                IkReal x72=IKcos(j6);
//                                                                IkReal x73=((1.0)*cj7);
//                                                                IkReal x74=((0.76)*sj8);
//                                                                IkReal x75=((1.0)*sj7);
//                                                                IkReal x76=((0.76)*cj8);
//                                                                IkReal x77=((1.32)*sj7);
//                                                                IkReal x78=(py*x72);
//                                                                IkReal x79=(px*x71);
//                                                                evalcond[0]=((0.14)+((py*x71))+((px*x72)));
//                                                                evalcond[1]=((((-1.0)*x76))+((cj7*x79))+(((-1.0)*x73*x78))+(((-1.0)*pz*x75)));
//                                                                evalcond[2]=((0.66)+x74+(((-1.0)*pz*x73))+((sj7*x78))+(((-1.0)*x75*x79)));
//                                                                evalcond[3]=(((cj7*x76))+(((0.66)*sj7))+x78+(((-1.0)*x79))+((sj7*x74)));
//                                                                evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((1.32)*cj7*pz))+(((-1.0)*(py*py)))+(((-1.0)*x77*x78))+((x77*x79)));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j6;
//                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                vinfos[0].maxsolutions = _nj6;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j7;
//                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                vinfos[1].maxsolutions = _nj7;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j8;
//                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                vinfos[2].maxsolutions = _nj8;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                        }
                                    }

                                }

                            }

                        }
                        else
                        {
                            {
                                IkReal j6array[2], cj6array[2], sj6array[2];
                                bool j6valid[2]= {false};
                                _nj6 = 2;
                                CheckValue<IkReal> x82 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
                                if(!x82.valid)
                                {
//                                    continue;
                                }
                                IkReal x80=((1.0)*(x82.value));
                                if((((px*px)+(py*py))) < -0.00001)
                                {
//                                    continue;
                                }
                                CheckValue<IkReal> x83=IKPowWithIntegerCheck<IkReal>(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
                                if(!x83.valid)
                                {
//                                    continue;
                                }
                                if( (((0.14)*(x83.value))) < -1-IKFAST_SINCOS_THRESH || (((0.14)*(x83.value))) > 1+IKFAST_SINCOS_THRESH )
                                {
//                                    continue;
                                }
                                IkReal x81=IKasin(((0.14)*(x83.value)));
                                j6array[0]=((((-1.0)*x81))+(((-1.0)*x80)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                j6array[1]=((3.14159265358979)+x81+(((-1.0)*x80)));
                                sj6array[1]=IKsin(j6array[1]);
                                cj6array[1]=IKcos(j6array[1]);
                                if( j6array[0] > IKPI )
                                {
//                                    j6array[0]-=IK2PI;
                                }
                                else if( j6array[0] < -IKPI )
                                {
                                    j6array[0]+=IK2PI;
                                }
                                j6valid[0] = true;
                                if( j6array[1] > IKPI )
                                {
//                                    j6array[1]-=IK2PI;
                                }
                                else if( j6array[1] < -IKPI )
                                {
//                                    j6array[1]+=IK2PI;
                                }
                                j6valid[1] = true;
                                for(int ij6 = 0; ij6 < 2; ++ij6)
                                {
                                    if( !j6valid[ij6] )
                                    {
//                                        continue;
                                    }
                                    _ij6[0] = ij6;
                                    _ij6[1] = -1;
                                    for(int iij6 = ij6+1; iij6 < 2; ++iij6)
                                    {
                                        if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
                                        {
//                                            j6valid[iij6]=false;
//                                            _ij6[1] = iij6;
//                                            break;
                                        }
                                    }
                                    j6 = j6array[ij6];
                                    cj6 = cj6array[ij6];
                                    sj6 = sj6array[ij6];

                                    {
                                        IkReal j7eval[3];
                                        IkReal x84=((475.0)*pz);
                                        IkReal x85=(cj6*py);
                                        IkReal x86=(px*sj6);
                                        IkReal x87=((475.0)*cj8);
                                        IkReal x88=((475.0)*sj8);
                                        j7eval[0]=((-1.00996810207337)+(((-1.0)*sj8)));
                                        j7eval[1]=IKsign(((-633.25)+(((-627.0)*sj8))));
                                        j7eval[2]=((IKabs((((x85*x87))+(((-1.0)*x86*x87))+(((-412.5)*pz))+(((-1.0)*sj8*x84)))))+(IKabs((((x85*x88))+(((-1.0)*x86*x88))+(((412.5)*x85))+(((-412.5)*x86))+((cj8*x84))))));
                                        if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j7eval[3];
//                                                IkReal x89=(cj8*pz);
//                                                IkReal x90=(px*sj6);
//                                                IkReal x91=(cj6*py);
//                                                IkReal x92=((19.0)*sj8);
//                                                IkReal x93=((25.0)*pz);
//                                                IkReal x94=((1.15151515151515)*sj8);
//                                                j7eval[0]=((((1.15151515151515)*x89))+(((-1.0)*x91*x94))+((x90*x94))+x90+(((-1.0)*x91)));
//                                                j7eval[1]=((IKabs(((((-1.0)*x91*x93))+((x90*x93))+(((12.54)*cj8))+(((14.44)*cj8*sj8)))))+(IKabs(((25.33)+(((-1.0)*pz*x93))+(((-14.44)*(cj8*cj8)))+(((25.08)*sj8))))));
//                                                j7eval[2]=IKsign(((((16.5)*x90))+(((-1.0)*x91*x92))+((x90*x92))+(((19.0)*x89))+(((-16.5)*x91))));
                                                if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal j7eval[3];
//                                                        IkReal x95=cj6*cj6;
//                                                        IkReal x96=px*px;
//                                                        IkReal x97=pz*pz;
//                                                        IkReal x98=py*py;
//                                                        IkReal x99=((19.0)*cj8);
//                                                        IkReal x100=(cj6*py);
//                                                        IkReal x101=(px*sj6);
//                                                        IkReal x102=((19.0)*sj8);
//                                                        IkReal x103=((25.0)*x96);
//                                                        IkReal x104=(x95*x98);
//                                                        j7eval[0]=((((-1.0)*x97))+(((-1.0)*x96))+((x95*x96))+(((2.0)*x100*x101))+(((-1.0)*x104)));
//                                                        j7eval[1]=IKsign((((x103*x95))+(((-1.0)*x103))+(((-25.0)*x97))+(((50.0)*x100*x101))+(((-25.0)*x104))));
//                                                        j7eval[2]=((IKabs(((((16.5)*x100))+(((-1.0)*x101*x102))+((pz*x99))+(((-16.5)*x101))+((x100*x102)))))+(IKabs(((((-1.0)*pz*x102))+((x100*x99))+(((-1.0)*x101*x99))+(((-16.5)*pz))))));
                                                        if (false)//if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
                                                        {
//                                                            continue; // 0 cases reached

                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j7array[1], cj7array[1], sj7array[1];
//                                                                bool j7valid[1]= {false};
//                                                                _nj7 = 1;
//                                                                IkReal x105=px*px;
//                                                                IkReal x106=cj6*cj6;
//                                                                IkReal x107=(px*sj6);
//                                                                IkReal x108=((19.0)*cj8);
//                                                                IkReal x109=(cj6*py);
//                                                                IkReal x110=((19.0)*sj8);
//                                                                IkReal x111=((25.0)*x105);
//                                                                CheckValue<IkReal> x112=IKPowWithIntegerCheck<IkReal>(IKsign(((((-25.0)*x106*(py*py)))+((x106*x111))+(((-1.0)*x111))+(((-25.0)*(pz*pz)))+(((50.0)*x107*x109)))),-1);
                                                                if (false)//if(!x112.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                CheckValue<IkReal> x113 = IKatan2WithCheck(IkReal(((((16.5)*x109))+(((-1.0)*x107*x110))+((pz*x108))+((x109*x110))+(((-16.5)*x107)))),IkReal(((((-1.0)*x107*x108))+((x108*x109))+(((-1.0)*pz*x110))+(((-16.5)*pz)))),IKFAST_ATAN2_MAGTHRESH);
                                                                if (false)//if(!x113.valid)
                                                                {
//                                                                    continue;
                                                                }
//                                                                j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x112.value)))+(x113.value));
//                                                                sj7array[0]=IKsin(j7array[0]);
//                                                                cj7array[0]=IKcos(j7array[0]);
                                                                if (false)//if( j7array[0] > IKPI )
                                                                {
//                                                                    j7array[0]-=IK2PI;
                                                                }
                                                                else if (false)//else if( j7array[0] < -IKPI )
                                                                {
//                                                                    j7array[0]+=IK2PI;
                                                                }
//                                                                j7valid[0] = true;
//                                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                                {
                                                                    if (false)//if( !j7valid[ij7] )
                                                                    {
//                                                                        continue;
                                                                    }
//                                                                    _ij7[0] = ij7;
//                                                                    _ij7[1] = -1;
//                                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                                    {
                                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                        {
//                                                                            j7valid[iij7]=false;
//                                                                            _ij7[1] = iij7;
//                                                                            break;
                                                                        }
                                                                    }
//                                                                    j7 = j7array[ij7];
//                                                                    cj7 = cj7array[ij7];
//                                                                    sj7 = sj7array[ij7];
                                                                    {
                                                                        IkReal evalcond[5];
//                                                                        IkReal x114=IKcos(j7);
//                                                                        IkReal x115=IKsin(j7);
//                                                                        IkReal x116=((0.76)*sj8);
//                                                                        IkReal x117=((1.0)*pz);
//                                                                        IkReal x118=((0.76)*cj8);
//                                                                        IkReal x119=(cj6*py);
//                                                                        IkReal x120=(px*sj6);
//                                                                        IkReal x121=((1.0)*x120);
//                                                                        IkReal x122=(x115*x119);
//                                                                        evalcond[0]=(((x114*x116))+(((0.66)*x114))+(((-1.0)*x117))+(((-1.0)*x115*x118)));
//                                                                        evalcond[1]=(((x114*x120))+(((-1.0)*x118))+(((-1.0)*x115*x117))+(((-1.0)*x114*x119)));
//                                                                        evalcond[2]=((0.66)+(((-1.0)*x115*x121))+x122+x116+(((-1.0)*x114*x117)));
//                                                                        evalcond[3]=(((x114*x118))+(((0.66)*x115))+(((-1.0)*x121))+x119+((x115*x116)));
//                                                                        evalcond[4]=((0.1616)+(((1.32)*pz*x114))+(((-1.32)*x122))+(((-1.0)*(px*px)))+(((1.32)*x115*x120))+(((-1.0)*(py*py)))+(((-1.0)*pz*x117)));
                                                                        if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                        {
//                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
//                                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                        vinfos[0].jointtype = 1;
//                                                                        vinfos[0].foffset = j6;
//                                                                        vinfos[0].indices[0] = _ij6[0];
//                                                                        vinfos[0].indices[1] = _ij6[1];
//                                                                        vinfos[0].maxsolutions = _nj6;
//                                                                        vinfos[1].jointtype = 1;
//                                                                        vinfos[1].foffset = j7;
//                                                                        vinfos[1].indices[0] = _ij7[0];
//                                                                        vinfos[1].indices[1] = _ij7[1];
//                                                                        vinfos[1].maxsolutions = _nj7;
//                                                                        vinfos[2].jointtype = 1;
//                                                                        vinfos[2].foffset = j8;
//                                                                        vinfos[2].indices[0] = _ij8[0];
//                                                                        vinfos[2].indices[1] = _ij8[1];
//                                                                        vinfos[2].maxsolutions = _nj8;
//                                                                        int vfree[0];
//                                                                        solutions.AddSolution(vinfos,vfree);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j7array[1], cj7array[1], sj7array[1];
//                                                        bool j7valid[1]= {false};
//                                                        _nj7 = 1;
//                                                        IkReal x123=(px*sj6);
//                                                        IkReal x124=(cj6*py);
//                                                        IkReal x125=((19.0)*sj8);
//                                                        IkReal x126=((25.0)*pz);
//                                                        CheckValue<IkReal> x127=IKPowWithIntegerCheck<IkReal>(IKsign(((((16.5)*x123))+(((-1.0)*x124*x125))+((x123*x125))+(((-16.5)*x124))+(((19.0)*cj8*pz)))),-1);
                                                        if (false)//if(!x127.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        CheckValue<IkReal> x128 = IKatan2WithCheck(IkReal(((25.33)+(((-1.0)*pz*x126))+(((-14.44)*(cj8*cj8)))+(((25.08)*sj8)))),IkReal(((((-1.0)*x124*x126))+((x123*x126))+(((12.54)*cj8))+(((14.44)*cj8*sj8)))),IKFAST_ATAN2_MAGTHRESH);
                                                        if (false)//if(!x128.valid)
                                                        {
//                                                            continue;
                                                        }
//                                                        j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x127.value)))+(x128.value));
//                                                        sj7array[0]=IKsin(j7array[0]);
//                                                        cj7array[0]=IKcos(j7array[0]);
                                                        if (false)//if( j7array[0] > IKPI )
                                                        {
//                                                            j7array[0]-=IK2PI;
                                                        }
                                                        else if (false)//else if( j7array[0] < -IKPI )
                                                        {
//                                                            j7array[0]+=IK2PI;
                                                        }
//                                                        j7valid[0] = true;
//                                                        for(int ij7 = 0; ij7 < 1; ++ij7)
                                                        {
                                                            if (false)//if( !j7valid[ij7] )
                                                            {
//                                                                continue;
                                                            }
//                                                            _ij7[0] = ij7;
//                                                            _ij7[1] = -1;
//                                                            for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                            {
                                                                if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                                {
//                                                                    j7valid[iij7]=false;
//                                                                    _ij7[1] = iij7;
//                                                                    break;
                                                                }
                                                            }
//                                                            j7 = j7array[ij7];
//                                                            cj7 = cj7array[ij7];
//                                                            sj7 = sj7array[ij7];
                                                            {
                                                                IkReal evalcond[5];
//                                                                IkReal x129=IKcos(j7);
//                                                                IkReal x130=IKsin(j7);
//                                                                IkReal x131=((0.76)*sj8);
//                                                                IkReal x132=((1.0)*pz);
//                                                                IkReal x133=((0.76)*cj8);
//                                                                IkReal x134=(cj6*py);
//                                                                IkReal x135=(px*sj6);
//                                                                IkReal x136=((1.0)*x135);
//                                                                IkReal x137=(x130*x134);
//                                                                evalcond[0]=(((x129*x131))+(((0.66)*x129))+(((-1.0)*x132))+(((-1.0)*x130*x133)));
//                                                                evalcond[1]=(((x129*x135))+(((-1.0)*x133))+(((-1.0)*x129*x134))+(((-1.0)*x130*x132)));
//                                                                evalcond[2]=((0.66)+x137+x131+(((-1.0)*x129*x132))+(((-1.0)*x130*x136)));
//                                                                evalcond[3]=(((x129*x133))+x134+(((0.66)*x130))+(((-1.0)*x136))+((x130*x131)));
//                                                                evalcond[4]=((0.1616)+(((-1.0)*pz*x132))+(((-1.0)*(px*px)))+(((-1.32)*x137))+(((1.32)*x130*x135))+(((1.32)*pz*x129))+(((-1.0)*(py*py))));
                                                                if (false)//if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                                {
//                                                                    continue;
                                                                }
                                                            }

                                                            {
//                                                                IkSingleDOFSolutionBase<IkReal>  vinfos[3];
//                                                                vinfos[0].jointtype = 1;
//                                                                vinfos[0].foffset = j6;
//                                                                vinfos[0].indices[0] = _ij6[0];
//                                                                vinfos[0].indices[1] = _ij6[1];
//                                                                vinfos[0].maxsolutions = _nj6;
//                                                                vinfos[1].jointtype = 1;
//                                                                vinfos[1].foffset = j7;
//                                                                vinfos[1].indices[0] = _ij7[0];
//                                                                vinfos[1].indices[1] = _ij7[1];
//                                                                vinfos[1].maxsolutions = _nj7;
//                                                                vinfos[2].jointtype = 1;
//                                                                vinfos[2].foffset = j8;
//                                                                vinfos[2].indices[0] = _ij8[0];
//                                                                vinfos[2].indices[1] = _ij8[1];
//                                                                vinfos[2].maxsolutions = _nj8;
//                                                                int vfree[0];
//                                                                solutions.AddSolution(vinfos,vfree);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            {
                                                IkReal j7array[1], cj7array[1], sj7array[1];
                                                bool j7valid[1]= {false};
                                                _nj7 = 1;
                                                IkReal x138=((475.0)*pz);
                                                IkReal x139=(cj6*py);
                                                IkReal x140=(px*sj6);
                                                IkReal x141=((475.0)*cj8);
                                                IkReal x142=((475.0)*sj8);
                                                CheckValue<IkReal> x143=IKPowWithIntegerCheck<IkReal>(IKsign(((-633.25)+(((-627.0)*sj8)))),-1);
                                                if(!x143.valid)
                                                {
//                                                    continue;
                                                }
                                                CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal((((cj8*x138))+(((-1.0)*x140*x142))+(((-412.5)*x140))+(((412.5)*x139))+((x139*x142)))),IkReal(((((-1.0)*x140*x141))+(((-412.5)*pz))+(((-1.0)*sj8*x138))+((x139*x141)))),IKFAST_ATAN2_MAGTHRESH);
                                                if(!x144.valid)
                                                {
//                                                    continue;
                                                }
                                                j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x143.value)))+(x144.value));
                                                sj7array[0]=IKsin(j7array[0]);
                                                cj7array[0]=IKcos(j7array[0]);
                                                if( j7array[0] > IKPI )
                                                {
//                                                    j7array[0]-=IK2PI;
                                                }
                                                else if( j7array[0] < -IKPI )
                                                {
                                                    j7array[0]+=IK2PI;
                                                }
                                                j7valid[0] = true;
                                                for(int ij7 = 0; ij7 < 1; ++ij7)
                                                {
                                                    if( !j7valid[ij7] )
                                                    {
//                                                        continue;
                                                    }
                                                    _ij7[0] = ij7;
                                                    _ij7[1] = -1;
                                                    for(int iij7 = ij7+1; iij7 < 1; ++iij7)
                                                    {
                                                        if (false)//if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
                                                        {
//                                                            j7valid[iij7]=false;
//                                                            _ij7[1] = iij7;
//                                                            break;
                                                        }
                                                    }
                                                    j7 = j7array[ij7];
                                                    cj7 = cj7array[ij7];
                                                    sj7 = sj7array[ij7];
                                                    {
                                                        IkReal evalcond[5];
                                                        IkReal x145=IKcos(j7);
                                                        IkReal x146=IKsin(j7);
                                                        IkReal x147=((0.76)*sj8);
                                                        IkReal x148=((1.0)*pz);
                                                        IkReal x149=((0.76)*cj8);
                                                        IkReal x150=(cj6*py);
                                                        IkReal x151=(px*sj6);
                                                        IkReal x152=((1.0)*x151);
                                                        IkReal x153=(x146*x150);
                                                        evalcond[0]=((((-1.0)*x148))+(((0.66)*x145))+((x145*x147))+(((-1.0)*x146*x149)));
                                                        evalcond[1]=((((-1.0)*x149))+((x145*x151))+(((-1.0)*x145*x150))+(((-1.0)*x146*x148)));
                                                        evalcond[2]=((0.66)+x153+x147+(((-1.0)*x145*x148))+(((-1.0)*x146*x152)));
                                                        evalcond[3]=((((0.66)*x146))+(((-1.0)*x152))+((x145*x149))+x150+((x146*x147)));
                                                        evalcond[4]=((0.1616)+(((-1.0)*(px*px)))+(((1.32)*x146*x151))+(((1.32)*pz*x145))+(((-1.0)*pz*x148))+(((-1.0)*(py*py)))+(((-1.32)*x153)));
                                                        if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
                                                        {
//                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkSingleDOFSolutionBase<IkReal>  vinfos[3];
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j6;
                                                        vinfos[0].indices[0] = _ij6[0];
                                                        vinfos[0].indices[1] = _ij6[1];
                                                        vinfos[0].maxsolutions = _nj6;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j7;
                                                        vinfos[1].indices[0] = _ij7[0];
                                                        vinfos[1].indices[1] = _ij7[1];
                                                        vinfos[1].maxsolutions = _nj7;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j8;
                                                        vinfos[2].indices[0] = _ij8[0];
                                                        vinfos[2].indices[1] = _ij8[1];
                                                        vinfos[2].maxsolutions = _nj8;
                                                        int vfree[0];
                                                        solutions.AddSolution(vinfos,vfree);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }

                        }

                    }
                }
            }
        }
        return solutions.GetNumSolutions()>0;
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
{
    IKSolver solver;
    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
    IKSolver solver;
//    return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
//    return "<robot:GenericRobot - Prototype (dbd83885b2b27d2202afadb037c40abc)>";
}

IKFAST_API const char* GetIkFastVersion()
{
//    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 )
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    IkReal vfree(GetNumFreeParameters[)];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
    {
        vfree[i] = atof(argv[13+i]);
    }
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess )
    {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    IkReal solvalues(GetNumJoints[)];
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        IkReal vsolfree(sol.GetFree().size[)];
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            printf("%.15f, ", solvalues[j]);
        }
        printf("\n");
    }
    return 0;
}

#endif
